
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/52960705"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '52960705';var commentscount = 0; var islock = false
        window.quickReplyflag = true;
        var totalFloor=0;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="1.面向对象程序设计的基本概念
面向对象程序设计 - OOP程序设计模式
将程序看成是一系列的对象组成的，而非一些列的动作组成的，对象是程序设计的基本单元
对象：包含状态（数据）和行为（状态）的程序设计实体 - 类的实例化
状态：我们将保存在对象中的保存对象的信息称之为状态
行为：一些对象可以完成的动作，常常有&quot;报告&quot;和&quot;修改&quot;状态
首先我们需要明确的是，对象本省并不能构成完整的程序，" />
    <meta name="keywords" content="" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>Lantian和Tianqi的移动开发之旅 - 003 OOP - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">Lantian和Tianqi的移动开发之旅 - 003 OOP</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年10月28日 23:14:51</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">234</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
1.面向对象程序设计的基本概念<br>
面向对象程序设计 - OOP程序设计模式<br>
<span style="white-space:pre"></span>将程序看成是一系列的对象组成的，而非一些列的动作组成的，对象是程序设计的基本单元<br>
<span style="white-space:pre"></span>对象：包含状态（数据）和行为（状态）的程序设计实体 - 类的实例化<br>
<span style="white-space:pre"></span>状态：我们将保存在对象中的保存对象的信息称之为状态<br>
<span style="white-space:pre"></span>行为：一些对象可以完成的动作，常常有&quot;报告&quot;和&quot;修改&quot;状态<br>
<span style="white-space:pre"></span>首先我们需要明确的是，对象本省并不能构成完整的程序，对象之时具有不同角色和功能的程序组件，对象可以作为解决更为复杂的程序设计的一部分，创建并适用对象的代码称之为客户<br>
<span style="white-space:pre"></span>客户：与该类和该类的对象进行交互的代码<br>
<span style="white-space:pre"></span><br>
<span style="white-space:pre"></span>eg讲解：Point（Java.awt包）<br>
<span style="white-space:pre"></span>状态：横坐标，纵坐标（整数）<br>
<span style="white-space:pre"></span>行为：syso - Point 打印坐标<br>
<span style="white-space:pre"></span>&nbsp; &nbsp; &nbsp; translate(x,y)移动x,y距离<br>
&nbsp; &nbsp;<span style="white-space:pre"> </span>&nbsp; &nbsp; &nbsp; public:我们话可以直接对横坐标和纵坐标进行操作<br>
<span style="white-space:pre"></span>&nbsp; &nbsp; &nbsp; setLocation(x,y)设置坐标&#20540;<br>
<span style="white-space:pre"></span>&nbsp; &nbsp; &nbsp; distance(Point X)计算该点到x的距离，并返回<br>
<span style="white-space:pre"></span>对象的状态：<br>
<span style="white-space:pre"></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;只包含信息没有行为的我们也可以叫他结构体<br>
<span style="white-space:pre"></span>对象的行为：<br>
<span style="white-space:pre"></span>对象中类的方法，用来操作类中（对象中的）数据元素，这里我们要小心对数据元素进行操作的时候有作用域的问题，因为我们的变量定义是在数据的操作的作用于是定义在第一个大括号之内的，对于类的数据元素来说也是一样的，类中的状态数据元素的作用于就是整个类<br>
<span style="white-space:pre"></span>隐含的参数：<br>
<span style="white-space:pre"></span>市里的方法可以通过摸个隐蔽的渠道来指导我们当前操作的对象（隐含参数，我们调用的时候就知道我们的示例函数操作的对象），每个对象都有自己的行为函数的副本<br>
<span style="white-space:pre"></span>修改器&#43;访问器：<br>
<span style="white-space:pre"></span>前者修改对象的内存信息，后置不做任何修改，我们只是访问我们的对象的内存数据<br>
<br>
<br>
<span style="white-space:pre"></span>toString方法:Java语言的设计者认为Java应当与String类型良好的配合工作，在syso中我们已经可以对字符串直接进行拼接操作<br>
<span style="white-space:pre"></span>当Java需要我们利用syso标准输出一段字符串或者实现字符串的连接操作的时候，会自动调用相应的字符串toString方法，返回的是表示对象实例的字符串，toString方法不存在调用的参数，但是返回一个字符串<br>
<span style="white-space:pre"></span>但是一旦加入我们要输出的东西并不存在相应的toString方法的话，Java会自动在类的名称后面添加一个@之后跟上一段的乱码（通常和你存的地址有关），但是一旦我们定义了相关的toString方法的话，我们实惠自定调用的自己的toString方法<br>
<span style="white-space:pre"></span>建议位字节写的每一个类都加上toString方法<br>
<br>
<br>
<span style="white-space:pre"></span>对象的初始化 - 构造函数：<br>
<span style="white-space:pre"></span>构造函数用public修饰，后面是雷鸣和我们所需要的参数，构造函数也是针对摸一个特定的对象，函数的名字和类的名字是相同的，并且构造函数没有返回&#20540;<br>
<span style="white-space:pre"></span>我们经常说的new操作的实质：<br>
<span style="white-space:pre"></span>1.创建新的对象，并未对象开辟相应的内存区域<br>
<span style="white-space:pre"></span>2.对对象调用相应的显示构造函数<br>
<span style="white-space:pre"></span>3.在站区域中我们创建相应的对象的引用变量，并将我们新开辟的UI想的内存地址分配到我们到我们的引用变量上<br>
<span style="white-space:pre"></span>如果我们没有定义构造函数的话，其实是并不会出现错误的，因为Java自动为没有显示设定构造函数的类设定缺省 默认的构造函数<br>
<span style="white-space:pre"></span>但是缺省的构造函数会自动的将为类中的相应的状态变量设定0和相应的空&#20540;<br>
<br>
<br>
<span style="white-space:pre"></span>关键字this：<br>
<span style="white-space:pre"></span>在类的内部我们可以访问到相应的隐含参数，注意this只有一个内存区域，当我们制定不同的对象的时候，我们的this是指向不同的对象的，该方法一个重要的作用就是避免函数的名字的重复<br>
<span style="white-space:pre"></span>构造函数的重载：一个类是允许存在多个不同的构造函数的，为了方便我们在建立对象的时候的多重的情况的选择<br>
<br>
<br>
<br>
<br>
<span style="white-space:pre"></span>封装性：<br>
<span style="white-space:pre"></span>封装的概念：讲一个对象的内部事项的方法隐藏起来，不让他的客户代码看到<br>
<span style="white-space:pre"></span>抽象：我么只关注问题的本身属性而不关注我们的内存的实现的细节<br>
<span style="white-space:pre"></span>抽象是封装的表现，二良好的封装也是我们设计需要的<br>
<span style="white-space:pre"></span><br>
<span style="white-space:pre"></span>私有成员：<br>
<span style="white-space:pre"></span>我们需要对垒中的成员进行封装的话，我们至少要在状态的开头用private关键字声明其为私有的属性<br>
<span style="white-space:pre"></span>私有的变量对于类内部的代码来说是可见的，但是对于我们的外部的客户代码来说是不可见的<br>
<span style="white-space:pre"></span>我们为了可以读取对象的相应的状态可以增设set或者get方法，目的是返回一个类内部成员的副本，相当于我们对外部的客户代码只有访问权限，没有修改的权限<br>
<span style="white-space:pre"></span><br>
<br>
<br>
<span style="white-space:pre"></span>类的不变式：在类的对象的生命周期之内，我们对于一个状态的永真断言<br>
<br>
<br>
<br>
<br>
2.继承和接口：<br>
<span style="white-space:pre"></span>继承：允许我们的代码的复用，代码共享<br>
<span style="white-space:pre"></span>接口：允许我们的用统一的行为取处理不同的对象，不需要这些对象之间共享代码<br>
<span style="white-space:pre"></span>代码的复用：我们抽象出代码的普遍的结构之后抽象出来相同的部分从而实现的代码的重复使用<br>
<span style="white-space:pre"></span>在多个程序中相同使用一段代码，我们引入集成的概念是的哦我们呢可以在一个类的基础上对类进行相应的扩充使得我们的逻辑更加的清晰<br>
<span style="white-space:pre"></span>继承：<br>
<span style="white-space:pre"></span>1.相同，共用<br>
<span style="white-space:pre"></span>2.不同，对于不同的类我们制定不同的规范<br>
<span style="white-space:pre"></span>Java允许我们通过继承的方法，避免在定义一个相&#20284;的类的时候重复的产生冗余的代码，如果已经有一个类包含了我们需要的所有的信息，我们完全可以继承这个类，共用相同的部分，至于特殊的部分我们在添加修改即可<br>
<span style="white-space:pre"></span>派生出来的类叫做 - 子类，子类继承自 - 父类的全部的状态和行为<br>
<span style="white-space:pre"></span>我们一般都说是子类扩展了父类，因为子类不仅可以介绍了父类的状态和行为，还可以添加自己特有的性质 &nbsp;？？？？控制子类访问的protected<br>
<span style="white-space:pre"></span>在Java中，我们只是提倡单继承，一个类可以扩展成多个类，但是一个类智能是有一个父类扩展来的<br>
<br>
<br>
<span style="white-space:pre"></span>关键字引入：extends<br>
<br>
<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;方法的重写：咋子类中我们可以通过重写父类的函数方法改变我们的子类的行为<br>
<span style="white-space:pre"></span>重写：在子类中提供给父类的默写行为的一些新的实现的函数版本，替换我们之前的父类的函数<br>
<br>
<br>
<span style="white-space:pre"></span>与父类的交互：super<br>
<span style="white-space:pre"></span>调用重写的方法，super关键字可以再子类中调用到父类的构造函数和方法<br>
<span style="white-space:pre"></span>注意子类不能说会用父类中的私有字段，Java限制类子类直接的访问从父类继承来的字段<br>
<span style="white-space:pre"></span>构造函数是不会被子类继承的，子类的够早的时候是默认我们会调用父类的狗在函数的，如果我们没有制定相应的构造函数说明，我们编译器会自动的生成一个没有参数的默认的父类的构造函数<br>
<span style="white-space:pre"></span>所以说，我们我们在子类中显示调用父类的构造函数的方法就是调用我们super方法，调用父类的构造函数，并且该super语句必须在构造函数的第一行<br>
<span style="white-space:pre"></span>super还允许我们调用已经被冲写的父类函数，super只会调用上次的一个父类<br>
<span style="white-space:pre"></span>Object类：<br>
<span style="white-space:pre"></span>Java中有一个Object类是所有的类的父类，没有extends额类，系统自动的默认添加上extends Object<br>
<span style="white-space:pre"></span>Object的主要的方法：<br>
<span style="white-space:pre"></span>1.clone()创建对象的副本<br>
<span style="white-space:pre"></span>2.equals()判断当前对象是否相等，&#20540;<br>
<span style="white-space:pre"></span>3.finalize()对象被销毁的时候自动调用<br>
<span style="white-space:pre"></span>4.getClass()返回对象的类型的信息<br>
<span style="white-space:pre"></span>5.hashCode()返回与对象相关的一个数字，在默写数据结构中游泳<br>
<span style="white-space:pre"></span>6.toString()字符创的形式返回对象的信息<br>
<span style="white-space:pre"></span>7.多线程相关的方法<br>
<span style="white-space:pre"></span>如果我们希望摸个方法可以接受任何类型的对象作为参数，我们可以将形参设置为Object，返回&#20540;是Object也是合法的，使用的时候记住先强制类型转换<br>
<br>
<br>
<span style="white-space:pre"></span>equals()方法：<br>
<span style="white-space:pre"></span>==运算符不能用在对象的身上，因为对于不同的对象也可能具有相同的内容<br>
<span style="white-space:pre"></span>==表示我们判断两个被比较的引用是否引用了相同的对象，而不是比较我们的要比较的引用对象的对象的状态是否是相同的<br>
<span style="white-space:pre"></span>equals()方法不一样，equals()方法比较两个对象的状态是否是相同的（比较我们的两个变量的内容是否相同），如果我们没有对equals()方法进行重载的话，那么equals()方法实际上就是==，只有我们自己重写这个这个方法才会有用处<br>
<br>
<br>
<span style="white-space:pre"></span>instanceof关键字：注意，如果我们使用通用的Object来进行比较，我们只是将当前的对象的引用类型表示成父亲级别的变量，但是我们instanceof比较的时候还是使用原来的对象的本身来进行比较<br>
<span style="white-space:pre"></span>instanceof关键字用来判断检测一个变量是否是某个类型的对象，返回&#20540;是boolean类型<br>
<span style="white-space:pre"></span>eg:如果是同一个类型的我们就先强制类型转换然后进行某种操作，不是的话我们就返回一个false的boolean<br>
<span style="white-space:pre"></span>public boolean equals(Object x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>if(x instancof point) x=(point)x,return 判断; &nbsp; *****instanceof判断当前的引用变量指向什么类型的对象*****<br>
<span style="white-space:pre"></span>else return false;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
<span style="white-space:pre"></span>上面的代码是大多数的equals函数的判断的副本，我们可以当做模板来记忆<br>
<br>
<br>
<span style="white-space:pre"></span>多态性：继承的好处就是我们通过继承实现了代码的复用，就像我们上面对于继承中的方法重写中哪里说的一样，我们在大量的一批的数组中同时保存一个继承链中的类的对象的时候，因为不同的集成的子类对于相同的父类函数进行了重写<br>
<span style="white-space:pre"></span>&nbsp; &nbsp; &nbsp; &nbsp; 所以说我们可以在不同的对象中调用相同的函数来实现不同的行为反应，我们成这种代码的能力叫做多态<br>
<span style="white-space:pre"></span>定义：允许一段代码作用于几种不同的类型的对象中，而且代码会根据对象的不同自动的执行相应的不用的动作<br>
<span style="white-space:pre"></span>在C&#43;&#43;中，我们通过父类的指针指向不同的子类的对象从而实现调用不同的子类中的相同的方法实现不同的动作<br>
<span style="white-space:pre"></span>在Java中，我们已经没有了指针的概念，但是我们还是有引用的概念，我们的引用可以指向不同的对象，从而实现和上述一样的效果<br>
<span style="white-space:pre"></span>/*eg:<br>
<span style="white-space:pre"></span>public class class_in_java {<br>
<br>
<br>
<span style="white-space:pre"></span>public static void test(Object x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>x=(data)x;<br>
<span style="white-space:pre"></span>System.out.println(x);<br>
<span style="white-space:pre"></span>System.out.println('\n');<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public static Object test2(data x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return x;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public static void main(String[] args) {<br>
<span style="white-space:pre"></span>// TODO 自动生成的方法存根<br>
<span style="white-space:pre"></span>//data a=new data(1,2);<br>
<span style="white-space:pre"></span>//test(a);<br>
<span style="white-space:pre"></span>//System.out.println((data)test2(a));<br>
<span style="white-space:pre"></span>data a=new data(1,2);<br>
<span style="white-space:pre"></span>System.out.println(a);<br>
<span style="white-space:pre"></span>//a.change() &nbsp; 这里的调用就是错的<br>
<span style="white-space:pre"></span>a=new pdata(2,2);<br>
<span style="white-space:pre"></span>System.out.println(a);<br>
<span style="white-space:pre"></span>}<br>
<br>
<br>
}<br>
<br>
<br>
class data<br>
{<br>
<span style="white-space:pre"></span>protected int a;<br>
<span style="white-space:pre"></span>protected int b;<br>
<span style="white-space:pre"></span>public data(int x,int y)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>a=x;<br>
<span style="white-space:pre"></span>b=y;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public String toString()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return Integer.toString(a)&#43;Integer.toString(b);<br>
<span style="white-space:pre"></span>}<br>
}<br>
<br>
<br>
class pdata extends data<br>
{<br>
<span style="white-space:pre"></span>public pdata(int x,int y)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>super(x,y);<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public void change()<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
<span style="white-space:pre"></span>syso - 输出<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
<br>
<br>
<span style="white-space:pre"></span>public String toString()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return Integer.toString(a*b);<br>
<span style="white-space:pre"></span>}<br>
}/*<br>
<span style="white-space:pre"></span>**************多态的基础就是引用型变量(Java)没有必要和所引用的对象的类型完全匹配，这是最重要的************<br>
<span style="white-space:pre"></span>**************我们确切的来说，一开始我们声明城市父类的引用类型我们完全之后可以用来直接指向子类的对象示例*********这一点同C&#43;&#43;<br>
<span style="white-space:pre"></span>在基本数据类型的时候我们知道我们可以将精度小的数据类型强制转化成精度高的数据类型，但是在Java的对象的中，我们用父类（精度低的结构）的引用指向子类的对象（精度高的结构）的时候，不会发生强制转化<br>
<span style="white-space:pre"></span>但是确实，我们这是后的变量的类型是父类，大师指向确实是子类，用instanceof完全可以验证<br>
&nbsp;<span style="white-space:pre"> </span><br>
<span style="white-space:pre"></span>一个多态的经典的例子就是，我们可以将父类类型的引用作为函数的参数或者返回&#20540;，这时候，我们虽然我们结果是父类类型的引用变量，但是实际上我们指向的对象是动态的，是不同的<br>
<span style="white-space:pre"></span>也正因为我们的子类都重写了父类的方法，所以说我们完全可以用一段相同的代码实现不同的动作，这就是多态的核心本质<br>
<br>
<br>
<span style="white-space:pre"></span>但是有一个注意点，我们的父类的引用类型如果引用的是子类的对象的时候，我们只可以调用父类的已知的方法，不能直接调用出子类的方法（虽然这时候对象确实是子类）<br>
<span style="white-space:pre"></span>/*eg:<br>
<span style="white-space:pre"></span>public class class_in_java {<br>
<br>
<br>
<span style="white-space:pre"></span>public static void test(Object x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>x=(data)x;<br>
<span style="white-space:pre"></span>System.out.println(x);<br>
<span style="white-space:pre"></span>System.out.println('\n');<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public static Object test2(data x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return x;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public static void main(String[] args) {<br>
<span style="white-space:pre"></span>// TODO 自动生成的方法存根<br>
<span style="white-space:pre"></span>//data a=new data(1,2);<br>
<span style="white-space:pre"></span>//test(a);<br>
<span style="white-space:pre"></span>//System.out.println((data)test2(a));<br>
<span style="white-space:pre"></span>data a=new data(1,2);<br>
<span style="white-space:pre"></span>System.out.println(a);<br>
<span style="white-space:pre"></span>//a.change() &nbsp; 这里的调用就是错的<br>
<span style="white-space:pre"></span>a=new pdata(2,2);<br>
<span style="white-space:pre"></span>System.out.println(a);<br>
<span style="white-space:pre"></span>}<br>
<br>
<br>
}<br>
<br>
<br>
class data<br>
{<br>
<span style="white-space:pre"></span>protected int a;<br>
<span style="white-space:pre"></span>protected int b;<br>
<span style="white-space:pre"></span>public data(int x,int y)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>a=x;<br>
<span style="white-space:pre"></span>b=y;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public String toString()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return Integer.toString(a)&#43;Integer.toString(b);<br>
<span style="white-space:pre"></span>}<br>
}<br>
<br>
<br>
class pdata extends data<br>
{<br>
<span style="white-space:pre"></span>public pdata(int x,int y)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>super(x,y);<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>public void change()<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
<span style="white-space:pre"></span>syso - 输出<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
<br>
<br>
<span style="white-space:pre"></span>public String toString()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return Integer.toString(a*b);<br>
<span style="white-space:pre"></span>}<br>
}/*<span style="white-space:pre"> </span>因为这个时候我们编译器是只看父类的引用的，默认父类没有子类独有的方法<br>
<span style="white-space:pre"></span>一句话，我们的多态性中，父类只能调用被重写的方法，但是父类引用不能直接调用子类的独有的方法<br>
<span style="white-space:pre"></span>解决这种问题我们可以通过对象之间的强制类型转换来实现，但是我们必须要保证强制转换的两个对象的之间实在同一颗继承树上的，否则我们会造成运行时错误<br>
<br>
<br>
<span style="white-space:pre"></span>在继承的时候我们非常要注意OOP的可替换性，在面向对象的程序过程当中，我们必须要明确所有的包括equals()等方法都会有对称的性质，造成这种现象出现的原因是我们的错误的继承的滥用导致向下和向上转型的部队称，父类引用的instanceof识别子类，但是子类的instanceof不识别父类<br>
<span style="white-space:pre"></span>为了避免继承的麻烦的问题，我们可以使用组合类的思路来实现，没有了继承的向上向下转型造成的麻烦了<br>
<br>
<br>
<br>
<br>
<span style="white-space:pre"></span>接口：interface关键字引用就好<br>
<span style="white-space:pre"></span>Java的局限性显而易见，Java只支持单继承，一个类智能从一个父类继承而来，Java为了弥补这样的缺陷，使用了接口这个性质，我们可以用接口作为多各类的共同父类型，而且不会涉及代码共享<br>
<span style="white-space:pre"></span>接口定义：某些类承诺会实现一组方法（注意是方法），这样的话我们可以用类&#20284;的代码来处理这些类<br>
<br>
<br>
<span style="white-space:pre"></span>接口和类很类&#20284;，但是接口之表示方法的声明，不包括方法的实现，一个类承诺实现某一个接口，说明该类会实现接口中声明的那些方法，从而实现了多继承，结合多态的特性，我们完全可以通过上面描述的多态的特性去处理所有的实现了该接口的代码<br>
<span style="white-space:pre"></span>当我们不需要共享代码的时候，我们就用借口来实现相应的过程<br>
<br>
<br>
<span style="white-space:pre"></span>抽象方法：一个只具有声明但是没有实现的行为，当一个类实现一个抽象方法的<br>
<span style="white-space:pre"></span>接口的抽象的特性代表接口不能被实例化<br>
<br>
<br>
<br>
<br>
<span style="white-space:pre"></span>引用接口的时候我们需要用到implements关键字，一个类声明了实现了接口，那么我们在该类中就必须要实现接口的抽象方法，否则我们的编译就会不通过，多态也可以应用<br>
<br>
<br>
<span style="white-space:pre"></span>接口的优点：<br>
<span style="white-space:pre"></span>实现了某一个接口的一组类和具有能继承关系的一组类之剑一样都已明确的层次关系，接口充当了这些类的父类的角色，其实接口和上面的父类的堕胎一样，也可以指向子类（实现了接口的类）<br>
<span style="white-space:pre"></span>接口的作用本人有自己的理解，接口是对动作的抽象，有的一些类没有集成的关系，但是他们都可以由一些相同的动作（飞机，鸟），但是我们不能让飞机和鸟都从一个类里面继承下来（这样很怪异）<br>
<span style="white-space:pre"></span>所以说，对于不是一个继承树上的一些类来说，我们将的共同的行为进行抽象，我们只需要事项这些行为就可以啦，并且，我们还可以将接口的类型作为引用类型产生更广泛意义上的多态<br>
<span style="white-space:pre"></span>摘引网上的一段解释：<br>
<span style="white-space:pre"></span>你只要记得接口就是一个特殊的抽象类。实现它的类它必须对其所有方法进行重写。<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;接口是个比较抽象的东西。它一般来说可看作是1个功能扩展的类。比如你已经写好了1个类。而且也已经写好了所有的方法通俗点说就是实现了所有的功能。但现在如果又要多增加个功能。而又不想修改源代码的情况下。你就可以考虑实现接口。接口里写要增加的方法（功能）。让你这个类实现它。你就必须重写了这个方法。<br>
<span style="white-space:pre"></span>/*Madai的理解是：<br>
　　java接口的用处主要体现在下面几个方面：<br>
&nbsp;<br>
　　（1）通过接口可以实现不相关类的相同行为，而不需要了解对象所对应的类。<br>
&nbsp;<br>
　　（2）通过接口可以指明多个类需要实现的方法。<br>
&nbsp;<br>
　　（3）通过接口可以了解对象的交互界面，而不需了解对象所对应的类。<br>
&nbsp;<br>
&nbsp;<br>
　　Clkrst给出了更详细的解释：<br>
　　类描述了一个实体，包括实体的状态，也包括实体可能发出的动作。<br>
&nbsp;<br>
　　接口定义了一个实体可能发出的动作。但是只是定义了这些动作的原型，没有实现，也没有任何状态信息。<br>
&nbsp;<br>
　　所以接口有点象一个规范、一个协议，是一个抽象的概念；而类则是实现了这个协议，满足了这个规范的具体实体，是一个具体的概念。<br>
&nbsp;<br>
　　从程序角度，简单理解，接口就是函数声明，类就是函数实现。需要注意的是同一个声明可能有很多种实现。<br>
&nbsp;<br>
　　所以就你的问题：<br>
　　1、接口中定义类方法的原型，但是不能说是空方法，因为空方法的意思是有实现体，只不过实现体是空操作。实际上接口没有定义任何实现体。具体的实现体都是在实现接口的类中，接口只是定义了这些方法的调用方式。<br>
&nbsp;<br>
　　你当然也可以不用接口，直接在类里面写方法，但是如果你的一组方法需要在很多类里实现，那么把它们抽象出来，做成一个接口规范，不是更好么？<br>
&nbsp;<br>
　　2、一个类描述了一个实体，这个实体可能是一个复杂的对象，它的动作很多，如果把这些动作分类，用接口a定义其中的某一组动作，接口b定义其中的另外一组动作，这样的结构，比较清楚。<br>
&nbsp;<br>
　　这种方式具备了多继承的优点，避免了多继承的缺陷。实际上在历史上，接口在很大程度上，是为了解决多继承带来的种种问题而设计出来的。<br>
&nbsp;<br>
　　3、包中那些已定义的接口，怎么知道那里面定义了什么方法。<br>
&nbsp;<br>
　　接口里定义了方法的输入输出，这些都是协议，具体的实现都在每个类中。对于很多只需要抽象接口的地方，不需要知道具体的类是什么，只要这个类实现了这个接口就可以了。*/<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
3.抽象类：abstract关键字<br>
<span style="white-space:pre"></span>java中的特殊的类，这种类不能被实例化<br>
<span style="white-space:pre"></span>抽象类也可以实现摸一个接口，我们可以直接在抽象类中直接实现接口，使得我们之后的抽象类的子类都不用去频繁的都去声明实现一个接口，但是我们可以声明要实现，抽象类中不一定要去实现接口的方法，我们交给子类去完成<br>
<span style="white-space:pre"></span>因此在这里有一个编程的技巧就是，我们可以再抽象类中自己调用自己的方法，这是可以成功的，因为编辑器知道这些抽象的方法一定会被实现<br>
<br>
<br>
<span style="white-space:pre"></span>总结：<br>
<span style="white-space:pre"></span>接口可以实现的功能，抽象类都可以实现，而且抽象类还可以是实现其他的功能，但是并不能说抽象类比接口号，因为接口是允许多继承的，但是一个类只能继承一个类
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>0</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=52960705" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/woniu4500/article/details/42425915"  target="_blank" strategy="BlogCommendFromCsdn_0">使用PhoneGap开启移动开发之旅</a></h2>
                    <div class="summary">
                        移动市场风起云涌，只是好像和悲催的.net程序员隔绝。我们内心中一直期待的Windows Phone终究不能匹及windows, 随着时间的流逝，windows phone越来越像扶不起的阿斗，连微软...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/woniu4500" target="_blank" strategy="BlogCommendFromCsdn_0"><img src="http://avatar.csdn.net/C/1/F/2_woniu4500.jpg" alt="woniu4500" title="woniu4500"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/woniu4500">woniu4500</a></li>
                        <li class="time">2015-01-05 17:55</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>315</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/arcgis_all/article/details/8240371"  target="_blank" strategy="BlogCommendFromCsdn_1">【Q&amp;A】11月27日移动技术公开课《Mobile Runtime SDKs，开启移动开发的炫彩之旅》 Q&amp;A</a></h2>
                    <div class="summary">
                        1、资源下载
Q: ArcGIS移动产品的最新的开发包下载地址？
A: 移动产品开发包在esri官网和ArcGIS ResourceCenter上都可以下，推荐关注。
&#160;
Q:公开课PPT、演...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/arcgis_all" target="_blank" strategy="BlogCommendFromCsdn_1"><img src="http://avatar.csdn.net/E/7/B/2_arcgis_all.jpg" alt="arcgis_all" title="arcgis_all"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/arcgis_all">arcgis_all</a></li>
                        <li class="time">2012-11-30 08:55</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>804</span></li>
                    </ul>
                </dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/wanqmuzi/article/details/41086399"  target="_blank" strategy="BlogCommendFromCsdn_2">nodejs之旅－003－基础知识－全局作用域及全局函数</a></h2>
                    <div class="summary">
                        在Nodejs中，一个模块中定义的变量
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/wanqmuzi" target="_blank" strategy="BlogCommendFromCsdn_2"><img src="http://avatar.csdn.net/E/5/6/2_wanqmuzi.jpg" alt="wanqmuzi" title="wanqmuzi"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/wanqmuzi">wanqmuzi</a></li>
                        <li class="time">2014-11-13 20:10</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>862</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/shuaihj/article/details/41452987"  target="_blank" strategy="BlogCommendFromCsdn_3">Hadoop大象之旅003-配置CentOS操作系统</a></h2>
                    <div class="summary">
                        在VMWare虚拟机中安装好了CentOS操作系统，为了后面即将安装的Hadoop能够正常运行，还需要对CentOS操作系统进行相关的配置。
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/shuaihj" target="_blank" strategy="BlogCommendFromCsdn_3"><img src="http://avatar.csdn.net/B/D/1/2_shuaihj.jpg" alt="shuaihj" title="shuaihj"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/shuaihj">shuaihj</a></li>
                        <li class="time">2014-11-24 21:21</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>2518</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/musicvs/article/details/49328557"  target="_blank" strategy="BlogCommendFromCsdn_4">【笨木头Unity】入门之旅003：HelloWorld</a></h2>
                    <div class="summary">
                        有人跟我说：你特么的都写了3篇了，什么实际的东西都没有。（小若：特么的根本就没人评论你的教程！）这么说就不对了，教程只是配菜，吐槽才是主菜，你们觉得呢。&#160;&#160;笨木头花心贡献，啥？花心？不呢，是用心~转载...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/musicvs" target="_blank" strategy="BlogCommendFromCsdn_4"><img src="http://avatar.csdn.net/5/1/9/2_musicvs.jpg" alt="musicvs" title="musicvs"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/musicvs">musicvs</a></li>
                        <li class="time">2015-10-22 08:01</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>2543</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/cctv_hu/article/details/6114357"  target="_blank" strategy="BlogCommendFromCsdn_5">我的WCF之旅（5）：面向服务架构（SOA）和面向对象编程（OOP）的结合——如何实现Service Contract的重载（Overloading）</a></h2>
                    <div class="summary">
                        转帖地址：http://www.cnblogs.com/artech/archive/2007/03/19/679315.html&#160;对于.NET重载（Overloading）——定义不同参数列表的同名...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/CCTV_HU" target="_blank" strategy="BlogCommendFromCsdn_5"><img src="http://avatar.csdn.net/5/3/E/2_cctv_hu.jpg" alt="CCTV_HU" title="CCTV_HU"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/CCTV_HU">CCTV_HU</a></li>
                        <li class="time">2011-01-03 22:04</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>371</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/cctv_hu/article/details/6125801"  target="_blank" strategy="BlogCommendFromCsdn_6">我的WCF之旅（7）：面向服务架构（SOA）和面向对象编程（OOP）的结合——如何实现Service Contract的继承</a></h2>
                    <div class="summary">
                        转帖地址：http://www.cnblogs.com/artech/archive/2007/04/11/708510.html&#160;当今的IT领域，SOA已经成为了一个非常时髦的词，对SOA风靡的程度...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/CCTV_HU" target="_blank" strategy="BlogCommendFromCsdn_6"><img src="http://avatar.csdn.net/5/3/E/2_cctv_hu.jpg" alt="CCTV_HU" title="CCTV_HU"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/CCTV_HU">CCTV_HU</a></li>
                        <li class="time">2011-01-09 21:43</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>574</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/cctv_hu/article/details/6114389"  target="_blank" strategy="BlogCommendFromCsdn_7">我的WCF之旅（7）：面向服务架构（SOA）和面向对象编程（OOP）的结合——如何实现Service Contract的继承</a></h2>
                    <div class="summary">
                        转帖地址：http://www.cnblogs.com/artech/archive/2007/04/11/708510.html&#160;&#160;当今的IT领域，SOA已经成为了一个非常时髦的词，对SOA风靡的程...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/CCTV_HU" target="_blank" strategy="BlogCommendFromCsdn_7"><img src="http://avatar.csdn.net/5/3/E/2_cctv_hu.jpg" alt="CCTV_HU" title="CCTV_HU"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/CCTV_HU">CCTV_HU</a></li>
                        <li class="time">2011-01-03 22:20</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>356</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/guiying123456/article/details/71191441"  target="_blank" strategy="BlogCommendFromCsdn_8">移动端 Web 开发踩坑之旅</a></h2>
                    <div class="summary">
                        前言

最近在一个移动端的 Web 项目中踩了很多的坑，感觉有必要把它们记录下来，分享给即将踏入移动端 Web 开发大门的新人们。

一、从布局说起

移动端的整体布局一般来说可以分为上中下三个部分，...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/guiying123456" target="_blank" strategy="BlogCommendFromCsdn_8"><img src="http://avatar.csdn.net/3/4/E/2_guiying123456.jpg" alt="guiying123456" title="guiying123456"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/guiying123456">guiying123456</a></li>
                        <li class="time">2017-05-05 09:58</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>136</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/qq_33636736/9392745" target="_blank" strategy="BlogCommendFromCsdn_9"><img class="maxwidth" src="http://download.csdn.net/images/minetype/rar.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/qq_33636736/9392745" target="_blank" strategy="BlogCommendFromCsdn_9">移动开发应用（安卓）</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2016-01-06 14:40</li>
					  <li class="visited_num fileSize">474KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/qq_33636736/9392745">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">1</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

