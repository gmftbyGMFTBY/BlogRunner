
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/51113501"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '51113501';var commentscount = 0; var islock = false
        window.quickReplyflag = true;
        var totalFloor=0;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="1.void类型指针（随机类型指针）的抽象化应用
memcpy内存拷贝函数
void *memcpy(void *dest,const void *src,size)
因为memcpy函数是对内存进行处理的，起始地址是src指针对应的首地址，要拷贝的内容长度是size
拷贝的目的地是dest随机指针，在这里使用void指针的一大好处就是，我们无需考虑src首地址的具体数据结构
只需要拷贝" />
    <meta name="keywords" content="" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>C++自学摘要 - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">C++自学摘要</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年04月10日 16:20:51</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">168</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
1.void类型指针（随机类型指针）的抽象化应用<br>
memcpy内存拷贝函数<br>
void *memcpy(void *dest,const void *src,size)<br>
因为memcpy函数是对内存进行处理的，起始地址是src指针对应的首地址，要拷贝的内容长度是size<br>
拷贝的目的地是dest随机指针，在这里使用void指针的一大好处就是，我们无需考虑src首地址的具体数据结构<br>
只需要拷贝其内容就可以了，我们最后只需要对dest进行强制类型转换就可以输出我们拷贝的内容了<br>
<br>
<br>
2.用引用，可以使函数调用作为左&#20540;．引用表达式是一个左&#20540;表达式，因此它可以出现在形、实参数的任何一方。若一个函数返回了引用，那么该函数的调用也可以被赋&#20540;。一般，当返搜索回&#20540;不是本函数内定义的局部变量时就可以返回一个引用。在通常情况下，引用返回&#20540;只用在需要对函数的调用重新赋&#20540;的场合，也就是对函数的返回&#20540;重新赋&#20540;的时候。避免将局部作用域中变时的地址返回，就使用函数调用表达式全为左&#20540;来使用。&nbsp;<br>
<br>
<br>
3.复制构造函数的一些小细节<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
#include&quot;cstring&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class Person<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>Person(Person &amp;personbud);<br>
<span style="white-space:pre"></span>Person(char *k,int p);<br>
<span style="white-space:pre"></span>~Person();<br>
<span style="white-space:pre"></span>void show()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;name:&quot;&lt;&lt;name&lt;&lt;endl; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//cout&lt;&lt;p;输出完整的字符串，而cout&lt;&lt;*p;输出字符串首字符<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;age:&quot;&lt;&lt;age&lt;&lt;endl;&nbsp;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int age;<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;char *name;<br>
};<br>
<br>
<br>
Person::Person(Person &amp;person0)<br>
{<br>
<span style="white-space:pre"></span>age=person0.age;<br>
<span style="white-space:pre"></span>name=new char[strlen(person0.name)&#43;1];<br>
<span style="white-space:pre"></span>strcpy(name,person0.name);<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;对象成员赋&#20540;成功&quot;&lt;&lt;endl;<br>
}<br>
<br>
<br>
Person::Person(char *k,int p)<br>
{<br>
<span style="white-space:pre"></span>name=new char[strlen(k)&#43;1];<br>
<span style="white-space:pre"></span>strcpy(name,k);<br>
<span style="white-space:pre"></span>age=p;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;成功调用构造函数&quot;&lt;&lt;endl;<br>
}<br>
<br>
<br>
Person::~Person()<br>
{<br>
<span style="white-space:pre"></span>delete name;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;成功调用析构函数&quot;&lt;&lt;endl;&nbsp;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>Person person1(&quot;zhangsan&quot;,18),person2(person1);<br>
<span style="white-space:pre"></span>person1.show();<br>
<span style="white-space:pre"></span>person2.show();<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
<br>
<br>
4.关于公有函数作为对外接口的一点小认识<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class T<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>int get()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return x;<br>
<span style="white-space:pre"></span>};<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;T(int w):x(w){};<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;T(const T &amp;t)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>x=t.x;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;复制对象成功&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}&nbsp;<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int x;<br>
};<br>
<br>
<br>
void show(T &amp;t)<br>
{<br>
<span style="white-space:pre"></span>cout&lt;&lt;t.get()&lt;&lt;endl; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //此时如果输出t.x则报错，毕竟外部成员函数无法访问私有成员，但是可以用共有函数作为输出接口<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>T t(5);<br>
<span style="white-space:pre"></span>show(t);<br>
<span style="white-space:pre"></span>return 0;<br>
}&nbsp;<br>
<br>
<br>
<br>
<br>
<br>
<br>
5.<br>
在C&#43;&#43;的继承方式上来说，我们可以这么理解，继承方式确定之后，成员类型权限不增但是会减，相同的会保持<br>
<br>
<br>
<br>
<br>
6.<br>
我们一旦限制继承权限是私有继承的时候，原基类的所有成员在派生类中全部视为私有成员<br>
也就是说我们可以通过派生类中的公有成员函数来对其进行访问，但是我们在派生类外进行访问则是非法的<br>
eg：obj.setx()//setx是私有继承基类中的成员变量，这种写法是错误的<br>
&nbsp; &nbsp; &nbsp;obj.set()//set(){return setx()}//这是可以的<br>
<br>
<br>
7.私有类成员和保护类成员的主要区别在于<br>
私有类成员无论是在基类还是在派生类中属性都是私有的，都是不能被基类和派生类直接访问的，但是保护类成员的含义就是<br>
<br>
<br>
<br>
<br>
8.在继承中，私有成员无论是何种继承方式均变成不可访问，我们获取不可访问的变量的信息唯一的方法就是通过基类中的公有或者受保护类成员作为接口间接输出或者间接修改他的&#20540;（是可以修改的）。但是受保护成员在派生类中对外而言有私有成员不可访问的性质，但是在对内而言受保护成员在派生类中可以被访问。（这是核心的区别）<br>
<br>
<br>
<br>
<br>
9.举例，基类中的基类私有变量虽然在派生类中我们是无法直接访问的，但是我们可以通过派生类中的公有成员函数调用基类中的公有成员函数（虽然此时在派生类中此共有函数如果是私有继承的话是私有变量，但是公有成员函数可以调用私有成员，所以，是成立的），通过基类的公有成员函数实现对此时在派生类中不可访问的变量进行个访问和修改。<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class math<br>
{<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;int x;<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;math()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>x=0;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;构造函数开始调用&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}&nbsp;<br>
<span style="white-space:pre"></span>~math()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;析构函数开始调用&quot;&lt;&lt;endl;&nbsp;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void setx(int y)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>x=y;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void showx()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;x&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}&nbsp;<br>
<span style="white-space:pre"></span>int getx()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return x;<br>
<span style="white-space:pre"></span>}<br>
};<br>
<br>
<br>
class m:private math<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>m()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;派生类默认构造函数开始调用&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>m(int w)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>set(w);<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;派生类构造函数开始调用&quot;&lt;&lt;endl;&nbsp;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void show()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;getx()&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void set(int a)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>setx(a);<br>
<span style="white-space:pre"></span>}<br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>m h;<br>
<span style="white-space:pre"></span>h.show();&nbsp;<br>
<span style="white-space:pre"></span>m z(10);<br>
<span style="white-space:pre"></span>z.show();<br>
<span style="white-space:pre"></span>h.set(20);<br>
<span style="white-space:pre"></span>h.show();&nbsp;<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
<br>
<br>
10.<br>
记住派生类和基类的构造函数和析构函数调用的顺序<br>
开始的时候：先调用基类的构造函数在调用派生类的构造函数<br>
结束的时候：先调用派生类的析构函数在调用基类的构造函数<br>
<br>
<br>
<br>
<br>
11.<br>
虚函数和虚析构函数的意义<br>
1.为什么基类的析构函数是虚函数？<br>
<br>
<br>
　　在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。<br>
&nbsp; &nbsp; &nbsp;（因为此时使用基类指针声明派生类对象，所以析构的时候，只析构基类的类型，而构造的派生类并不析构）<br>
　　下面转自网络：源地址 http://blog.sina.com.cn/s/blog_7c773cc50100y9hz.html<br>
<br>
<br>
　　a.第一段代码<br>
<br>
<br>
　　<br>
<br>
<br>
复制代码<br>
复制代码<br>
#include&lt;iostream&gt;<br>
using namespace std;<br>
class ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxBase() {};<br>
&nbsp; &nbsp; ~ClxBase() {cout &lt;&lt; &quot;Output from the destructor of class ClxBase!&quot; &lt;&lt; endl;};<br>
<br>
<br>
&nbsp; &nbsp; void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxBase!&quot; &lt;&lt; endl; };<br>
};<br>
<br>
<br>
class ClxDerived : public ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxDerived() {};<br>
&nbsp; &nbsp; ~ClxDerived() { cout &lt;&lt; &quot;Output from the destructor of class ClxDerived!&quot; &lt;&lt; endl; };<br>
<br>
<br>
&nbsp; &nbsp; void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxDerived!&quot; &lt;&lt; endl; };<br>
};<br>
&nbsp; int &nbsp; main(){ &nbsp;<br>
&nbsp; ClxDerived *p = &nbsp;new ClxDerived;<br>
&nbsp; p-&gt;DoSomething();<br>
&nbsp; delete p;<br>
&nbsp; return 0;<br>
&nbsp; }<br>
复制代码<br>
复制代码<br>
&nbsp;<br>
<br>
<br>
　　运行结果：<br>
<br>
<br>
　　Do something in class ClxDerived! &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
<br>
<br>
　　Output from the destructor of class ClxDerived!<br>
<br>
<br>
　　Output from the destructor of class ClxBase! &nbsp;<br>
<br>
<br>
　　这段代码中基类的析构函数不是虚函数,在main函数中用继承类的指针去操作继承类的成员,释放指针P的过程是:先释放继承类的资源,再释放基类资源.&nbsp;<br>
<br>
<br>
&nbsp;<br>
<br>
<br>
　　b.第二段代码<br>
<br>
<br>
　　<br>
<br>
<br>
复制代码<br>
复制代码<br>
#include&lt;iostream&gt;<br>
using namespace std;<br>
class ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxBase() {};<br>
&nbsp; &nbsp; ~ClxBase() {cout &lt;&lt; &quot;Output from the destructor of class ClxBase!&quot; &lt;&lt; endl;};<br>
<br>
<br>
&nbsp; &nbsp; void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxBase!&quot; &lt;&lt; endl; };<br>
};<br>
<br>
<br>
class ClxDerived : public ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxDerived() {};<br>
&nbsp; &nbsp; ~ClxDerived() { cout &lt;&lt; &quot;Output from the destructor of class ClxDerived!&quot; &lt;&lt; endl; };<br>
<br>
<br>
&nbsp; &nbsp; void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxDerived!&quot; &lt;&lt; endl; }<br>
};<br>
&nbsp; int &nbsp; main(){ &nbsp;<br>
&nbsp; ClxBase *p = &nbsp;new ClxDerived;<br>
&nbsp; p-&gt;DoSomething();<br>
&nbsp; delete p;<br>
&nbsp; return 0;<br>
&nbsp; }&nbsp;<br>
复制代码<br>
复制代码<br>
&nbsp;<br>
<br>
<br>
　　输出结果：<br>
<br>
<br>
　　Do something in class ClxBase!<br>
　　Output from the destructor of class ClxBase!<br>
<br>
<br>
&nbsp; &nbsp; 这段代码中基类的析构函数同样不是虚函数,不同的是在main函数中用基类的指针去操作继承类的成员,释放指针P的过程是:只是释放了基类的资源,而没有调用继承类的析构函数.调用　　dosomething()函数执行的也是基类定义的函数.<br>
<br>
<br>
&nbsp; &nbsp; 一般情况下,这样的删除只能够删除基类对象,而不能删除子类对象,形成了删除一半形象,造成内存泄漏.<br>
<br>
<br>
&nbsp; &nbsp; 在公有继承中,基类对派生类及其对象的操作,只能影响到那些从基类继承下来的成员.如果想要用基类对非继承成员进行操作,则要把基类的这个函数定义为虚函数.<br>
<br>
<br>
&nbsp; &nbsp; ********析构函数自然也应该如此:如果它想析构子类中的*重新定义或新的成员及对象*,当然也应该声明为虚的.&nbsp;<br>
<br>
<br>
<br>
<br>
<br>
<br>
　　c.第三段代码：<br>
<br>
<br>
　　<br>
<br>
<br>
复制代码<br>
复制代码<br>
#include&lt;iostream&gt;<br>
using namespace std;<br>
class ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxBase() {};<br>
&nbsp; &nbsp; virtual ~ClxBase() {cout &lt;&lt; &quot;Output from the destructor of class ClxBase!&quot; &lt;&lt; endl;};<br>
&nbsp; &nbsp; virtual void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxBase!&quot; &lt;&lt; endl; };<br>
};<br>
<br>
<br>
class ClxDerived : public ClxBase{<br>
public:<br>
&nbsp; &nbsp; ClxDerived() {};<br>
&nbsp; &nbsp; ~ClxDerived() { cout &lt;&lt; &quot;Output from the destructor of class ClxDerived!&quot; &lt;&lt; endl; };<br>
&nbsp; &nbsp; void DoSomething() { cout &lt;&lt; &quot;Do something in class ClxDerived!&quot; &lt;&lt; endl; };<br>
};<br>
<br>
<br>
&nbsp; int &nbsp; main(){ &nbsp;<br>
&nbsp; ClxBase *p = &nbsp;new ClxDerived;<br>
&nbsp; p-&gt;DoSomething();<br>
&nbsp; delete p;<br>
&nbsp; return 0;<br>
&nbsp; } &nbsp;<br>
复制代码<br>
复制代码<br>
&nbsp;<br>
<br>
<br>
　　运行结果：<br>
<br>
<br>
　　Do something in class ClxDerived!<br>
　　Output from the destructor of class ClxDerived!<br>
　　Output from the destructor of class ClxBase!<br>
<br>
<br>
&nbsp; &nbsp; 这段代码中基类的析构函数被定义为虚函数,在main函数中用基类的指针去操作继承类的成员,释放指针P的过程是:只是释放了继承类的资源,再调用基类的析构函数.调用dosomething()函数执行的也是继承类定义的函数. &nbsp;<br>
<br>
<br>
&nbsp; &nbsp; 如果不需要基类对派生类及对象进行操作,则不能定义虚函数,因为这样会增加内存开销.当类里面有定义虚函数的时候,编译器会给类添加一个虚函数表,里面来存放虚函数指针,这样就会增加类的存储空间.所以,只有当一个类被用来作为基类的时候,才把析构函数写成虚函数.<br>
<br>
<br>
<br>
<br>
<br>
<br>
C&#43;&#43;编程语言是一款应用广泛，支持多种程序设计的计算机编程语言。我们今天就会为大家详细介绍其中C&#43;&#43;多态性的一些基本知识，以方便大家在学习过程中对此能够有一个充分的掌握。<br>
　　多态性可以简单地概括为“一个接口，多种方法”，程序在运行时才决定调用的函数，它是面向对象编程领域的核心概念。多态(polymorphism)，字面意思多种形状。<br>
　　C&#43;&#43;多态性是通过虚函数来实现的，虚函数允许子类重新定义成员函数，而子类重新定义父类的做法称为覆盖(override)，或者称为重写。（这里我觉得要补充，重写的话可以有两种，直接重写成员函数和重写虚函数，只有重写了虚函数的才能算作是体现了C&#43;&#43;多态性）而重载则是允许有多个同名的函数，而这些函数的参数列表不同，允许参数个数不同，参数类型不同，或者两者都不同。编译器会根据这些函数的不同列表，将同名的函数的名称做修饰，从而生成一些不同名称的预处理函数，来实现同名函数调用时的重载问题。但这并没有体现多态性。<br>
&nbsp; &nbsp; &nbsp;***************重载和多态有区别，前者是同时存在多种状态，应用时选择一个，后者是在应用时覆盖，屏蔽原有的**********<br>
　　多态与非多态的实质区别就是函数地址是早绑定还是晚绑定。如果函数的调用，在编译器编译期间就可以确定函数的调用地址，并生产代码，是静态的，就是说地址是早绑定的。而如果函数调用的地址不能在编译器期间确定，需要在运行时才确定，这就属于晚绑定。<br>
　　那么多态的作用是什么呢，封装可以使得代码模块化，继承可以扩展已存在的代码，他们的目的都是为了代码重用。而多态的目的则是为了接口重用。也就是说，不论传递过来的究竟是那个类的对象，函数都能够通过同一个接口调用到适应各自对象的实现方法。<br>
　　最常见的用法就是声明基类的指针，利用该指针指向任意一个子类对象，调用相应的虚函数，可以根据指向的子类的不同而实现不同的方法。如果没有使用虚函数的话，即没有利用C&#43;&#43;多态性，则利用基类指针调用相应的函数的时候，将总被限制在基类函数本身，而无法调用到子类中被重写过的函数。因为没有多态性，函数调用的地址将是一定的，而固定的地址将始终调用到同一个函数，这就无法实现一个接口，多种方法的目的了。<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
13。类内函数调用数据成员合法<br>
<br>
<br>
<br>
<br>
<br>
<br>
14.对于等于运算符的重载，有些许注意要点<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class math<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>void show()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;*p&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>math()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>p=new int(0);<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;默认构造函数调用成功&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>math(int x)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>p=new int;<br>
<span style="white-space:pre"></span>*p=x;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;构造函数调用成功&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>~math()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>delete p;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;析构函数调用成功&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>math&amp; operator=(math k)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>*p=*k.p;&nbsp;<br>
<span style="white-space:pre"></span>return *this;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int *p;<br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>math x,y(1),z(4);<br>
<span style="white-space:pre"></span>x.show();<br>
<span style="white-space:pre"></span>x=y;y<br>
<span style="white-space:pre"></span>x.show();<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
<br>
<br>
&nbsp; &nbsp; 如果使用引用接收引用返回&#20540;，则返回的引用必须具有较长的生存期，不可以引用局部变量。<br>
&nbsp; &nbsp; 如果使用引用接收&#20540;返回&#20540;，则引用了一个临时对象，该对象的生存期将延长到和这个引用相同<br>
C:\Users\asuspc\AppData\Roaming\360se6\Application\360se.exe &nbsp;http://blog.csdn.net/duanruibupt/article/details/6881018 &nbsp; &nbsp; &nbsp;/////该网址成功解释了引用的区别<br>
<br>
<br>
<br>
<br>
15.<br>
C&#43;&#43;的流插入运算符“&lt;&lt;”和流提取运算符“&gt;&gt;”是C&#43;&#43;在类库中提供的，所有C&#43;&#43;编译系统都在类库中提供输入流类istream和输出流类ostream。cin和cout分别是istream类和ostream类的对象。在类库提供的头文件中已经对“&lt;&lt;”和“&gt;&gt;”进行了重载，使之作为流插入运算符和流提取运算符，能用来输出和输入C&#43;&#43;标准类型的数据。因此，凡是用“cout&lt;&lt;”和“cin&gt;&gt;”对标准类型数据进行输入输出的，都要用#include 把头文件包含到本程序文件中。<br>
<br>
<br>
用户自己定义的类型的数据，是不能直接用“&lt;&lt;”和“&gt;&gt;”来输出和输入的。如果想用它们输出和输入自己声明的类型的数据，必须对它们重载。<br>
<br>
<br>
对“&lt;&lt;”和“&gt;&gt;”重载的函数形式如下：<br>
&nbsp; &nbsp; istream &amp; operator &gt;&gt; (istream &amp;, 自定义类 &amp;);<br>
&nbsp; &nbsp; ostream &amp; operator &lt;&lt; (ostream &amp;, 自定义类 &amp;);<br>
即重载运算符“&gt;&gt;”的函数的第一个参数和函数的类型都必须是istream&amp;类型，第二个参数是要进行输入操作的类。重载“&lt;&lt;”的函数的第一个参数和函数的类型都必须是ostream&amp;类型，第二个参数是要进行输出操作的类。因此，只能将重载“&gt;&gt;”和“&lt;&lt;”的函数作为友元函数或普通的函数，而不能将它们定义为成员函数。<br>
<br>
<br>
16.<br>
请思考，return &nbsp;output的作用是什么？回答是能*连续向输出流插入信息*。output是ostream类的对象，它是实参cout的引用，也就是cout通过传送地址给output，使它们二者共享同一段存储单元，或者说output是cout的别名。因此，return output就是return cout，将输出流cout的现状返回，即保留输出流的现状。<br>
<br>
<br>
<br>
<br>
还有一点要说明，在本程序中，在Complex类中定义了运算符“&lt;&lt;”重载函数为友元函数，因此只有在输出Complex类对象时才能使用重载的运算符，对其他类型的对象是无效的。如<br>
&nbsp; &nbsp; cout&lt;&lt;time1; &nbsp;//time1是Time类对象，不能使用用于Complex类的重载运算符<br>
<br>
<br>
17.<br>
可以看到，在运算符重载中使用引用(reference)的重要性。利用引用作为函数的形参可以在调用函数的过程中不是用传递&#20540;的方式进行虚实结合，而是通过传址方式使形参成为实参的别名，因此不生成临时变量(实参的副本)，减少了时间和空间的开销。此外，如果重载函数的返回&#20540;是对象的引用时，返回的不是常量，而是引用所代表的对象，它可以出现在赋&#20540;号的左侧而成为左&#20540;(left value)，可以被赋&#20540;或参与其他操作(如保留cout流的当前&#20540;以便能连续使用“&lt;&lt;”输出)。但使用引用时要特别小心，因为修改了引用就等于修改了它所代表的对象。<br>
<br>
<br>
<br>
<br>
18.<br>
在进行类型转换的重载运算符的时候，我们不要在行参中用引用，因为一旦要对其他基本的数据类型转换为类的类型的时候，引用的对象有可能是基本的数据类型，但是引用代表的含义是对类进行取地址，但是此时数据类型不是类，就会报错<br>
<br>
<br>
<br>
<br>
19.<br>
多参数模板的返回&#20540;可能会出出现结果错误，但不是程序引起的，而是返回&#20540;的类型决定的<br>
<br>
<br>
<br>
<br>
20.<br>
模板必须是要有顺序的，是按顺序排列的<br>
争取代码示例：<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
template&lt;class T,int size&gt;<br>
<br>
<br>
void sort(T a[size])<br>
{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>int a[]={0,1,2,3,4,5,6,7,8,9};<br>
<span style="white-space:pre"></span>sort&lt;int ,10&gt;(a); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //核心<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
错误代码示例：<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
template&lt;class T,int size&gt;<br>
<br>
<br>
void sort(T a[size])<br>
{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>int a[]={0,1,2,3,4,5,6,7,8,9};<br>
<span style="white-space:pre"></span>sort&lt;10,int&gt;(a); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //核心<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
应用引用的方式就可以不用显式的指定参数了<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
template&lt;class T,int size&gt;<br>
<br>
<br>
void sort(T (&amp;a)[size])&nbsp;<br>
{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>int a[]={0,1,2,3,4,5,6,7,8,9};<br>
<span style="white-space:pre"></span>sort(a);<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
21.<br>
模板类型基本数据类型或者自己定义的类<br>
<br>
<br>
22.<br>
string类型变量在C&#43;&#43;的#include&quot;string&quot;头文件里面<br>
<br>
<br>
23.<br>
用模板类实现栈<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
template&lt;class T&gt;<br>
<br>
<br>
class stack<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>stack()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top=0;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>bool stackempty()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return top==0;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>bool stackfull()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return top==99;&nbsp;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void stackpush(T a)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top&#43;&#43;;<br>
<span style="white-space:pre"></span>data[top]=a;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>T stackpop()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top--;<br>
<span style="white-space:pre"></span>return data[top&#43;1];<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int top;<br>
<span style="white-space:pre"></span>T data[100];<br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>stack&lt;int&gt; int_stack;<br>
<span style="white-space:pre"></span>stack&lt;char&gt; char_stack;<br>
<span style="white-space:pre"></span>for(int i=1;i&lt;=10;i&#43;&#43;)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>int_stack.stackpush(i);<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>while(!int_stack.stackempty())<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;int_stack.stackpop()&lt;&lt;' ';<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>cout&lt;&lt;endl;<br>
<span style="white-space:pre"></span>char_stack.stackpush('A');<br>
<span style="white-space:pre"></span>char_stack.stackpush('B');<br>
<span style="white-space:pre"></span>char_stack.stackpush('C');<br>
<span style="white-space:pre"></span>while(!char_stack.stackempty())<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;char_stack.stackpop()&lt;&lt;' ';<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;End&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>return 0;<br>
}&nbsp;<br>
<br>
<br>
<br>
<br>
23<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
template&lt;class T,size_t size&gt;<br>
<br>
<br>
class stack<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>stack()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top=0;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>bool stackempty()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return top==0;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>bool stackfull()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>return top==size;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>T stackpop()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top--;<br>
<span style="white-space:pre"></span>return data[top&#43;1];<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void stackpush(T a)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>top&#43;&#43;;<br>
<span style="white-space:pre"></span>return data[top]=a;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;T data[size];<br>
<span style="white-space:pre"></span>size_t top;&nbsp;<br>
};<br>
<br>
<br>
template&lt;class T,size_t size,template&lt;class U,size_t len&gt; class stack&gt;<br>
<br>
<br>
class container<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;void show()<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;{<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;<span style="white-space:pre"> </span>cout&lt;&lt;kstack.stackpop()&lt;&lt;endl;<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>&nbsp; &nbsp;stack&lt;T,size&gt; kstack;<span style="white-space:pre">
</span><br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>container&lt;int,10,stack&gt; contain;<br>
<span style="white-space:pre"></span>contain.show();&nbsp;<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
以上是在container模板类中声明了一个固定模板参数表的私有成员的模板类成员，并用前面定义的stack来替换contanier中的模板参数类，实现对container的实例化<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
24.<br>
组成的库来说提供了更好的代码重用机会。在C&#43;&#43;标准中，STL被组织为下面的13个头文件：&lt;algorithm&gt;、&lt;deque&gt;、&lt;functional&gt;、&lt;iterator&gt;、&lt;vector&gt;、&lt;list&gt;、&lt;map&gt;、<br>
<br>
<br>
&lt;memory&gt;、&lt;numeric&gt;、&lt;queue&gt;、&lt;set&gt;、&lt;stack&gt;和&lt;utility&gt;。<br>
<br>
<br>
<br>
<br>
&lt;algorithm&gt;是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<br>
<br>
<br>
&nbsp;<br>
<br>
<br>
&lt;numeric&gt;体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<br>
<br>
<br>
&nbsp;<br>
<br>
<br>
&lt;functional&gt;中则定义了一些模板类，用以声明函数对象。&nbsp;<br>
<br>
<br>
25.<br>
50条忠告：（其中有几条觉得写的不够贴切，所以删了，发了余下的部分）<br>
<br>
<br>
&nbsp;<br>
<br>
<br>
1.把C&#43;&#43;当成一门新的语言学习；<br>
<br>
<br>
2.看《Thinking In C&#43;&#43;》，不要看《C&#43;&#43;变成死相》；<br>
<br>
<br>
3.看《The C&#43;&#43; Programming Language》和《Inside The C&#43;&#43; Object Model》,不要因为他们很难而我们自己是初学者所以就不看；<br>
<br>
<br>
4.不要被VC、BCB、BC、MC、TC等词汇所迷惑——他们都是集成开发环境，而我们要学的是一门语言；<br>
<br>
<br>
5.不要放过任何一个看上去很简单的小编程问题——他们往往并不那么简单，或者可以引伸出很多知识点；<br>
<br>
<br>
6.会用Visual C&#43;&#43;，并不说明你会C&#43;&#43;；<br>
<br>
<br>
7.学class并不难，template、STL、generic programming也不过如此——难的是长期坚持实践和不遗余力的博览群书；<br>
<br>
<br>
8.如果不是天才的话，想学编程就不要想玩游戏——你以为你做到了，其实你的C&#43;&#43;水平并没有和你通关的能力一起变高——其实可以时刻记住：学C&#43;&#43;是为了编游戏的；<br>
<br>
<br>
9.看Visual C&#43;&#43;的书，是学不了C&#43;&#43;语言的； &nbsp;<br>
<br>
<br>
16.把时髦的技术挂在嘴边，还不如把过时的技术记在心里；<br>
<br>
<br>
18.学习编程最好的方法之一就是阅读源代码；<br>
<br>
<br>
19.在任何时刻都不要认为自己手中的书已经足够了；<br>
<br>
<br>
20.请阅读《The Standard C&#43;&#43; Bible》(中文版：标准C&#43;&#43;宝典)，掌握C&#43;&#43;标准；<br>
<br>
<br>
21.看得懂的书，请仔细看；看不懂的书，请硬着头皮看；<br>
<br>
<br>
22.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍；<br>
<br>
<br>
23.请看《Effective C&#43;&#43;》和《More Effective C&#43;&#43;》以及《Exceptional C&#43;&#43;》；<br>
<br>
<br>
24.不要停留在集成开发环境的摇篮上，要学会控制集成开发环境，还要学会用命令行方式处理程序；<br>
<br>
<br>
25.和别人一起讨论有意义的C&#43;&#43;知识点，而不是争吵XX行不行或者YY与ZZ哪个好；<br>
<br>
<br>
26.请看《程序设计实践》，并严&#26684;的按照其要求去做；<br>
<br>
<br>
27.不要因为C和C&#43;&#43;中有一些语法和关键字看上去相同，就认为它们的意义和作用完全一样；<br>
<br>
<br>
28.C&#43;&#43;绝不是所谓的C的“扩充”——如果C&#43;&#43;一开始就起名叫Z语言，你一定不会把C和Z语言联系得那么紧密；<br>
<br>
<br>
29.请不要认为学过XX语言再改学C&#43;&#43;会有什么问题——你只不过又在学一门全新的语言而已；<br>
<br>
<br>
30.读完了《Inside The C&#43;&#43; Object Model》以后再来认定自己是不是已经学会了C&#43;&#43;；<br>
<br>
<br>
31.学习编程的秘诀是：编程，编程，再编程；<br>
<br>
<br>
32.请留意下列书籍：《C&#43;&#43;面向对象高效编程（C&#43;&#43; Effective Object-Oriented Software Construction）》《面向对象软件构造(Object-Oriented Software Construction)》《设计模式（Design Patterns）》《The Art of Computer Programming》；&nbsp;<br>
<br>
<br>
34.请把书上的程序例子亲手输入到电脑上实践，即使配套光盘中有源代码；<br>
<br>
<br>
35.把在书中看到的有意义的例子扩充；<br>
<br>
<br>
36.请重视C&#43;&#43;中的异常处理技术，并将其切实的运用到自己的程序中；<br>
<br>
<br>
37.经常回顾自己以前写过的程序，并尝试重写，把自己学到的新知识运用进去；<br>
<br>
<br>
38.不要漏掉书中任何一个练习题——请全部做完并记录下解题思路；<br>
<br>
<br>
39.C&#43;&#43;语言和C&#43;&#43;的集成开发环境要同时学习和掌握；<br>
<br>
<br>
40.既然决定了学C&#43;&#43;,就请坚持学下去，因为学习程序设计语言的目的是掌握程序设计技术，而程序设计技术是跨语言的；<br>
<br>
<br>
41.就让C&#43;&#43;语言的各种平台和开发环境去激烈的竞争吧，我们要以学习C&#43;&#43;语言本身为主；<br>
<br>
<br>
42.当你写C&#43;&#43;程序写到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个设计的完整性，然后分析自己的错误并重新设计和编写（参见43）；<br>
<br>
<br>
43.别心急，设计C&#43;&#43;的class确实不容易；自己程序中的class和自己的class设计水平是在不断的编程实践中完善和发展的；<br>
<br>
<br>
44.决不要因为程序“很小”就不遵循某些你不熟练的规则——好习惯是培养出来的，而不是一次记住的；<br>
<br>
<br>
45.每学到一个C&#43;&#43;难点的时候，尝试着对别人讲解这个知识点并让他理解——你能讲清楚才说明你真的理解了；<br>
<br>
<br>
46.记录下在和别人交流时发现的自己忽视或不理解的知识点；<br>
<br>
<br>
47.请不断的对自己写的程序提出更高的要求,哪怕你的程序版本号会变成Version 100.XX；<br>
<br>
<br>
48.保存好你写过的所有的程序——那是你最好的积累之一；<br>
<br>
<br>
49.请不要做浮躁的人；<br>
<br>
<br>
50.请热爱C&#43;&#43;!<br>
<br>
<br>
第四部分：<br>
<br>
<br>
C&#43;&#43;头文件一览&nbsp;<br>
C、传统 C&#43;&#43;<br>
<br>
<br>
#include &lt;assert.h&gt;　　　　设定插入点<br>
#include &lt;ctype.h&gt;　　　　字符处理<br>
#include &lt;errno.h&gt;　　　　 定义错误码<br>
#include &lt;float.h&gt;　　　　浮点数处理<br>
#include &lt;fstream.h&gt;　　　文件输入／输出<br>
#include &lt;iomanip.h&gt;　　　 参数化输入／输出<br>
#include &lt;iostream.h&gt;　　　数据流输入／输出<br>
#include &lt;limits.h&gt;　　　　定义各种数据类型最&#20540;常量<br>
#include &lt;locale.h&gt;　　　　定义本地化函数<br>
#include &lt;math.h&gt;　　　　　定义数学函数<br>
#include &lt;stdio.h&gt;　　　　定义输入／输出函数<br>
#include &lt;stdlib.h&gt;　　　　定义杂项函数及内存分配函数<br>
#include &lt;string.h&gt;　　　　字符串处理<br>
#include &lt;strstrea.h&gt;　　　基于数组的输入／输出<br>
#include &lt;time.h&gt;　　　　　定义关于时间的函数<br>
#include &lt;wchar.h&gt;　　　　 宽字符处理及输入／输出<br>
#include &lt;wctype.h&gt;　　　　宽字符分类<br>
<br>
<br>
标准 C&#43;&#43;　<br>
<br>
<br>
#include &lt;algorithm&gt;　　　 &nbsp;通用算法<br>
#include &lt;bitset&gt;　　　　　 位集容器<br>
#include &lt;cctype&gt;<br>
#include &lt;cerrno&gt;<br>
#include &lt;clocale&gt;<br>
#include &lt;cmath&gt;<br>
#include &lt;complex&gt;　　　　 复数类<br>
#include &lt;cstdio&gt;<br>
#include &lt;cstdlib&gt;<br>
#include &lt;cstring&gt;<br>
#include &lt;ctime&gt;<br>
#include &lt;deque&gt;　　　　　 双端队列容器<br>
#include &lt;exception&gt;　　　 异常处理类<br>
#include &lt;fstream&gt;<br>
#include &lt;functional&gt;　　　 定义运算函数（代替运算符）<br>
#include &lt;limits&gt;<br>
#include &lt;list&gt;　　　　　　 线性列表容器<br>
#include &lt;map&gt;　　　　　　 映射容器<br>
#include &lt;iomanip&gt;<br>
#include &lt;ios&gt;　　　　　　基本输入／输出支持<br>
#include &lt;iosfwd&gt;　　　　输入／输出系统使用的前置声明<br>
#include &lt;iostream&gt;<br>
#include &lt;istream&gt;　　　　 基本输入流<br>
#include &lt;ostream&gt;　　　　 基本输出流<br>
#include &lt;queue&gt;　　　　　 &nbsp;队列容器<br>
#include &lt;set&gt;　　　　　　 集合容器<br>
#include &lt;sstream&gt;　　　　 基于字符串的流<br>
#include &lt;stack&gt;　　　　　 堆栈容器　　　　<br>
#include &lt;stdexcept&gt;　　　 标准异常类<br>
#include &lt;streambuf&gt;　　　底层输入／输出支持<br>
#include &lt;string&gt;　　　　　字符串类<br>
#include &lt;utility&gt;　　　　 通用模板类<br>
#include &lt;vector&gt;　　　　 动态数组容器<br>
#include &lt;cwchar&gt;<br>
#include &lt;cwctype&gt;<br>
<br>
<br>
C99 增加<br>
<br>
<br>
#include &lt;complex.h&gt;　　复数处理<br>
#include &lt;fenv.h&gt;　　　　浮点环境<br>
#include &lt;inttypes.h&gt;　　整数&#26684;式转换<br>
#include &lt;stdbool.h&gt;　　 布尔环境<br>
#include &lt;stdint.h&gt;　　　整型环境<br>
#include &lt;tgmath.h&gt;　　通用类型数学宏<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
25.流式输入输出常用的函数<br>
&nbsp; &nbsp; &nbsp;cout.put()将单个字符插入到缓存中，可以实现连续的插入<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>cout.put(65).put(78).put(45)&lt;&lt;endl;<br>
<span style="white-space:pre"></span>return 0;<br>
}&nbsp;<br>
&nbsp; &nbsp; &nbsp;cout.write(字符串首地址,输出长度)将字符串整体输出或者输出字符串的部分内容<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>char a[]=&quot;lantian&quot;;<br>
<span style="white-space:pre"></span>cout.write(a,7)&lt;&lt;endl;<br>
<span style="white-space:pre"></span>cout.write(a&#43;1,6);<br>
<span style="white-space:pre"></span>return 0;<br>
}&nbsp;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
26.C&#43;&#43;缓存和流式输入输出<br>
实际上，在内存中为每一个数据流开辟一个内存缓冲区，用来存放流中的数据。当用cout和插入运算符“&lt;&lt;”向显示器输出数据时，先将这些数据送到程序中的输出缓冲区保存，直到缓冲区满了或遇到endl，就将缓冲区中的全部数据送到显示器显示出来。在输入时，从键盘输入的数据先放在键盘缓冲区中，当按回车键时，键盘缓冲区中的数据输入到程序中的输入缓冲区，形成cin流，然后用提取运算符“&gt;&gt;”从输入缓冲区中提取数据送给程序中的有关变量。总之，流是与内存缓冲区相对应的，或者说，缓冲区中的数据就是流。<br>
<br>
<br>
<br>
<br>
<br>
<br>
27.文件读取和写入实例<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
#include&quot;cstdlib&quot;<br>
#include&quot;fstream&quot;<br>
using namespace std;<br>
<br>
<br>
struct node<br>
{<br>
<span style="white-space:pre"></span>char name[20];<br>
<span style="white-space:pre"></span>char sex[10];<br>
<span style="white-space:pre"></span>int age;<br>
};<br>
<br>
<br>
typedef struct node p;<br>
<br>
<br>
p student[3]={&quot;lantian&quot;,&quot;man&quot;,19,&quot;baba&quot;,&quot;man&quot;,45,&quot;mama&quot;,&quot;woman&quot;,46};<br>
p stud;<br>
<br>
<br>
ostream&amp; operator&lt;&lt;(ostream&amp; out,p stu)<br>
{<br>
<span style="white-space:pre"></span>out&lt;&lt;stu.name&lt;&lt;endl;<br>
<span style="white-space:pre"></span>out&lt;&lt;stu.sex&lt;&lt;endl;<br>
<span style="white-space:pre"></span>out&lt;&lt;stu.age&lt;&lt;endl;<br>
<span style="white-space:pre"></span>return out;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>ofstream outfile(&quot;student.txt&quot;,ios::trunc);<br>
<span style="white-space:pre"></span>for(int i=0;i&lt;=2;i&#43;&#43;)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>outfile.write((char*)&amp;student[i],sizeof(student[i]));<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>outfile.close();<br>
<span style="white-space:pre"></span>ifstream infile(&quot;student.txt&quot;,ios::in);<br>
<span style="white-space:pre"></span>for(int i=0;i&lt;=2;i&#43;&#43;)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>infile.read((char*)&amp;stud,sizeof(stud));<br>
<span style="white-space:pre"></span>cout&lt;&lt;stud&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>infile.close();<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
<br>
<br>
27.对于二进制文件的重要应用函数，指针转移函数<br>
输入：seekg(偏移量，正代表向右，负代表向左,ios::beg(指针移到起点)//ios::cur(指针在原处)//ios::end(指针在终点)) &nbsp; &nbsp;<br>
&nbsp; &nbsp; &nbsp; &nbsp;tellg()<br>
输出：seekp()同上<br>
&nbsp; &nbsp; &nbsp; &nbsp;tellp()<br>
<br>
<br>
28.文件读取综合实例<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
#include&quot;fstream&quot;<br>
#include&quot;cstdlib&quot;<br>
using namespace std;<br>
<br>
<br>
struct node<br>
{<br>
<span style="white-space:pre"></span>char name[20];<br>
<span style="white-space:pre"></span>char sex[10];<br>
<span style="white-space:pre"></span>int age;<br>
};<br>
<br>
<br>
typedef struct node point;<br>
point student[3]={&quot;lantian&quot;,&quot;man&quot;,19,&quot;mama&quot;,&quot;woman&quot;,46,&quot;baba&quot;,&quot;man&quot;,45};<br>
point stud[2];<br>
point k;<br>
<br>
<br>
ostream&amp; operator&lt;&lt;(ostream&amp; out,point k)<br>
{<br>
<span style="white-space:pre"></span>cout&lt;&lt;k.name&lt;&lt;endl;<br>
<span style="white-space:pre"></span>cout&lt;&lt;k.sex&lt;&lt;endl;<br>
<span style="white-space:pre"></span>cout&lt;&lt;k.age&lt;&lt;endl;<br>
<span style="white-space:pre"></span>return out;<br>
}<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>fstream iofile(&quot;student.txt&quot;,ios::in|ios::out|ios::trunc|ios::binary);<br>
&nbsp; &nbsp; if(!iofile)<br>
&nbsp; &nbsp; {<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cerr&lt;&lt;&quot;error!&quot;&lt;&lt;endl;<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>exit(0);<br>
&nbsp; &nbsp; }<br>
<span style="white-space:pre"></span>for(int i=0;i&lt;=2;i&#43;&#43;)<br>
&nbsp; &nbsp; {<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.write((char*)&amp;student[i],sizeof(student[i]));<br>
&nbsp; &nbsp; }<br>
&nbsp; &nbsp; for(int i=0;i&lt;=2;i&#43;&#43;)<br>
&nbsp; &nbsp; {<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.seekg(0,ios::beg);<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.read((char*)&amp;k,sizeof(k));<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cout&lt;&lt;k&lt;&lt;endl;<br>
&nbsp; &nbsp; }<br>
&nbsp; &nbsp; cout&lt;&lt;&quot;***********************&quot;&lt;&lt;endl;<br>
&nbsp; &nbsp; iofile.seekg(0,ios::beg);<br>
<span style="white-space:pre"></span>for(int i=0,t=0;i&lt;=2;i=i&#43;2,t&#43;&#43;)<br>
&nbsp; &nbsp; {<br>
&nbsp; &nbsp; &nbsp; &nbsp; iofile.seekg(i*sizeof(k),ios::beg);<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.read((char*)&amp;stud[t],sizeof(k));<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cout&lt;&lt;stud[t]&lt;&lt;endl;<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cout&lt;&lt;&quot;begin to change!&quot;&lt;&lt;endl;<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cin&gt;&gt;stud[t].name&gt;&gt;stud[t].sex&gt;&gt;stud[t].age;<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.seekp(i*sizeof(k),ios::beg);<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.write((char*)&amp;stud[t],sizeof(k));<br>
&nbsp; &nbsp; }<br>
&nbsp; &nbsp; iofile.seekg(0,ios::beg);<br>
&nbsp; &nbsp; for(int i=0;i&lt;=2;i&#43;&#43;)<br>
&nbsp; &nbsp; {<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>iofile.read((char*)&amp;k,sizeof(k));<br>
&nbsp; &nbsp; <span style="white-space:pre"></span>cout&lt;&lt;k&lt;&lt;endl;<br>
&nbsp; &nbsp; }<br>
&nbsp; &nbsp; iofile.close();<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
27.流式输入<br>
&nbsp; &nbsp; &nbsp; ch=cin.get()从输入流中获取一个字符，返回&#20540;是读入的字符，文件结束返回EOF<br>
&nbsp; &nbsp; &nbsp; cin.get(char (&amp;(可有可无))ch)将从流中提取的字符赋&#20540;给指定的字符变量<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>char a[20];<br>
<span style="white-space:pre"></span>cin.get(a,5,'x'); &nbsp; &nbsp;//读取5-1个字符，x为结束标志，如果扫描到x提前读入结束<br>
<span style="white-space:pre"></span>cout&lt;&lt;a&lt;&lt;endl;&nbsp;<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
cin.getline(char *buf,int limit,deline='\n'(默认的结束符)) &nbsp; 与上面的类&#20284;，读取一行的内容<br>
cin.read(char *buf,int size) &nbsp; //向指定的内容中输入固定数目的内容<br>
<br>
<br>
cin.eof()文件判空<br>
cin.peek()检查该字符的下一个字符，但是注意指针并没有移动，只是检查下一个字符，指针仍停留在当前字符处<br>
cin.putback(ch)将字符ch重新插入到缓冲区的指针位置<br>
cin.ignore(int n=1,char ch=EOF) 等号是默认字符和&#20540;的意思，在没有函数的参数的时候，应用默认&#20540;，否则应用函数的参数的&#20540;，代表跳过n个字符或者知道遇到ch字符的时候，提起包括ch字符都跳过（此跳过&#20540;得是指针的移动）<br>
<br>
<br>
<br>
<br>
<br>
<br>
28.<br>
try-catch语句的调用规则，如果在同一函数中的话，直接找本函数，如果本函数没，返回他的调用层继续找，知道最后还没有找到的话，返回程序报错异常处理机制<br>
<br>
<br>
<br>
<br>
<br>
<br>
29.析构函数和异常处理<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class aa<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>aa()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>a=0;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;construct&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>~aa()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;destruct&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void setdata(int k)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>if(k&gt;=100) throw k;<br>
<span style="white-space:pre"></span>a=k;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;change successfully&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int a;<br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>aa wa;<br>
<span style="white-space:pre"></span>try<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>wa.setdata(111);<br>
<span style="white-space:pre"></span>}&nbsp;<br>
<span style="white-space:pre"></span>catch(int d)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;error!&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;throw:&quot;&lt;&lt;d&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
<br>
<br>
#include&quot;iostream&quot;<br>
#include&quot;cstdio&quot;<br>
<br>
<br>
using namespace std;<br>
<br>
<br>
class aa<br>
{<br>
<span style="white-space:pre"></span>public:<br>
<span style="white-space:pre"></span>aa()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>a=0;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;construct&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>~aa()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;destruct&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>void setdata(int k)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>if(k&gt;=100) throw k;<br>
<span style="white-space:pre"></span>a=k;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;change successfully&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>private:<br>
<span style="white-space:pre"></span>int a;<br>
};<br>
<br>
<br>
int main()<br>
{<br>
<span style="white-space:pre"></span>try<br>
<span style="white-space:pre"></span>{<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;aa wa; &nbsp; &nbsp; //如果类对象是在try语句块中进行定义的，那么在出现异常情况的时候，立即离开try语句块（如果是函数且对象在try内定义，那么立即进入catch语句块进行一场处理）<br>
<span style="white-space:pre"></span>wa.setdata(111);<br>
<span style="white-space:pre"></span>}&nbsp;<br>
<span style="white-space:pre"></span>catch(int d)<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;error!&quot;&lt;&lt;endl;<br>
<span style="white-space:pre"></span>cout&lt;&lt;&quot;throw:&quot;&lt;&lt;d&lt;&lt;endl;<br>
<span style="white-space:pre"></span>}<br>
<span style="white-space:pre"></span>return 0;<br>
}<br>
<br>
<br>
<br>
<br>
简而言之，只要try语句块中出现了对对象的声明的话，只要出现了一场（只要开始throw）必须要调用先调用析构函数然后再转入catch语句块中进行一场处理<br>
<br>
<br>
<br>
<br>
30.<br>
在符合继承关系中要小心这么一种情况<br>
&nbsp; &nbsp; &nbsp; &nbsp;base1<br>
base2 &nbsp; &nbsp; &nbsp; &nbsp;base3<br>
&nbsp; &nbsp; &nbsp; &nbsp;base4<br>
base2，3分别从base1中继承，而base4从base2和base3中继承，这时候在base4的构建时<br>
我们先调用base1的构造函数在调用base2，3的构造函数，最后调用base4的构造函数，所以如果base4中没有对base1进行初始化操作，那么会导致base1先调用默认的构造函数，在调用base2，base3的构造函数，但是base2，3中的构造函数会先调用base1的构造函数，这时候和之前就会出现矛盾，所以我们规定，在这种情况的时候base4中也要写出base1的构造函数的调用语句<br>
<br>
<br>
<br>
<br>
31.<br>
私有成员<br>
&nbsp; &nbsp; &nbsp; 1.在基类的作用域中私有始终是私有，其他的类型变量也都不会改变属性<br>
&nbsp; &nbsp; &nbsp; 2.在派生类的作用域中基类的私有是不可访问<br>
&nbsp; &nbsp; &nbsp; 3.但是，我们可以通过基类的公有函数作为接口来间接的调用所谓的不可访问变量<br>
再者，对于私有继承<br>
&nbsp; &nbsp; &nbsp; 虽然基类的共有函数变成派生类中的私有函数，但是派生类中的共有函数可以调用私有成员，并且在基类的作用域中，共有函数还是公有，还是可以调用私有成员变量的，所以，这种情况下我门还是可以以基类的共有函数做接口调用到在派生类中视为不可访问变量的私有成员
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>0</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=51113501" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/u013122572/8804673" target="_blank" strategy="BlogCommendFromCsdn_0"><img class="maxwidth" src="http://download.csdn.net/images/minetype/pdf.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/u013122572/8804673" target="_blank" strategy="BlogCommendFromCsdn_0">编写高质量代码：改善C++程序的150个建议之摘要</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2015-06-14 13:07</li>
					  <li class="visited_num fileSize">168KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/u013122572/8804673">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/qq_37146977/9866096" target="_blank" strategy="BlogCommendFromCsdn_1"><img class="maxwidth" src="http://download.csdn.net/images/minetype/unkonw.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/qq_37146977/9866096" target="_blank" strategy="BlogCommendFromCsdn_1">MD5摘要计算算法（C++版）源代码</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2017-06-09 18:23</li>
					  <li class="visited_num fileSize">12KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/qq_37146977/9866096">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/liao_jian/article/details/45170873"  target="_blank" strategy="BlogCommendFromCsdn_2">《Effective C++》重点摘要（四）</a></h2>
                    <div class="summary">
                        《Effective C++》第四章：设计与声明
让接口容易被正确使用，不易被误用。一个接口由返回类型、接口名称、和参数列表组成，为了让接口容易被正确的使用，需要小心设计返回类型，最好是简单、直接、自...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/liao_jian" target="_blank" strategy="BlogCommendFromCsdn_2"><img src="http://avatar.csdn.net/D/E/F/2_liao_jian.jpg" alt="liao_jian" title="liao_jian"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/liao_jian">liao_jian</a></li>
                        <li class="time">2015-04-21 15:20</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>446</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/x0513p/1248925" target="_blank" strategy="BlogCommendFromCsdn_3"><img class="maxwidth" src="http://download.csdn.net/images/minetype/doc.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/x0513p/1248925" target="_blank" strategy="BlogCommendFromCsdn_3">《c++ primer》摘要</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2009-04-25 20:06</li>
					  <li class="visited_num fileSize">112KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/x0513p/1248925">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/saiyic/4249293" target="_blank" strategy="BlogCommendFromCsdn_4"><img class="maxwidth" src="http://download.csdn.net/images/minetype/doc.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/saiyic/4249293" target="_blank" strategy="BlogCommendFromCsdn_4">Visual C++技术内幕摘要笔记</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2012-04-23 14:38</li>
					  <li class="visited_num fileSize">115KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/saiyic/4249293">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/liao_jian/article/details/45285959"  target="_blank" strategy="BlogCommendFromCsdn_5">《More Effective C++》重点摘要二：操作符</a></h2>
                    <div class="summary">
                        对定制的“类型转换函数”警觉。两种函数允许编译器执行类型转换：1)单变量constructors；2)隐式类型转换操作符。第一种函数可以是明确只有一个单变量的constructor，也可以是拥有除第一...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/liao_jian" target="_blank" strategy="BlogCommendFromCsdn_5"><img src="http://avatar.csdn.net/D/E/F/2_liao_jian.jpg" alt="liao_jian" title="liao_jian"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/liao_jian">liao_jian</a></li>
                        <li class="time">2015-04-26 09:41</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>448</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/godenlove007/4230726" target="_blank" strategy="BlogCommendFromCsdn_6"><img class="maxwidth" src="http://download.csdn.net/images/minetype/doc.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/godenlove007/4230726" target="_blank" strategy="BlogCommendFromCsdn_6">Visual C++技术内幕摘要笔记</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2012-04-16 17:56</li>
					  <li class="visited_num fileSize">115KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/godenlove007/4230726">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/loveyesir/article/details/6248669"  target="_blank" strategy="BlogCommendFromCsdn_7">读书摘要——《C++.GUI.Programming.with.Qt.4》</a></h2>
                    <div class="summary">
                        Qt中的每个类，都有一个对应的同名头文件，其中包含其类定义。例如要使用QApplication类，则需要在程序中添加&quot; #include &quot;&#160;&#160; QApplication类用于管理应用程序范围内的资源...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/loveyesir" target="_blank" strategy="BlogCommendFromCsdn_7"><img src="http://avatar.csdn.net/5/3/9/2_loveyesir.jpg" alt="loveyesir" title="loveyesir"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/loveyesir">loveyesir</a></li>
                        <li class="time">2011-03-14 16:31</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>902</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/liao_jian/article/details/45189813"  target="_blank" strategy="BlogCommendFromCsdn_8">《Effective C++》重点摘要（五）</a></h2>
                    <div class="summary">
                        《Effective C++》第五章：实现
尽可能延后变量定义式的出现时间。只有变量在恰好要使用之前定义，程序的可读性往往会得到提高，因为这样不容易忘记变量说代表的意思。另一方面，这样做可以提高程序性...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/liao_jian" target="_blank" strategy="BlogCommendFromCsdn_8"><img src="http://avatar.csdn.net/D/E/F/2_liao_jian.jpg" alt="liao_jian" title="liao_jian"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/liao_jian">liao_jian</a></li>
                        <li class="time">2015-04-22 07:48</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>455</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/lurendetiankong/article/details/53132915"  target="_blank" strategy="BlogCommendFromCsdn_9">c++中必须在类初始化列表中初始化的几种情况摘要</a></h2>
                    <div class="summary">
                        1. 类成员为const类型

2. 类成员为引用类型


#include 
using namespace std;

class A
{
    public:
        A(int &amp;v...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/lurendetiankong" target="_blank" strategy="BlogCommendFromCsdn_9"><img src="http://avatar.csdn.net/4/E/7/2_lurendetiankong.jpg" alt="lurendetiankong" title="lurendetiankong"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/lurendetiankong">lurendetiankong</a></li>
                        <li class="time">2016-11-11 20:39</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>267</span></li>
                    </ul>
                </dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">2</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

