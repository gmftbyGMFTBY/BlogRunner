
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/52149080"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '52149080';var commentscount = 0; var islock = false
        window.quickReplyflag = true;
        var totalFloor=0;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="史上最全的归并排序讲解
1.归并排序实现
2.归并排序复杂度证明
3.归并排序应用
4.归并排序的优化" />
    <meta name="keywords" content="数据结构,算法" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>归并排序全解（含复杂度证明） - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">归并排序全解（含复杂度证明）</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年08月08日 12:32:13</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=数据结构&t=blog" target="_blank">数据结构</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=算法&t=blog" target="_blank">算法</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=数据&t=blog" target="_blank">数据</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=归并排序&t=blog" target="_blank">归并排序</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=c语言&t=blog" target="_blank">c语言</a> <span>/</span></li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">1401</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
<h1>归并排序</h1>
<h2>1.归并排序简介：</h2>
<div>归并排序是建立在多次递归的基础上的合并操作的排序算法，是一种建立在归并操作上的有效的排序算法，该算法是采用分治法的一个典型的用例，正因为采用了分治法，并且是二路分支，（我们也称其为二路归并），所以说归并排序的递归树始终是均衡的，在这一点上，归并排序相对于快速排序有明显的优越性（但是实际上因为牵扯到cache的概念，所以归并排序的实际的算法的速度是慢于快速排序的），在这上面本人参考了大量的博客和怠慢论坛但是都看不出快速排序，归并排序，堆排序，希尔排序的真正的忧虑，实感羞愧</div>
<div><br>
</div>
<div><strong>因为我们在进行子数组归并的时候完全是按照数组的从左至右的顺序的，所以说，归并排序是稳定的排序</strong></div>
<div><br>
</div>
<div>归并排序的递归树附图：</div>
<div><img src="http://img1.imgtn.bdimg.com/it/u=805691483,1872538022&amp;fm=21&amp;gp=0.jpg" alt=""><br>
</div>
<div><br>
</div>
<div>优点：归并排序只对相邻的数组元素进行处理，所以相对来说归并排序的速度有可能在某一数据量区域内优于普通快排</div>
<div>缺点：归并排序占用了大量的内存空间（<strong>占用了和原数组等长的空间，一旦待排数组的量非常巨大的话，这完全是致命的缺点</strong>）里进行排序操作，所以来说，归并排序在大数据的时候很容易造成内存的溢出。</div>
<div><br>
</div>
<h2>2.算法讲解：</h2>
<div>算法的整体讲解：</div>
<div>我们通过不断的递归，直到每个小段的数据长度只有自身的时候我们自动认为此时已经达到了我们所谓的有序的状态，然后我们进行挑选式的插入排序操作，在这一段里面复杂度仅仅只是我们遍历的长度的大小，即O(n),所以说还是非常高效的（但是要认识到，我们这是采用了空间换时间来进行优化的）</div>
<div><br>
</div>
<div>在算法的整体结构上，我们对于整个算法都可以分成两块来进行考虑</div>
<div>第一块代码段：</div>
<div>就是刚才提到的，对每段相邻的采取刚才提及的插入的排序</div>
<div>第二块代码段：</div>
<div>多次递归，当达到我们的递归终止条件（每段只有一个元素，默认有序）的时候，进行回溯的归并操作</div>
<div><br>
</div>
<div>算法的复杂度证明：</div>
<div>因为归并排序算法是二分的，所以说分自然而然有以下的证明：</div>
<div><pre code_snippet_id="1815781" snippet_file_name="blog_20160808_1_873360"  code_snippet_id="1815781" snippet_file_name="blog_20160808_1_873360" name="code" class="cpp">T(n)=2T(n/2)+f(n)  注意这里的f(n)的考虑是从后往前的，因为归并排序优点类似于二叉树的后序遍历，所以说f(n)代表每一层的递归树的归并操作，所以说f(n)是O(n)
T(n)=4T(n/4)+2f(n)
...log2n=k,共进行k层递归 
T(n)= nT(1)+kf(n)=O(n*logn) </pre><br>
</div>
<h2>3.算法的实现：</h2>
<div>C&#43;&#43;代码类封装：(代码中我会进行更详细的讲解)</div>
<div><pre code_snippet_id="1815781" snippet_file_name="blog_20160808_2_6871388"  code_snippet_id="1815781" snippet_file_name="blog_20160808_2_6871388" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#include&quot;cstring&quot;
#define N 100
#define inf 99999999 

using namespace std;

template&lt;typename T&gt; class mergesort;
template&lt;typename T&gt; istream&amp; operator&gt;&gt;(istream&amp;,mergesort&lt;T&gt;&amp;);
template&lt;typename T&gt; ostream&amp; operator&lt;&lt;(ostream&amp;,mergesort&lt;T&gt;&amp;);

template&lt;typename T&gt;   //需要扩展O(n)的空间复杂度来实现排序操作 
class mergesort
{
	public:
		mergesort()
		{
			memset(data,0,sizeof(data));
			num=0;
		}
		friend istream&amp; operator&gt;&gt;&lt;&gt;(istream&amp;,mergesort&lt;T&gt;&amp;);
		friend ostream&amp; operator&lt;&lt;&lt;&gt;(ostream&amp;,mergesort&lt;T&gt;&amp;);
		void premerge()
		{
			merge_sort(1,num);
		}
		void merge_sort(int,int);
		void mergearray(int,int,int); 
	private:
		T data[N];
		int num;
};

template&lt;typename T&gt;
istream&amp; operator&gt;&gt;(istream&amp; in,mergesort&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;please input the number of the data!&quot;&lt;&lt;endl;
	cin&gt;&gt;k.num;
	for(int i=1;i&lt;=k.num;i++) cin&gt;&gt;k.data[i];
	return in;
} 

template&lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; out,mergesort&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;排序结果如下：&quot;&lt;&lt;endl;
	for(int i=1;i&lt;=k.num;i++) cout&lt;&lt;k.data[i]&lt;&lt;&#39; &#39;;
	cout&lt;&lt;endl;
	return out;
}

template&lt;typename T&gt;
void mergesort&lt;T&gt;::merge_sort(int left,int right)
{
	if(left&gt;=right) return ;
	int mid=(left+right)/2;
	merge_sort(left,mid);
	merge_sort(mid+1,right);
	mergearray(left,mid,right);
	return ;
}

template&lt;typename T&gt;
void mergesort&lt;T&gt;::mergearray(int left,int center,int right)
{
	int n1=center-left+1;
	int n2=right-center;
	T s1[n1+2];   //从1开始，并且最后一个元素设定成监视哨（虽然这么做会将空间复杂度提升至O(n+logn)但是毕竟好实现） 
	T s2[n2+2];
	int j=1;
	for(int i=left;i&lt;=center;i++,j++) s1[j]=data[i];
	j=1;
	for(int i=center+1;i&lt;=right;i++,j++) s2[j]=data[i];
	int i=1;j=1;
	s1[n1+1]=s2[n2+1]=inf;   //监视哨 
	for(int k=left;k&lt;=right;k++)   //插入排序的过程 
	{
		if(s1[i]&lt;s2[j]) data[k]=s1[i++];
		else data[k]=s2[j++];
	}
}

int main()
{
	mergesort&lt;int&gt; my1;
	mergesort&lt;double&gt; my2;
	cin&gt;&gt;my1&gt;&gt;my2;
	my1.premerge();
	my2.premerge();
	cout&lt;&lt;my1&lt;&lt;my2&lt;&lt;endl; 
	return 0;
}</pre><br>
<h2>4.归并排序的应用：</h2>
</div>
<h3>4.1归并排序求最大逆序对数</h3>
<div>我们知道求最大逆序对数的一个方法就是从头到尾都扫一遍，时间复杂度是：</div>
<div><pre code_snippet_id="1815781" snippet_file_name="blog_20160808_3_3632785"  code_snippet_id="1815781" snippet_file_name="blog_20160808_3_3632785" name="code" class="cpp">T(n)=1+2+...+n-1=O(n*n)</pre>但是通过归并排序我们可以将方法的时间复杂度优化到O(n*logn)</div>
<div><br>
</div>
<div>思路如下：</div>
<div>我们能可以发现，在归并的回溯过程中，我们前一段子数组始终是有序状态，后一段子数组始终是待有序状态（只有后一段也有序了，我们才开始下一次归并）</div>
<div>当后一组有序的时候，我们开始归并，在不断插入的时候我们如果发现了前一段中的某个元素比后一段的某个元素要大的时候，那么这个元素到前一段子数组的末尾这一段的元素都满足相同的状态，那么子数组的求解就会大大加快</div>
<div>但是有的人就会问了，难道这样不会重复计算吗，大男士不会的，因为我们每次是一段一段的来考虑：</div>
<div>这一个一段一段是这样理解的，前一段元素和后一段元素之间存在的逆序对的关系（数目）是不会随着前一段的排序和后一段的排序索引项的，我们之前计算的前一段的之间的逆序对数&#20284;小范围的，我们之后是不断将其范围进行扩大之后进行判断的，是完全正确的思路</div>
<div><br>
</div>
<div>又有的人可能会问，那么可不可以只记录不排序呢，这样会不会可以将时间复杂度在此优化呢:</div>
<div>这里的话，我们只能说有点异想天开了，我们上面的考虑都是在基于前一段子数组和后一段子数组的有序的情况下考虑的，所以说排序是必不可少的部分，只有排序我们才可以将重复的遍历的累计计算通过有序的方式简化为O(1)的数学表达式计算（下面的注释处）</div>
<div><br>
</div>
<div>附上代码：（在刚才的地方进行类小改动而已）</div>
<div><pre code_snippet_id="1815781" snippet_file_name="blog_20160808_4_361163"  code_snippet_id="1815781" snippet_file_name="blog_20160808_4_361163" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#include&quot;cstring&quot;
#define N 100
#define inf 99999999 

using namespace std;

template&lt;typename T&gt; class mergesort;
template&lt;typename T&gt; istream&amp; operator&gt;&gt;(istream&amp;,mergesort&lt;T&gt;&amp;);
template&lt;typename T&gt; ostream&amp; operator&lt;&lt;(ostream&amp;,mergesort&lt;T&gt;&amp;);

template&lt;typename T&gt;   //需要扩展O(n)的空间复杂度来实现排序操作 
class mergesort
{
	public:
		mergesort()
		{
			memset(data,0,sizeof(data));
			num=0;
			ans=0;
		}
		friend istream&amp; operator&gt;&gt;&lt;&gt;(istream&amp;,mergesort&lt;T&gt;&amp;);
		friend ostream&amp; operator&lt;&lt;&lt;&gt;(ostream&amp;,mergesort&lt;T&gt;&amp;);
		void premerge()
		{
			merge_sort(1,num);
		}
		void merge_sort(int,int);
		void mergearray(int,int,int);
	private:
		T data[N];
		int num;
		int ans;
};

template&lt;typename T&gt;
istream&amp; operator&gt;&gt;(istream&amp; in,mergesort&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;please input the number of the data!&quot;&lt;&lt;endl;
	cin&gt;&gt;k.num;
	for(int i=1;i&lt;=k.num;i++) cin&gt;&gt;k.data[i];
	return in;
} 

template&lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; out,mergesort&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;排序结果如下：&quot;&lt;&lt;endl;
	for(int i=1;i&lt;=k.num;i++) cout&lt;&lt;k.data[i]&lt;&lt;&#39; &#39;;
	cout&lt;&lt;endl&lt;&lt;&quot;逆序对数为：&quot;&lt;&lt;k.ans&lt;&lt;endl;
	return out;
}

template&lt;typename T&gt;
void mergesort&lt;T&gt;::merge_sort(int left,int right)
{
	if(left&gt;=right) return ;
	int mid=(left+right)/2;
	merge_sort(left,mid);
	merge_sort(mid+1,right);
	mergearray(left,mid,right);
	return ;
}

template&lt;typename T&gt;
void mergesort&lt;T&gt;::mergearray(int left,int center,int right)
{
	int n1=center-left+1;
	int n2=right-center;
	T s1[n1+2];   //从1开始，并且最后一个元素设定成监视哨（虽然这么做会将空间复杂度提升至O(n+logn)但是毕竟好实现） 
	T s2[n2+2];
	int j=1;
	for(int i=left;i&lt;=center;i++,j++) s1[j]=data[i];
	j=1;
	for(int i=center+1;i&lt;=right;i++,j++) s2[j]=data[i];
	int i=1;j=1;
	s1[n1+1]=s2[n2+1]=inf;   //监视哨 
	for(int k=left;k&lt;=right;k++)   //插入排序的过程 
	{
		if(s1[i]&lt;=s2[j]) data[k]=s1[i++];
		else    //满足逆序的条件
		{
			data[k]=s2[j++];
			ans+=center-left+1-i+1;    //这就是上面讲解的部分
		}
	}
}

int main()
{
	mergesort&lt;int&gt; my1;
	mergesort&lt;double&gt; my2;
	cin&gt;&gt;my1&gt;&gt;my2;
	my1.premerge();
	my2.premerge();
	cout&lt;&lt;my1&lt;&lt;my2&lt;&lt;endl; 
	return 0;
}</pre><br>
</div>
<h3>4.2求最大子数组和（O(n*logn)）（下一篇博文会再次介绍O(n)的动态规划思路求解）</h3>
<div><a target="_blank" target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/52148694">动态规划求解</a><br>
</div>
<div><a target="_blank" target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/50773600">先附上本博主几个月的前的分治法求最大子数组的讲解</a><br>
</div>
<div>首先我们要明确一点，最大字数组只会有三种情况</div>
<div>1.全部在左半边</div>
<div>2.全部在右半边</div>
<div>3.横跨左中右（计算的时候我们从重点开始向两边扩展进行计算）</div>
<div>那么我们分治法（归并）的思路就是每次通过求解上一层的最大子数组返回其&#20540;来求出这一层的最大&#20540;，最后三者（上面讨论的）比较就好了</div>
<div>附上C&#43;&#43;封装的代码：</div>
<div><pre code_snippet_id="1815781" snippet_file_name="blog_20160808_5_3218864"  code_snippet_id="1815781" snippet_file_name="blog_20160808_5_3218864" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdlib&quot;
#include&quot;cstdio&quot;
#include&quot;cstring&quot;
#define N 100
#define inf -99999999

using namespace std;

template&lt;typename T&gt; class submax;

template&lt;typename T&gt; class submax;
template&lt;typename T&gt;
istream&amp; operator&gt;&gt;(istream&amp;,submax&lt;T&gt;&amp;);
template&lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp;,submax&lt;T&gt;&amp;);

template&lt;typename T&gt;
class submax
{
	public:
		submax()
		{
			memset(data,0,sizeof(data));
			num=ans=0;
		}
		friend istream&amp; operator&gt;&gt;&lt;&gt;(istream&amp;,submax&lt;T&gt;&amp;);
		friend ostream&amp; operator&lt;&lt;&lt;&gt;(ostream&amp;,submax&lt;T&gt;&amp;);
		void premerge()
		{
			ans=merge(1,num);
		}
		T merge(int,int);
		T submaxcross(int,int,int);
	private:
		T data[N];
		int num;
		T ans;
};

template&lt;typename T&gt;
istream&amp; operator&gt;&gt;(istream&amp; in,submax&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;请输入你的数组的个数:&quot;;cin&gt;&gt;k.num; 
	cout&lt;&lt;&quot;请输入你的数组&quot;&lt;&lt;endl;
	for(int i=1;i&lt;=k.num;i++) cin&gt;&gt;k.data[i];
	return in; 
}

template&lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; out,submax&lt;T&gt;&amp; k)
{
	cout&lt;&lt;&quot;你所输入的数组的最大子数组之和是：&quot;&lt;&lt;k.ans&lt;&lt;endl;
	return out; 
}

template&lt;typename T&gt;
T submax&lt;T&gt;::merge(int left,int right)
{
	if(left&gt;=right);
	else
	{
		T leftsum=inf;
		T rightsum=inf;
		T crosssum=inf;
		int mid=(left+right)/2;
		leftsum=merge(left,mid);
		rightsum=merge(mid+1,right);
		crosssum=submaxcross(left,mid,right);
		if(leftsum&gt;rightsum&amp;&amp;leftsum&gt;crosssum) return leftsum;
		else
		{
			if(rightsum&gt;leftsum&amp;&amp;rightsum&gt;crosssum) return rightsum;
			else return crosssum;
		} 
	}
}

template&lt;typename T&gt;
T submax&lt;T&gt;::submaxcross(int left,int mid,int right)
{
	T leftsum=inf;
	T rightsum=inf;
	T sum=0;
	for(int i=mid;i&gt;=left;i--)
	{
		sum+=data[i];
		if(sum&gt;leftsum) leftsum=sum;
	} 
	sum=0;
	for(int i=mid+1;i&lt;=right;i++)
	{
		sum+=data[i];
		if(sum&gt;rightsum) rightsum=sum;
	}
	return leftsum+rightsum;
}

int main()
{
	submax&lt;int&gt; my1;
	submax&lt;double&gt; my2;
	cin&gt;&gt;my1&gt;&gt;my2;
	my1.premerge();
	my2.premerge();
	cout&lt;&lt;my1&lt;&lt;my2&lt;&lt;endl;
	return 0;
}</pre><br>
<br>
</div>
<div><br>
</div>
<h2>5.归并排序的空间复杂度优化的思考（原地归并）</h2>
<div>先附上参考文献：</div>
<div><a target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/52155097">本博主的原地归并算法全面讲解&#43;手摇算法</a><br>
</div>
<div><a target="_blank" target="_blank" href="http://blog.csdn.net/hitxueliang/article/details/7542607">http://blog.csdn.net/hitxueliang/article/details/7542607</a><br>
</div>
<div><a target="_blank" target="_blank" href="http://www.92to.com/bangong/2016/06-30/6929855.html">http://www.92to.com/bangong/2016/06-30/6929855.html</a><br>
</div>
<h2>6.思考问题：</h2>
<div>1.如何记录最大子数组</div>
<div>2.还是没有彻底了解原地归并的原理（手摇算法） 本问题已经解决</div>
<div>3.还是不懂为什么归并相对快排来说慢，cache到底影响在了哪里？</div>
<h2>7.参考文献：</h2>
<div><a target="_blank" target="_blank" href="http://blog.csdn.net/shawn_hou/article/details/38059701">http://blog.csdn.net/shawn_hou/article/details/38059701</a><br>
</div>
<div><a target="_blank" target="_blank" href="http://zhidao.baidu.com/link?url=GbttGQ8bg-l2AlT7A-uibWXyLBDDhnmLETC1w2fsOc_jsc6JdE-jw01D8dvjTc757UG9vjVycejyaDAd1yclI5ZrmzixH81aCzuuXZrwoQi">http://zhidao.baidu.com/link?url=GbttGQ8bg-l2AlT7A-uibWXyLBDDhnmLETC1w2fsOc_jsc6JdE-jw01D8dvjTc757UG9vjVycejyaDAd1yclI5ZrmzixH81aCzuuXZrwoQi</a><br>
</div>
<div><a target="_blank" target="_blank" href="http://blog.csdn.net/morewindows/article/details/6678165/">http://blog.csdn.net/morewindows/article/details/6678165/</a><br>
</div>
<div><br>
</div>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
            <li><a href="http://blog.csdn.net/column/details/12704.html" target="_blank">算法与数据结构</a></li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>0</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=52149080" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/c18219227162/article/details/50301513"  target="_blank" strategy="BlogCommendFromBaidu_0">next_permutation(全排列算法)</a></h2>
                    <div class="summary">
                        STL提供了两个用来计算排列组合关系的算法，分别是next_permutation和prev_permutation。首先我们必须了解什么是“下一个”排列组合，什么是“前一个”排列组合。考虑三个字符所...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/c18219227162" target="_blank" strategy="BlogCommendFromBaidu_0"><img src="http://avatar.csdn.net/0/A/B/2_c18219227162.jpg" alt="c18219227162" title="c18219227162"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/c18219227162">c18219227162</a></li>
                        <li class="time">2015-12-14 22:07</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1314</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/bluetjs/article/details/52485920"  target="_blank" strategy="BlogCommendFromBaidu_1">归并排序时间复杂度----主定理</a></h2>
                    <div class="summary">
                        http://blog.csdn.net/touch_2011/article/details/6785881

1、序言


这是《漫谈经典排序算法系列》第四篇，解析了归并排序。&#160;

...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/bluetjs" target="_blank" strategy="BlogCommendFromBaidu_1"><img src="http://avatar.csdn.net/9/8/2/2_bluetjs.jpg" alt="bluetjs" title="bluetjs"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/bluetjs">bluetjs</a></li>
                        <li class="time">2016-09-09 12:09</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>5418</span></li>
                    </ul>
                </dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/yinjiabin/article/details/8265827"  target="_blank" strategy="BlogCommendFromBaidu_2">归并排序算法原理分析与代码实现</a></h2>
                    <div class="summary">
                        归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，归并排序将两个已排序的表合并成一个表。
&#160; &#160;&#160;
归并排序基本原理...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/yinjiabin" target="_blank" strategy="BlogCommendFromBaidu_2"><img src="http://avatar.csdn.net/9/5/7/2_yinjiabin.jpg" alt="yinjiabin" title="yinjiabin"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/yinjiabin">yinjiabin</a></li>
                        <li class="time">2012-12-06 16:29</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>27761</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/morewindows/article/details/6678165"  target="_blank" strategy="BlogCommendFromBaidu_3">白话经典算法系列之五 归并排序的实现</a></h2>
                    <div class="summary">
                        归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。首先考虑下如何将将二个有序数列合并。这个非常简单，只要从比较二个数列的第...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/MoreWindows" target="_blank" strategy="BlogCommendFromBaidu_3"><img src="http://avatar.csdn.net/C/F/7/2_morewindows.jpg" alt="MoreWindows" title="MoreWindows"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/MoreWindows">MoreWindows</a></li>
                        <li class="time">2011-08-11 11:01</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>300575</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/yuzhihui_no1/article/details/44198701"  target="_blank" strategy="BlogCommendFromBaidu_4">排序算法之  快速排序  及其时间复杂度和空间复杂度</a></h2>
                    <div class="summary">
                        基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/YuZhiHui_No1" target="_blank" strategy="BlogCommendFromBaidu_4"><img src="http://avatar.csdn.net/B/B/6/2_yuzhihui_no1.jpg" alt="YuZhiHui_No1" title="YuZhiHui_No1"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/YuZhiHui_No1">YuZhiHui_No1</a></li>
                        <li class="time">2015-03-11 14:48</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>18134</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/qiaofangjie/article/details/7559843"  target="_blank" strategy="BlogCommendFromBaidu_5">归并排序，空间复杂度O(1)的实现</a></h2>
                    <div class="summary">
                        这是2012年百度实习生笔试的题目，当时没有想明白。题目大概是这样的：数组A，前面一段是L1，后面一段L2。两个有序序列L1和L2，利用归并排序的merge，将数组A排序。要求：空间复杂度为O(1)...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/qiaofangjie" target="_blank" strategy="BlogCommendFromBaidu_5"><img src="http://avatar.csdn.net/2/3/5/2_qiaofangjie.jpg" alt="qiaofangjie" title="qiaofangjie"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/qiaofangjie">qiaofangjie</a></li>
                        <li class="time">2012-05-12 11:10</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>6411</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/yuzhihui_no1/article/details/44223225"  target="_blank" strategy="BlogCommendFromBaidu_6">排序算法之  归并排序  及其时间复杂度和空间复杂度</a></h2>
                    <div class="summary">
                        在排序算法中快速排序的效率是非常高的，但是还有种排序算法的效率可以与之媲美，那就是归并排序；归并排序和快速排序有那么点异曲同工之妙，快速排序：是先把数组粗略的排序成两个子数组，然后递归再粗略分两个子数...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/YuZhiHui_No1" target="_blank" strategy="BlogCommendFromBaidu_6"><img src="http://avatar.csdn.net/B/B/6/2_yuzhihui_no1.jpg" alt="YuZhiHui_No1" title="YuZhiHui_No1"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/YuZhiHui_No1">YuZhiHui_No1</a></li>
                        <li class="time">2015-03-12 16:16</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>13148</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/u013074465/article/details/42043967"  target="_blank" strategy="BlogCommendFromBaidu_7">归并排序及其空间复杂度的思考</a></h2>
                    <div class="summary">
                        对归并排序来说：
如果对Merge的每个递归调用都声明一个临时数组，那么任一时刻可能会有logN个临时数组处于活动期,这对小内存机器是致命的。另一方面，如果Merge动态分配并释放最小量临时空间，那么...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/u013074465" target="_blank" strategy="BlogCommendFromBaidu_7"><img src="http://avatar.csdn.net/9/0/B/2_u013074465.jpg" alt="u013074465" title="u013074465"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/u013074465">u013074465</a></li>
                        <li class="time">2014-12-20 17:27</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>2874</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/morewindows/article/details/6657829"  target="_blank" strategy="BlogCommendFromBaidu_8">白话经典算法系列之一   冒泡排序的三种实现</a></h2>
                    <div class="summary">
                        冒泡排序是非常容易理解和实现，，以从小到大排序举例：
设数组长度为N。
1．比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个数据交换。
2．这样对数组的第0个数据到N-1个数据进行一...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/MoreWindows" target="_blank" strategy="BlogCommendFromBaidu_8"><img src="http://avatar.csdn.net/C/F/7/2_morewindows.jpg" alt="MoreWindows" title="MoreWindows"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/MoreWindows">MoreWindows</a></li>
                        <li class="time">2011-08-06 19:20</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>172392</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/chenhuajie123/article/details/9296359"  target="_blank" strategy="BlogCommendFromBaidu_9">归并排序的原理及时间复杂度</a></h2>
                    <div class="summary">
                        归并排序的定义
归并排序算法采用的是分治算法,即把两个(或两个以上)有序表合并成一个新的有序表,即把待排序的序列分成若干个子序列,每个子序列都是有序的,然后把有序子序列合并成整体有序序列,这个过程也称...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/chenhuajie123" target="_blank" strategy="BlogCommendFromBaidu_9"><img src="http://avatar.csdn.net/0/3/3/2_chenhuajie123.jpg" alt="chenhuajie123" title="chenhuajie123"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/chenhuajie123">chenhuajie123</a></li>
                        <li class="time">2013-07-11 02:03</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>32617</span></li>
                    </ul>
                </dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">3</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

