
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/51952942"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '51952942';var commentscount = 3; var islock = false
        window.quickReplyflag = true;
        var totalFloor=2;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="最短路径算法精讲
1.Floyed
2.Dijstra
3.SPFA（队列优化Bellman算法）
4.Best-First-Search——A算法
5.启发式A*
6.启发式的A*的平局打破
7.目前自学存在的急需解决的问题
8.最短路径算法的优劣比较
9.各个算法的路径记录的策略








1.Floyed（全局最短路径算法）
1）数据结构的选择：" />
    <meta name="keywords" content="算法,存储" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>最短路径算法汇总 - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">最短路径算法汇总</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年07月19日 21:07:42</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=算法&t=blog" target="_blank">算法</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=存储&t=blog" target="_blank">存储</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=数据结构&t=blog" target="_blank">数据结构</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=最短路径&t=blog" target="_blank">最短路径</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=搜索&t=blog" target="_blank">搜索</a> <span>/</span></li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">4557</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
<h1><strong><span style="font-size:24px">最短路径算法精讲</span></strong></h1>
<p><strong>1.Floyd</strong></p>
<p><strong>2.Dijkstra</strong></p>
<p><strong>3.SPFA（队列优化Bellman算法）</strong></p>
<p><strong>4.Best-First-Search——A算法</strong></p>
<p><strong>5.启发式A*</strong></p>
<p><strong>6.启发式的A*的平局打破</strong></p>
<p><strong>7.目前自学存在的急需解决的问题</strong></p>
<p><strong>8.<span style="font-size:13.3333px">最短路径算法的优劣比较</span></strong></p>
<p><strong>9.各个算法的路径记录的策略</strong></p>
<h2><strong>1.Floyd（全局最短路径算法）</strong></h2>
<h3><span style="font-size:12px"><span style="white-space:pre"></span>1）数据结构的选择：</span></h3>
<p><span style="font-size:12px"><span style="font-weight:bold; white-space:pre"></span>Floyed算法是需要不断的通过第三方节点来松弛目标两个节点之间的距离，通过遍历图中所有的顶点，从而实现全局最短路径的求解</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>所以这里，我们的两点之间的边权&#20540;是要不断的改变的，所以我们果断采用邻接矩阵来进行图的存储，这样会更加利于操作</span></p>
<h3><span style="font-size:12px"><span style="white-space:pre"></span><strong>2）算法的核心：</strong></span></h3>
<p><span style="font-size:12px"><span style="font-weight:bold; white-space:pre"></span>我们通过求解最优子路径来求得全局最优路径，在这里，两个点之间的最优路径要么就是两点之间直接的连边，要么就是通过其他若干</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>的节点来进行松弛，所以，这里面我们一各个点为基准，构建三个循环，最外面的循环遍历所有的第三方节点，里面的循环控制两个目标</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>节点，在这里，可能有的人会问了，这样的话，只是以一个节点作为中间节点来考虑的，但是实际上，有可能最短路径包含不止一个中间节点</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>没错，在这里，我们要这么考虑，每次一个中间节点考虑完之后，邻接矩阵中的所有的边的权重都是考虑了这个已经考虑过得第三方节点</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>优化后的结果，所以我们下次再用别的第三方节点的时候就必然会将之前的所有的考虑过得第三方节点都纳入考虑过的优化范围之内，所以</span></p>
<p><span style="font-size:12px"><span style="white-space:pre"></span>最后的结果就是，我们任意两点之间的最短路径都是考虑了所有的第三方节点来进行优化的</span></p>
<p><span style="font-size:12px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>个人感觉一点：Floyd的本质很可能就是动态规划</strong></span></p>
<h3><span style="font-size:12px"><span style="white-space:pre"></span><strong>3) 核心代码段：</strong></span></h3>
<p></p>
<pre code_snippet_id="1771940" snippet_file_name="blog_20160719_1_566163"  code_snippet_id="1771940" snippet_file_name="blog_20160719_1_566163" name="code" class="html">for(int k=1;k&lt;=n;k++)
	{
		for(int i=1;i&lt;=n;i++)
		{
			for(int j=1;j&lt;=n;j++)
			{
				if(map[i][j]&gt;map[i][k]+map[k][j]) map[i][j]=map[i][k]+map[k][j];   //考虑第三方节点k的优化
			}
		}
	}</pre><br>
<p></p>
<h3></h3>
<h3><span style="white-space:pre"></span>&nbsp;&nbsp;<strong>4）Floyed可以解决负权边，在下面我会提出问题，无向图的负权边会重复考虑吗？<br>
</strong></h3>
<h3><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Floyed不可以解决负权回路，因为负权回路不存在最短路径</strong></h3>
<p></p>
<p><strong><br>
</strong></p>
<p><strong><br>
</strong></p>
<p><strong><br>
</strong></p>
<h2><strong>2.Dijkstra（单源最短路径算法）</strong></h2>
<h3><strong><span style="white-space:pre"></span>1）数据结构的选择：</strong></h3>
<p><span style="font-weight:bold; white-space:pre"></span>Dijstra的核心是不断的维护一个dis数组，最后得到的dis数组中的左右的权重就是源点到图中所有的节点的最短路径的长度，所以在这里</p>
<p><span style="white-space:pre"></span>数据结构我们是不必过分的强求的，邻接矩阵，邻接表，链式前向星，边集数组都是可以的，这里我们用数组模拟链表来进行数据结构的讲解</p>
<p><span style="white-space:pre"></span>其他的数据结构在理解了核心的之后都是轻而易举</p>
<h3><span style="white-space:pre"></span><strong>2）算法的核心：</strong></h3>
<h4><strong><span style="white-space:pre"></span>1》算法大致流程：</strong></h4>
<p><span style="font-weight:bold; white-space:pre"></span>a.录入图的信息完成初始化</p>
<p><span style="white-space:pre"></span>b.找到在dis数组中权重最小的节点p（目前距离源节点最近的节点）</p>
<p><span style="white-space:pre"></span>c.利用p的所有的出边优化源节点到p出边的临近节点的边权&#20540;</p>
<p><span style="white-space:pre"></span>d.图中除了源节点以外的n-1个点都已经优化过，继续e，否则返回b</p>
<p><span style="white-space:pre"></span>e.输出dis数组的权重</p>
<h4><span style="white-space:pre"></span><strong>2》算法讲解：</strong></h4>
<p><span style="font-weight:bold; white-space:pre"></span>Dijstra算法其实很好理解，我们每次利用距离原点最近的节点作为第三方节点来优化源节点和第三方节点的出边临近节点，当所有的</p>
<p><span style="white-space:pre"></span>节点全部考虑完了以后，我们得到的必然就是单源节点到其余节点的最短路径</p>
<p><span style="white-space:pre"></span>先对朴素的Dijstra来说，我们需要用book数组记录那些节点我们已经访问过，在遍历求解距离单源点最近的节点的时候我们可以不访问</p>
<p><span style="white-space:pre"></span>那些考虑过的节点</p>
<h5><span style="white-space:pre"></span><strong>2.1》朴素的Dijstra算法的示例代码：</strong></h5>
<p></p>
<pre code_snippet_id="1771940" snippet_file_name="blog_20160719_2_1503471"  code_snippet_id="1771940" snippet_file_name="blog_20160719_2_1503471" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#define inf 99999999
#define Nedge 5000
#define Npoint 1000

using namespace std;

int u[Nedge];
int v[Nedge];
int w[Nedge];
int first[Npoint];
int nextk[Nedge];
//上面是链式前向星的数据结构 
int book[Npoint];
int npoint,nedge;
int dis[Npoint];

int main()
{
	cin&gt;&gt;npoint&gt;&gt;nedge;
	memset(book,0,sizeof(book));
	memset(first,-1,sizeof(first));
	memset(nextk,0,sizeof(nextk));
	for(int i=1;i&lt;=nedge;i++)
	{
		int a,b,c;
		cin&gt;&gt;u[i]&gt;&gt;v[i]&gt;&gt;w[i];
		nextk[i]=first[u[i]];
		first[u[i]]=i;
	} 
	book[1]=1;
	int k=first[1];     //这里讲 1 当做源节点，下面的代码是对dis进行初始化
	for(int i=1;i&lt;=npoint;i++) dis[i]=inf;
	while(k!=-1)
	{
		dis[v[k]]=w[k];
		k=nextk[k];
	} 
	dis[1]=0;    //自己到自己的距离肯定是0 
	
	for(int i=1;i&lt;=npoint-1;i++)
	{
		int minedge=inf;
		int minpoint;
		for(int i=1;i&lt;=npoint;i++)    //找到最近的节点 
		{
			if(book[i]==0&amp;&amp;dis[i]&lt;minedge)
			{
				minpoint=i;
				minedge=dis[i];
			}
		}
		book[minpoint]=1;
		k=first[minpoint];
		while(k!=-1)     //松弛出边 
		{
			if(book[v[k]]==0&amp;&amp;dis[v[k]]&gt;dis[minpoint]+w[k]) dis[v[k]]=dis[minpoint]+w[k];
			k=nextk[k];
		}
	}
	
	for(int i=1;i&lt;=npoint;i++) cout&lt;&lt;dis[i]&lt;&lt;' '; 
	return 0;
}</pre><span style="white-space:pre"> </span>在这里我们要注意因为每次选最近的点都要进行遍历操作，但是我们可以优化一下，对，我们可以用堆，根据dis中的权重为判断依据，我 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 们来构建最小堆，可以大大提高Dijstra的速度
<p></p>
<h5><span style="white-space:pre"></span><strong>2.2》堆优化Dijstra算法代码示例</strong><span style="font-weight:normal">：</span></h5>
<div><pre code_snippet_id="1771940" snippet_file_name="blog_20160719_3_7773717"  code_snippet_id="1771940" snippet_file_name="blog_20160719_3_7773717" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#define inf 99999999
#define NP 1000
#define NE 2000

using namespace std;

int u[NE];
int v[NE];
int w[NE];
int first[NP];
int nextk[NE];

int dis[NP];
int heap[NP];
int pos[NP];      //pos记录i号节点在堆中的位置，在变松弛之后方便向上调整 
int heapnumber=0;
int n,m;

void swap(int x,int y)
{
	int t=heap[x];
	heap[x]=heap[y];
	heap[y]=t;
	
	t=pos[heap[x]];     //同步更新 
	pos[heap[x]]=pos[heap[y]];
	pos[heap[y]]=t;
}

void siftdown(int i)
{
	int t,flag=0;
	while(i*2&lt;=heapnumber&amp;&amp;flag==0)
	{
		if(dis[heap[i]]&gt;dis[heap[i*2]]) t=i*2;
		else t=i;
		if(i*2+1&lt;=heapnumber&amp;&amp;dis[heap[i*2+1]]&lt;dis[heap[t]]) t=i*2+1;
		if(t!=i) 
		{
			swap(i,t);
			i=t;
		}
		else flag=1;
	}
} 

void siftup(int i)
{
	int t,flag=0;
	while(i!=1&amp;&amp;flag==0)
	{
		if(dis[heap[i]]&lt;dis[heap[i/2]])
		{
			swap(i,i/2);
			i=i/2;
		}
		else flag=1;
	}
}

int pop()
{
	int t=heap[1];
	swap(1,heapnumber);
	heapnumber--;
	siftdown(1);
	return t;
}

int main()
{
	cin&gt;&gt;n&gt;&gt;m;
	heapnumber=n;
	for(int i=1;i&lt;=n;i++)
	{
		first[i]=-1;
		nextk[i]=0;
		heap[i]=pos[i]=i;
		dis[i]=inf;
	}
	dis[1]=0;    //以 1 为源点
	for(int i=1;i&lt;=m;i++)
	{
		cin&gt;&gt;u[i]&gt;&gt;v[i]&gt;&gt;w[i];
		nextk[i]=first[u[i]];
		first[u[i]]=i;
	} 
	int k=first[1];
	while(k!=-1)     //初始化dis数组 
	{
		dis[v[k]]=w[k];
		k=nextk[k];
	}
	
	for(int i=n/2;i&gt;=1;i--) siftdown(i);   //初始化堆
	
	pop();
	for(int i=1;i&lt;=n-1;i++)
	{
		int minpoint=pop();
		k=first[minpoint];
		while(k!=-1)
		{
			if(book[v[k]]==0&amp;&amp;dis[v[k]]&gt;dis[minpoint]+w[k]) 
			{
				dis[v[k]]=dis[minpoint]+w[k];
				siftup(pos[v[k]]);
			}
			k=nextk[k];
		} 
	} 
	
	for(int i=1;i&lt;=n;i++) cout&lt;&lt;dis[i]&lt;&lt;' '; 
	return 0;
}</pre>
<h3><span style="white-space:pre"></span>3）Dijkstra分析：援引大神的解释为什么Dijstra不能解决负权边——贪心的前提错误</h3>
</div>
<div>还有我们的Dijstra算法的过程中注意，我们必须要对访问过的点进行标记，之后松弛的 时候我们是不松弛被访问的点的</div>
<div>
<p style="margin-top:0px; margin-bottom:1.1em; padding-top:0px; padding-bottom:0px; color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
<a target="_blank" target="_blank" href="http://blog.csdn.net/baidu_31818237/article/details/50611592">点击打开链接</a><br>
</p>
<p style="margin-top:0px; margin-bottom:1.1em; padding-top:0px; padding-bottom:0px; color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
我们首先来分析下含负权边的无向图：&nbsp;<br style="">
<img src="" alt=""><br style="">
1.先看图&nbsp;<br style="">
我们求A点到C点的最短距离，很明显答案为1.&nbsp;<br style="">
2.我们用dij来跑下，看过程：</p>
<ul style="color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
<li style="">先把A点标记哈，不需要访问本身</li><li style="">首先找到距A最近的且直接相连的点（也就是两点间没有中转点）C，把C标记哈</li><li style="">找出C点的出点A,，B，A被标记了不管，此时A到B的距离为3，大于A到C的距离加上C到B的距离0，所以更新A到B的距离为0</li><li style="">更新后A到C的距离仍然为2，A到B的距离为0，A，C都被标记，只有B未被标记，进行下一步</li><li style="">找到距A最近的且未被标记的点B，标记B</li><li style="">找出B的出点A，C，然而A，C两点都被标记，不能松弛</li><li style="">好，程序结束，结果为A到C的距离为2而不是1，说明普通dij并不能处理带负权边的无向图</li></ul>
<p style="margin-top:0px; margin-bottom:1.1em; padding-top:0px; padding-bottom:0px; color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
3.看完了dij过程可能仍有人不是很明白为什么，没关系，待会儿会详细解释，现在我们看下带负权边的有向图：&nbsp;<br style="">
<img src="" alt=""><br style="">
4.如图，我们还是求A到C的最短距离，很明显，答案还是15.我们还是用dij来跑下：</p>
<ul style="color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
<li style="">先把A点标记哈，不需要访问本身</li><li style="">首先找到距A最近的且直接相连的点（也就是两点间没有中转点）C，把C标记哈</li><li style="">找出C点的出点，哦豁，莫得，不方，莫得就不管，走下一步</li><li style="">找到距A最近的且未被标记的点B，标记B</li><li style="">找出B的出点C，好，松弛，等等！！！松弛个锤子，C是标记了的，按照dij远的点是不能松弛近的点的，所以不能松弛。</li><li style="">好，程序结束，结果为A到C的距离为2，跟答案不同。说明也不能用dij来处理带负权边的有向图。</li></ul>
<p style="margin-top:0px; margin-bottom:1.1em; padding-top:0px; padding-bottom:0px; color:rgb(85,85,85); font-family:'microsoft yahei'; font-size:14px; line-height:35px">
PS（有的人在倒数第二步没有判断点是否标记，导致求出来的结果是1，然而这时错误的，下面我将说明）&nbsp;<br style="">
6.我们来看看原因：&nbsp;<br style="">
我们先来看看dij的由来，dij求最短路的算法是由贪心得来的，也就是说长路径的松弛正确的前提是用来松弛它的短路径是最短的，也就是说在之后是不会变的，这在非负权&#20540;的情况下是对的，然而遇到负权&#20540;便错了，因为当加入了负权&#20540;边后便可能使之前的短边变得更短，就如图中一样，我们先访问了C点，则AC的距离在之后的距离应该是不变的，这在都是非负权&#20540;时是正确的，因为每条边都是非负的，当通过其他点来中转时，所经过的路径和必然不小于AC的距离，然而加入了负权边后，使得AC的距离变得比初始更小，这便使得前提错误，前提都错了，dij算法便不成立，结果便错误，这也是为什么有那么多人糊涂的原因，也是我专门举这个例子的原因</p>
</div>
<div><br>
</div>
<h2>3.SPFA (Bellman队列优化，单源最短路径)</h2>
<h3><span style="white-space:pre"></span>1）数据结构的选择：</h3>
<div><span style="white-space:pre"></span>和Dijstra的操作大致相&#20284;，我们也是要维护dis数组，换言之，dis数组的结果也就是最后的单源最短路径的结果</div>
<div><span style="white-space:pre"></span>所以，这里我们和Dijstra算法的数据结构是基本一样的，我们举例也是通过模拟链表的方式来进行讲解</div>
<h3><span style="white-space:pre"></span>2）算法讲解:</h3>
<div>
<h4><span style="white-space:pre"></span>2.1》Bellman算法步骤：</h4>
<h4><span style="font-weight:normal; white-space:pre; font-size:12px"><span style="white-space:pre"></span>首先，我们要先弄懂Bellman算法的原理，Bellman算法算法和Dijstra还是有区别的，Dijstra算法是枚举点，但是Bellma<span style="white-space:pre"></span>n算法</span><span style="font-size:12px; font-weight:normal; white-space:pre">是枚举边，我们换个角度，从原点到所求的点之间的路径优化的方式可以看做是第三方节点加上第三方节点与目标节点之间的一<span style="white-space:pre"></span>条边，所以</span><span style="font-size:13.3333px; white-space:pre; font-weight:normal">我们通过枚举边来优化两点之间的路径，但是要优化几轮才够呢</span><span style="font-weight:normal"><span style="font-size:13.3333px; white-space:pre">我们可以这么来看，每次成功优化的时候，两点之间的<span style="white-space:pre"></span>路径是会被扩展成另外一组路径的，这组路径的边的个数比原先的路径的个数总是多</span><span style="font-size:13.3333px; white-space:pre">1，所以，我们发现假如：</span><span style="font-size:13.3333px; white-space:pre">最坏的情况就<span style="white-space:pre"></span>是源节点n到目标结点p之间的路径需要通过图中的所有的点来进行辅助才能优化，那么我们需要进行多少轮，才能成功将n与<span style="white-space:pre"></span></span><span style="font-size:13.3333px; white-space:pre">p之间的路径优化到最短呢，（假设有k个节点k个节点全部连接至少要k-1条边）显然，答案是k-1，因为刚开始的时候我们一<span style="white-space:pre"></span>条边都没有松</span><span style="font-size:13.3333px; white-space:pre">弛，所以，可以推理出，我们总共需要k-1轮就可以成功优化出单源最短路径</span><span style="font-size:13.3333px; white-space:pre"></span></span></h4>
</div>
<h4><span style="white-space:pre"></span>2.2》SPFA算法：</h4>
<div><span style="white-space:pre"></span>在了解了Bellman算法之后，我们开始着手SPFA算法，SPFA算法实际上是对Bellman的一种优化，我们发现实际上，Bellman算法其<span style="white-space:pre"></span>实有的时候没必要进行n-1轮就可以结束，因为n-1轮是最坏的情况，所以我们什么时候开始判断可以结束了呢</div>
<div><span style="white-space:pre"></span>这时候我们发现，假设有一个点刚刚被优化了，我们可以很明显的发现，针对这条边，也就只有这条边的出边上的终点才可以继续被优<span style="white-space:pre"></span>化，这就给了我们启示，其实我们可以再维护一个队列，一个点如果被优化过了，那么就进队列，（当然我们这么做还需要开一个<span style="white-space:pre"></span>book记录数组记录在队列中的节点），我们只需要对队列中的点的出边进行松弛就可以了，当队列空的时候说明松弛结束，最短路径<span style="white-space:pre"></span>已经求出来了</div>
<h3><span style="white-space:pre"></span>3）代码示例：SPFA</h3>
<div><pre code_snippet_id="1771940" snippet_file_name="blog_20160719_4_4043963"  code_snippet_id="1771940" snippet_file_name="blog_20160719_4_4043963" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#define inf 99999999
#define NP 1000
#define NE 2000

using namespace std;

int queue[NP*2];
int head,tail;
int dis[NP];
int book[NP];
int n,m;
int u[NE];
int v[NE];
int w[NE];
int first[NP];
int nextk[NE]; 

int main()
{
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;i++)
	{
		dis[i]=inf;
		first[i]=-1;
		nextk[i]=0;
		book[i]=0;
	}
	memset(queue,0,sizeof(queue));
	head=tail=1;
	dis[1]=0;     //假设 1 为源点
	for(int i=1;i&lt;=m;i++)
	{
		cin&gt;&gt;u[i]&gt;&gt;v[i]&gt;&gt;w[i];
		nextk[i]=first[u[i]];
		first[u[i]]=i; 
	} 
	queue[1]=1;
	tail++;
	book[1]=1;     //小心这里dis一定不可以先初始化，因为一旦初始化将源节点的出边进行添加的话，源节点的出边的弧头书不会入队列的，算法就                       //出现问题了
	
	while(head!=tail)
	{
		int k=first[queue[head]];
		while(k!=-1)
		{
			if(dis[v[k]]&gt;dis[u[k]]+w[k]) 
			{
				dis[v[k]]=dis[u[k]]+w[k];
			    if(book[v[k]]==0)
	     		{
	    			book[v[k]]=1;
	    			queue[tail]=v[k];
	    			tail++;
	    		}
			}
			k=nextk[k];
		}
		book[queue[head]]=0;    //这一步是非常有必要的
		head++;
	}
	
	for(int i=1;i&lt;=n;i++) cout&lt;&lt;dis[i]&lt;&lt;' '; 
	return 0;
}</pre>
<h3><span style="white-space:pre"></span>4）总结:</h3>
<div><span style="white-space:pre"></span>在最后，我强调一点，SPFA是可以正确的求解出负权边的</div>
</div>
<div>PS:2016-11-21</div>
<div>发现思维漏洞：</div>
<div>对于SPFA算法，如果我们每一个队列中的顶点松弛出边之后并没有将顶点的访问标记去掉的话，会导致程序出现错误</div>
<div>错误的原因很简单：</div>
<div><pre code_snippet_id="1771940" snippet_file_name="blog_20161121_5_4444370"  name="code" class="cpp">     1
2        3
      4  5  6</pre></div>
<div><span style="font-size:12px">无向或者有向边为</span></div>
<div>1 2 1</div>
<div>1 3 5</div>
<div>3 4 1</div>
<div>3 5 1</div>
<div>3 6 1<br>
</div>
<div>如果我们不将3号顶点取出队列的话，我们会发现，通过2顶点我们可以对3重新松弛，但是3不出顶点的话，我们无法对4,5,6继续松弛，这是有问题的</div>
<div>所以中间注释的那一句book[queue[head]]=0;是非常有必要的</div>
<div><span style="white-space:pre"></span></div>
<h3><span style="white-space:pre"></span>5）SPFA的拓展应用：</h3>
<div><span style="white-space:pre"></span>我们如果在优化完了以后，重新遍历一边所有的边，如果我们发现仍按存在可以松弛的情况，只能说明一点，存在负权回路</div>
<div><br>
</div>
<div><br>
</div>
<h2>4.Best-First-Search(带启发函数的最短寻路算法 A)</h2>
<h3><span style="white-space:pre"></span>1）简介：</h3>
<div><span style="white-space:pre"></span>虽然缩写也是BFS，但是不同于BFS，实际上我们也可以将最佳优先搜索称之为A算法，最佳优先搜索算法实际上在图搜索中应用的更<span style="white-space:pre"></span>为广泛,因为最佳优先算法和A*算法实际上都是在图上寻找出一条最短路径的，当然我们这里书他是启发式的，是因为和盲目搜索不同</div>
<div><span style="white-space:pre"></span>BFS‘（最佳优先算法）通过启发估价函数来指向目标，所以可以比在图搜索中的Dijstra的四周盲目搜索更有目的性，当然也就更快</div>
<h3><span style="white-space:pre"></span>2）实现：</h3>
<div><span style="white-space:pre"></span>在下实在是才疏学浅，瞻仰大神们的博客之后才率为了解了一点原理，这里的原理就只有启发估价函数F(n)了，</div>
<div><span style="white-space:pre"></span>F（n）=h(n) &nbsp; &nbsp;//h（n）是当前位置到终点位置的估价，目的是，尽量避免盲目搜索，让搜索具有优先性，</div>
<h3><span style="white-space:pre"></span>3）数据结构的选择：</h3>
<div><span style="white-space:pre"></span>我们既然是有优先性的选择的话，那么我们就需要一个优先队列来实现维护一个Open表，然后我们再用一个Close表来保存已经访问<span style="white-space:pre"></span>过的位置</div>
<h3><span style="white-space:pre"></span>4）算法描述：</h3>
<h3><span style="white-space:pre"></span><span style="font-weight:normal">最佳优先搜索的过程可以被描述为：<span style="font-size:12px">&nbsp;</span></span></h3>
<h3><span style="font-size:12px; font-weight:normal"><span style="white-space:pre"></span>a.将根节点放入优先队列open中。</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>&nbsp; &nbsp; b.从优先队列中取出优先级最高的节点X。</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>&nbsp; &nbsp;&nbsp;c.根据节点X生成子节点Y:</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>c.1. X的子节点Y不在open队列或者closed中，由估价函数计算出估价&#20540;，放入open队列中。</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>c.2. X的子节点Y在open队列中，且估价&#20540;优于open队列中的子节点Y，将open队列中的子节点Y的估价&#20540;替<span style="white-space:pre"></span>换成新的估价&#20540;并按优先&#20540;排序。</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>c.3. X的子节点Y在closed集中，且估价&#20540;优于closed集中的子节点Y，将closed集中的子节点Y移除，并将子<span style="white-space:pre"></span>节点Y加入open优先队列。 &nbsp; &nbsp; //c.3的目的是：把优化后的位置的参数保留下来，让其对后续扩展节点都进行优化</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>&nbsp; &nbsp;d.将节点X放入closed集中。</span></h3>
<h3><span style="font-weight:normal"><span style="white-space:pre"></span>&nbsp; &nbsp;e.重复过程2,3,4直到目标节点找到，或者open为空，程序结束。</span></h3>
<h3><span style="font-weight:normal; white-space:pre"></span>5）代码示例：</h3>
<div><span style="white-space:pre"></span>简易的题目描述，找到从起点到终点的最短路径，（在二维地图上）0表示空地，1表示障碍物，并输出路径（本问题中采用的启发式函<span style="white-space:pre"></span>数应用欧几里得距离——连线距离）</div>
<div><pre code_snippet_id="1771940" snippet_file_name="blog_20160719_5_8362361"  code_snippet_id="1771940" snippet_file_name="blog_20160719_5_8362361" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstdlib&quot;
#include&quot;cmath&quot;
#define N 1000

using namespace std;

typedef struct node
{
	int c;
	int x,y;
	double prev;    //优先顺序 
	int px,py;     //记录前驱，输出路径的时候需要 
}point;

int book[100][100];    //记录是否在close数组里面 
point map[100][100];
point pre[N];     //堆
int numpre=0; 
point close[N];
int numclo=0;
int nextk[4][2]={{1,0},{0,1},{-1,0},{0,-1}};   //四个方向的扩展 

int n,m;
int sx,sy;
int ex,ey;

void swap(int x,int y)
{
	point t=pre[x];
	pre[x]=pre[y];
	pre[y]=t;
}

point count(int x,int y)
{
	point w;
	w.x=x;w.y=y;
	w.prev=sqrt(pow(w.x-ex,2)+pow(w.y-ey,2));
	return w;
}

void siftup(int i)
{
	int t,flag=0;
	while(i!=1&amp;&amp;flag==0)
	{
		if(pre[i].prev&lt;pre[i/2].prev) 
		{
			swap(i,i/2);
			i=i/2;
		}
		else flag=1;
	}
}

void siftdown(int i)
{
	int t,flag=0;
	while(i*2&lt;=numpre&amp;&amp;flag==0)
	{
		if(pre[i].prev&gt;pre[i*2].prev) t=i*2;
		else t=i;
		if(i*2+1&lt;=numpre&amp;&amp;pre[i*2+1].prev&lt;pre[t].prev) t=i*2+1;
		if(t!=i)
		{
			swap(i,t);
			i=t;
		}
		else flag=1;
	}
}

point pop()
{
	point k=pre[1];
	pre[1]=pre[numpre];
	siftdown(1);
	numpre--;
	close[++numclo]=k;
	book[k.x][k.y]=1;
	return k;
}

void push(int x,int y,int a,int b)
{
	pre[++numpre].x=x;pre[numpre].y=y;
	pre[numpre].px=a;pre[numpre].py=b;
	pre[numpre].prev=count(x,y).prev;
	siftup(numpre);
}

bool judgeopen(int x,int y)
{
	for(int i=1;i&lt;=numpre;i++)
	{
		if(pre[i].x==x&amp;&amp;pre[i].y==y)    //因为我把g（n）耗散函数设为零了，这样方便一点，这一向我们就可以不用进行处理了
			return 1;
	}
	return 0;
}

bool judgeclose(int x,int y,int a,int b)
{
	for(int i=1;i&lt;=numclo;i++)
	{
		if(x==sx&amp;&amp;y==sy) return 1;
		if(close[i].x==x&amp;&amp;close[i].y==y&amp;&amp;count(x,y).prev&lt;close[i].prev)
		{
			pre[++numpre]=close[i];
			pre[numpre].px=a,pre[numpre].py=b;
			pre[numpre].prev=count(x,y).prev;
			return 1;
		}
	}
	return 0;
}

int main()
{
	memset(book,0,sizeof(book)); 
	cin&gt;&gt;n&gt;&gt;m;
	memset(map,0,sizeof(map));
	memset(pre,0,sizeof(pre));
	memset(close,0,sizeof(close));
	for(int i=1;i&lt;=n;i++)
	{
		for(int j=1;j&lt;=m;j++)
		{
			cin&gt;&gt;map[i][j].c;
		}
	}
	cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;ex&gt;&gt;ey;
	map[sx][sy]=count(sx,sy);map[sx][sy].px=map[sx][sy].py=0;
	pre[1]=count(sx,sy);pre[1].px=pre[1].py=0;
	numpre++;
	while(numpre!=0)
	{
		point w=pop();
		for(int i=0;i&lt;4;i++)
		{
			int dx=w.x+nextk[i][0];
			int dy=w.y+nextk[i][1];
			if(book[dx][dy]==0) 
			{
				map[dx][dy].x=dx;map[dx][dy].y=dy;
	    		map[dx][dy].px=w.x;
		    	map[dx][dy].py=w.y;
			}
			if(dx==ex&amp;&amp;dy==ey)
			{
				numpre=0;
				break;
			}
			if(map[dx][dy].c==1||dx&lt;1||dx&gt;n||dy&lt;1||dy&gt;m||book[dx][dy]==1) continue;
			if(judgeopen(dx,dy));
			else if(judgeclose(dx,dy,w.x,w.y));
			else push(dx,dy,w.x,w.y);
		}
	}
	point stack[N];
	memset(stack,0,sizeof(stack));
	int numberofstack=0;
	stack[1]=map[ex][ey];
	numberofstack=1;
	while(!(stack[numberofstack].px==0&amp;&amp;stack[numberofstack].py==0))
	{
		stack[numberofstack+1]=map[stack[numberofstack].px][stack[numberofstack].py];
		numberofstack++;
	}
	for(int i=numberofstack;i&gt;=1;i--) cout&lt;&lt;'('&lt;&lt;stack[i].x&lt;&lt;','&lt;&lt;stack[i].y&lt;&lt;')'&lt;&lt;endl;
	return 0;
} </pre>
<h3><span style="white-space:pre"></span>6）比较与Dijstra：</h3>
<div><span style="white-space:pre"></span>相对于Dijstra而言，BFS更具有目的性，也就是说，我们在搜索的时候根据优先队列会优先选择要扩展的点，这在图搜索中十分有用<span style="white-space:pre"></span>的，Dijstra属于盲目搜索，因为没有启发，所以搜索的时候我们事项四周进行的，没有目的性的扩展队列，所以说在图很大的时候，我<span style="white-space:pre"></span>们用启发式的搜索会更快一点</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<h2>5&#43;6.启发式A*</h2>
<h3><span style="white-space:pre"></span>1）启发式的A*算法简介：</h3>
<div><span style="white-space:pre"></span>启发式的A*算法实在BFS（最佳优先搜索）的基础上增添了所谓的耗散函数，通过耗散函数和误差估计函数之和，从而决定我们优先开<span style="white-space:pre"></span>发的顺序</div>
<h3><span style="white-space:pre"></span>2）启发式A*算法和BFS基本上原理：</h3>
<div><span style="white-space:pre"></span>这里的原理是差不多的，鄙人也总结不出来好的意见，这里援引大牛的博客就好，平局打破的思路是非常的优秀的</div>
<div><span style="white-space:pre"><a target="_blank" target="_blank" href="http://http://blog.csdn.net/free4wuyou/article/details/15676597">启发式A*以及平局打破的策略</a>（</span>我们打破平局的原因是，如果我们考虑平局的话，有可能我们会将所有的最短路径都遍历一遍，但是实 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 际上我们只需要找到一个最短路径就可以了，所以通过各种策略减少遍历的个数——本人比较倾向于计算向量内积的策略）</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<h2>7.目前的问题：</h2>
</div>
<h3><span style="white-space:pre"></span>1）SPFA如何解决负权边</h3>
<h3><span style="white-space:pre"></span>2）Floyed的动态规划原理理解</h3>
<h3><span style="white-space:pre"></span>3）Dijstra的贪心原理理解</h3>
<h3><span style="white-space:pre"></span>4）启发式算法A*的深度优化的原理<span style="white-space:pre"></span></h3>
<h3><span style="white-space:pre"></span>5）Floyed算法的路径记录策略</h3>
<h2><br>
</h2>
<h2>8.路径记录的策略：</h2>
<div><span style="white-space:pre"></span>对于图来说，我们可以构造结构体，开辟内存记录前驱，但是对于Floyed算法，暂时没有想到好的解决思路</div>
<div><span style="white-space:pre"></span>对于普通的有图的问题中，我们如果需要正向的输出路径，可以开辟栈来存储，然后反向输出，这里要注意</div>
<div><span style="white-space:pre"></span>记录前驱以后，我们每次要不断在循环中的更新前驱，还要在起点处的前驱设置特别标记，否则会找不到头</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<div><br>
</div>
<h2>9.参考文献：</h2>
<div><span style="white-space:pre"></span>《算法的乐趣》</div>
<div><span style="white-space:pre"><a target="_blank" target="_blank" href="http://http://tungfaifong.com/best-first_search/">TUNGFAIFONG</a></span></div>
<div><span style="white-space:pre"><a target="_blank" target="_blank" href="http://http://tungfaifong.com/a-star_search/">TUNGFAIFONG</a></span></div>
<div><span style="white-space:pre"><a target="_blank" target="_blank" href="http://http://blog.csdn.net/free4wuyou/article/details/15676597">free4wuyou</a></span></div>
<div><span style="white-space:pre"><a target="_blank" target="_blank" href="http://http://blog.csdn.net/shi_zyb/article/details/44833489">shi_zyb</a></span></div>
<div>&nbsp; &nbsp;</div>
<div><br>
</div>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
            <li><a href="http://blog.csdn.net/column/details/12704.html" target="_blank">算法与数据结构</a></li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>3</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=51952942" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/u012856866/article/details/38726523"  target="_blank" strategy="BlogCommendFromBaidu_0">Dijkstra算法与Prim算法的区别</a></h2>
                    <div class="summary">
                        1：

Prim是计算最小生成树的算法，比如为N个村庄修路，怎么修花销最少。

Dijkstra是计算最短路径的算法，比如从a村庄走到其他任意村庄的距离。

2：

Prim算法中有一个统计总len的...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/u012856866" target="_blank" strategy="BlogCommendFromBaidu_0"><img src="http://avatar.csdn.net/9/C/E/2_u012856866.jpg" alt="u012856866" title="u012856866"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/u012856866">u012856866</a></li>
                        <li class="time">2014-08-21 10:53</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1085</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/basaowu/article/details/51249357"  target="_blank" strategy="BlogCommendFromBaidu_1">Matlab计算最短路径及路径的个数</a></h2>
                    <div class="summary">
                        最近老板让计算最短路径及路径个数，找遍了所有工具箱，都没现成的。急死了，什么Dijkstra和Floyd都搞不定。最后，想了想，算了吧，自己编吧，反正自己用，又没有算法复杂度要求。于是自己就写了个小程...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/basaowu" target="_blank" strategy="BlogCommendFromBaidu_1"><img src="http://avatar.csdn.net/D/0/3/2_basaowu.jpg" alt="basaowu" title="basaowu"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/basaowu">basaowu</a></li>
                        <li class="time">2016-04-26 12:00</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>3198</span></li>
                    </ul>
                </dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/longshengguoji/article/details/10756003"  target="_blank" strategy="BlogCommendFromBaidu_2">Dijkstra算法详解</a></h2>
                    <div class="summary">
                        1.dijkstra算法简介
Dijkstra算法是由E.W.Dijkstra于1959年提出，又叫迪杰斯特拉算法，它应用了贪心算法模式，是目前公认的最好的求解最短路径的方法。算法解决的是有向图中单...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/longshengguoji" target="_blank" strategy="BlogCommendFromBaidu_2"><img src="http://avatar.csdn.net/F/C/0/2_longshengguoji.jpg" alt="longshengguoji" title="longshengguoji"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/longshengguoji">longshengguoji</a></li>
                        <li class="time">2013-08-31 19:03</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>100772</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/jinixin/article/details/52247763"  target="_blank" strategy="BlogCommendFromBaidu_3">dijkstra求最短路并记录路径</a></h2>
                    <div class="summary">
                        图中通过path数组来记录路径，path[i]=j表明节点i取得最小路径时，其最后一段走的是节点j到节点i。
你也许会疑惑，我想知道的是整个路径呀，记录其中的最后一段有什么用呢？
我们这样来看，pat...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/jinixin" target="_blank" strategy="BlogCommendFromBaidu_3"><img src="http://avatar.csdn.net/1/D/D/2_jinixin.jpg" alt="jinixin" title="jinixin"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/jinixin">jinixin</a></li>
                        <li class="time">2016-08-21 18:02</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1934</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/quzhongxin/article/details/45197553"  target="_blank" strategy="BlogCommendFromBaidu_4">散列（2）线性探测法和双重散列法</a></h2>
                    <div class="summary">
                        接上篇 散列的简要描述和链地址法 
解决散列冲突的方法：1. 线性探测法如果我们能够预测将要存入表中元素的数目，而且我们有足够的内存空间可以容纳带有空闲空间的所有关键字，那么使用链地址法是不值得的。我...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/quzhongxin" target="_blank" strategy="BlogCommendFromBaidu_4"><img src="http://avatar.csdn.net/C/B/5/2_quzhongxin.jpg" alt="quzhongxin" title="quzhongxin"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/quzhongxin">quzhongxin</a></li>
                        <li class="time">2015-04-22 17:08</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>2943</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/oarsman/article/details/51340478"  target="_blank" strategy="BlogCommendFromBaidu_5">四种最短路径算法对比</a></h2>
                    <div class="summary">
                        Floyd
Dijkstra
Bellman-Ford
队列优化的Bellman－ford




空间复杂度
O(N&#178;)
O(M)
O(M)
O(M)


时间复杂度
O(N&#178;)
O((M+N)lo...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/oarsman" target="_blank" strategy="BlogCommendFromBaidu_5"><img src="http://avatar.csdn.net/1/B/6/2_oarsman.jpg" alt="oarsman" title="oarsman"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/oarsman">oarsman</a></li>
                        <li class="time">2016-05-07 22:43</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1106</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/xierhacker/article/details/53463525"  target="_blank" strategy="BlogCommendFromBaidu_8">深度学习笔记五：卷积神经网络CNN(基本理论)</a></h2>
                    <div class="summary">
                        卷积神经网络基本理论
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/xierhacker" target="_blank" strategy="BlogCommendFromBaidu_8"><img src="http://avatar.csdn.net/1/1/4/2_xierhacker.jpg" alt="xierhacker" title="xierhacker"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/xierhacker">xierhacker</a></li>
                        <li class="time">2016-12-29 15:49</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1991</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/pakko/article/details/37878837"  target="_blank" strategy="BlogCommendFromBaidu_9">逻辑回归</a></h2>
                    <div class="summary">
                        什么是逻辑回归？
Logistic回归与多重线性回归实际上有很多相同之处，最大的区别就在于它们的因变量不同，其他的基本都差不多。正是因为如此，这两种回归可以归于同一个家族，即广义线性模型（gener...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/pakko" target="_blank" strategy="BlogCommendFromBaidu_9"><img src="http://avatar.csdn.net/9/A/A/2_pakko.jpg" alt="pakko" title="pakko"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/pakko">pakko</a></li>
                        <li class="time">2014-07-16 15:42</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>193254</span></li>
                    </ul>
                </dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">4</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

