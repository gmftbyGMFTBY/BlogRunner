
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/53305753"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '53305753';var commentscount = 0; var islock = false
        window.quickReplyflag = true;
        var totalFloor=0;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="1.AVL
说到AVL，我们就必须先要了解一下BSTLantian的BST总结
在了解了有关BST的性质之后，我们现在就明白了
因为在我们的插入的节点有序的情况下，我们的BST会出现偏树的情况，这会导致我们的ASL（平均查找长度）大大增加从而降低我们的查找效率
因此，我们就需要一种BST的优化版本取克服这种输入造成的弊端（现在证明，在平均情况下，出现偏树的概率大致在45.6%），所以说，我" />
    <meta name="keywords" content="" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>AVL - 自平衡二叉树 - 详解 - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">AVL - 自平衡二叉树 - 详解</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年11月23日 16:26:18</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">532</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
<h2></h2>
<h2>1.AVL</h2>
<div style="font-size:13.3333px">说到AVL，我们就必须先要了解一下BST<a target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/52081538?locationNum=2&amp;fps=1">Lantian的BST总结</a></div>
<div style="font-size:13.3333px">在了解了有关BST的性质之后，我们现在就明白了</div>
<div style="font-size:13.3333px">因为在我们的插入的节点有序的情况下，我们的BST会出现偏树的情况，这会导致我们的ASL（平均查找长度）大大增加从而降低我们的查找效率</div>
<div style="font-size:13.3333px">因此，我们就需要一种BST的优化版本取克服这种输入造成的弊端（现在证明，在平均情况下，出现偏树的概率大致在45.6%），所以说，我们的优化是非常有必要的</div>
<div style="font-size:13.3333px">因此我们需要对传统的BST进行一种平衡处理</div>
<div style="font-size:13.3333px">在这里，历史上出现了大批的优秀的自平衡二叉查找树，相对有splay，treap，AVL，SBT，RBT，很多很多，这其中最经典也是最早发明的自平衡二叉树就是我们心在要说明的AVL，也是现阶段我们的数据结构课程中选取讲解的自平衡二叉树</div>
<div style="font-size:13.3333px"><br>
</div>
<div style="font-size:13.3333px">PS:<a target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/52237338?locationNum=1&amp;fps=1">Lantian的SBT讲解</a></div>
<div style="font-size:13.3333px">本人之前曾经讲解过一种有中国大神陈启峰发明的自平衡二叉树SBT，目前来说，SBT相对于算法竞赛来说非常好实现，但是与优化后的AVL下昂比的话，我们的SBT（Size Balance Tree）因为是节点的数量域作为平衡因子，这里的话，我们牵扯到对于树的修改为虎的探讨的话，SBT自始至终都是要从底向上一直到根来进行维护的，但是AVL的平衡因子的性质决定了AVL不需要一直维护到根，我们只需要维护到当前的第一个<strong>最小不平衡子树</strong>就可以了，但是毋庸置疑，SBT相对于AVL来说非常的好写，但是我在对AVL的平衡因子的优化之后，发现其实两者的AVL,SBT的维护效率相当，并不存在明显的难易之说</div>
<div style="font-size:13.3333px"><br>
</div>
<div style="font-size:13.3333px"><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; font-size:14px; line-height:24px">AVL树得名于它的发明者 G.M. Adelson-Velsky 和 E.M. Landis，他们在 1962 年的论文《An algorithm for the organization of information》中发表了它。也是目前已知的最早的自平衡二叉树</span><br>
</div>
<h2>2.AVL's ADT</h2>
<div style="font-size:13.3333px">AVL的抽象数据类型基于BST</div>
<div style="font-size:13.3333px">先给出BST的定义：</div>
<div style="font-size:13.3333px">1.BST是一颗空树</div>
<div style="font-size:13.3333px">2.BST不是空树并且左子树的节点的大小都小于根节点，右子树节点的大小都大于根节点（在没有进行扩展的AVL平衡二叉树中，我们默认不存在键&#20540;相同的节点）</div>
<div style="font-size:13.3333px"><br>
</div>
<div style="font-size:13.3333px">AVL的ADT基于BST的ADT的定义如下：</div>
<div style="font-size:13.3333px"><pre code_snippet_id="2002846" snippet_file_name="blog_20161123_1_7487972"  name="code" class="cpp">ADT
{
    数据对象：节点
    数据关系：节点的指向关系，套用BST的定义
    数据操作：
        1.中序遍历
        2.插入
        3.删除
        4.旋转维护
        5.查找
}</pre>主要的数据操作如上：</div>
<div style="font-size:13.3333px">在这里我先来讲解一下对于AVL树的操作的时间复杂度：</div>
<h3>1.中序遍历：</h3>
<div style="font-size:13.3333px">这里我们强调中序遍历的原因就是，对于BST/AVL来说，我们定义保证了我们的中序序列一定构成一个定义的有序序列，所以说我们的中序遍历可以获取我们的当前的AVL树中有序的序列&#20540;</div>
<div style="font-size:13.3333px">时间复杂度:O(number_point)</div>
<h3>2.插入：</h3>
<div style="font-size:13.3333px">插入节点，对于我们考虑的时候需要考虑两种情况</div>
<div style="font-size:13.3333px">首先，如果插入之后我们不需要对树进行维护，那么时间复杂度同查找就是O(logn)，这是我么的平衡二叉树的性质保证的</div>
<div style="font-size:13.3333px">但是对于如果插入后节点我们需要对树进行维护的时候，我们除了O(logn)的查找操作之外，我们还需要O(c)的常数时间的旋转维护操作，乳沟我们之简简单单考虑时间复杂度的话，我们的市价复杂度都是O(logn)</div>
<h3>3.删除:</h3>
<div style="font-size:13.3333px">首先，如果我们删除之后，树的平衡因子保证了树的平衡性，那么我们其实也只需要O(logn)的时间复杂度</div>
<div style="font-size:13.3333px">但是一旦我们需要进行维护，的话，时间复杂度无非就是O(logn&#43;C)没有什么本质的影响</div>
<h3>4.查找：</h3>
<div style="font-size:13.3333px">对于AVL树的查找，因为平衡树已经保证了我们的树基本上额深度和O(logn)是同一个数量级上的，所以说我们的查找你的时间复杂度最坏的情况下也就是O(logn)</div>
<h3>5.旋转维护：</h3>
<div style="font-size:13.3333px">对于AVL树的旋转维护，因为只是牵扯到指针的修改，所以在全局范围内来看的话，时间复杂度还是简单的O(c)在大输入的情况下，我们完全可以对市价耗费进行忽略（无限接近常数阶）,我们之后会有对旋转操作详细的讲解</div>
<div style="font-size:13.3333px"><br>
</div>
<div style="font-size:13.3333px">PS:</div>
<div style="font-size:13.3333px">在接下来的AVL树的讲解过程中，我们可能会要一个小的要点：</div>
<div style="font-size:13.3333px">我们需要记住，对于平衡二叉树AVL（这里好像仅限于AVL）的平衡维护操作实际上就是尽可能保证我们的树高不变</div>
<h2>3.Point - ADT</h2>
<div style="font-size:13.3333px">我们的AVL树的节点是要非常的小心的，这里我们对接点有如下的ADT的定义：</div>
<div style="font-size:13.3333px"><pre code_snippet_id="2002846" snippet_file_name="blog_20161123_2_3170357"  name="code" class="cpp">template&lt;typename T&gt;
class point
{
	public:
		point()
		{
			left=right=NULL;
			height=0;
			freq=1;
		}
		point(T x)
		{
			dt=x;
			left=right=NULL;
			height=0;
			freq=1;
		}
		~point()   //方便测试的析构函数 
		{
			cout&lt;&lt;&quot;节点&quot;&lt;&lt;dt&lt;&lt;&quot;被删除!&quot;&lt;&lt;endl; 
		}
		inline void set_data(T x)
		{
			dt=x;
		} 
		inline T get_data()
		{
			return dt;
		}
		friend void set_height(point&lt;T&gt;* p,int ht)
		{
			p-&gt;height=ht;
		}
		friend int get_height(point&lt;T&gt;* p)
		{
			if(p == NULL) return -1; 
			else return p-&gt;height;
		}
		inline void set_freq()
		{
			freq++;
		}
		point* left;
		point* right;
	protected:
		T dt;    //数据 
		int height;   //树高 
		int freq;   //频度，扩展的AVL树的功能单元 
};</pre>这是我的代码上的对于AVL的point的描述，这里我们需要注意到，对于AVL树的平衡因子的定义</div>
<div style="font-size:13.3333px">众所周知,AVL树的书写是非常的困难的，困难的点就在于我们在平衡维护的时候，需要考虑的要点太多，不容易思考，原本的AVL树的定义的平衡因子的内容是左右子树的高度差，在这里，我将平衡因子该位当前节点的高度（距离叶子节点），这里我只需要添加set_height和get_height（定义这两个接口的必要性原因在与如果节点为空的话，我们必须要对其进行取高操作）两个几口就可以简单的取代之前的AVL的困难的树的平衡因子的定义了，非常的简便</div>
<div style="font-size:13.3333px"><br>
</div>
<div style="font-size:13.3333px">对于平衡因子定义：</div>
<div style="font-size:13.3333px">树高：</div>
<div style="font-size:13.3333px">1.叶子节点的树高是0</div>
<div style="font-size:13.3333px">2.空树的树高是-1</div>
<div style="font-size:13.3333px">3.其余点的树高由以上的内容类推</div>
<h2>4.Rotation - Maintain操作</h2>
<div style="font-size:13.3333px">对于一个平衡二叉树来说，我们我们在了解了BST之后，我们唯一需要攻破的就是这个Rotation操作了</div>
<div style="font-size:13.3333px">在广泛的定义上，我们将AVL等平衡树的维护操作采用了四种分类的旋转来代替</div>
<div style="font-size:13.3333px">参考SBT的资料来看看：</div>
<div style="font-size:13.3333px"><img src="http://img.blog.csdn.net/20131129201336156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
<div style="font-size:13.3333px">我们先来看看旋转操作：</div>
<div style="font-size:13.3333px">左旋右旋的代码如下（封装了对平衡因子的修改）：</div>
<div style="font-size:13.3333px"><pre code_snippet_id="2002846" snippet_file_name="blog_20161123_3_6310683"  name="code" class="cpp">template&lt;typename T&gt;
void AVL&lt;T&gt;::left_rotation(point&lt;T&gt;*&amp; p)
{
	point&lt;T&gt;* k=p-&gt;right;
	p-&gt;right=k-&gt;left;
	k-&gt;left=p;
	set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);
	set_height(k,max(get_height(k-&gt;left),get_height(k-&gt;right))+1);
	p=k;
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::right_rotation(point&lt;T&gt;*&amp; p)
{
	point&lt;T&gt;* k=p-&gt;left;
	p-&gt;left=k-&gt;right;
	k-&gt;right=p;
	set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);
	set_height(k,max(get_height(k-&gt;left),get_height(k-&gt;right))+1);
	p=k;
}</pre>我们可以看到，对于AVL的核心旋转操作来说，无非就是对指针的修改而已,算法非常的简明高效</div>
<h3>1.Case 1:左左</h3>
<div><br>
</div>
<p><img src="http://pic002.cnblogs.com/images/2012/457289/2012111323091813.jpg" alt=""></p>
<p><span style="font-family:FangSong_GB2312"><span style="font-size:18.018px; line-height:37.8378px">单旋转是针对于左左和右右这两种情况的解决方案，这两种情况是对称的，只要解决了左左这种情况，右右就很好办了。图3是左左情况的解决方案，节点k2不满足平衡特性，因为它的左子树k1比右子树Z深2层，而且k1子树中，更深的一层的是k1的左子树X子树，所以属于左左情况。</span><br>
</span></p>
<p><span style="font-size:18.018px; line-height:37.8378px"></span></p>
<p style="margin:10px auto; font-size:18.018px; line-height:37.8378px"><span style="font-family:FangSong_GB2312">为使树恢复平衡，我们把k2（<span style="color:rgb(255,0,0)">此处可能是作者笔误，应该为k1</span>）变成这棵树的根节点，因为k2大于k1，把k2置于k1的右子树上，而原本在k1右子树的Y大于k1，小于k2，就把Y置于k2的左子树上，这样既满足了二叉查找树的性质，又满足了平衡二叉树的性质。</span></p>
<p style="margin:10px auto; font-size:18.018px; line-height:37.8378px"><span style="font-family:FangSong_GB2312">这样的操作只需要一部分指针改变，结果我们得到另外一颗二叉查找树，它是一棵AVL树，因为X向上一移动了一层，Y还停留在原来的层面上，Z向下移动了一层。整棵树的新高度和之前没有在左子树上插入的高度相同，插入操作使得X高度长高了。因此，由于这颗子树高度没有变化，所以通往根节点的路径就不需要继续旋转了。</span></p>
<h3 style="margin:10px auto; font-size:18.018px; line-height:37.8378px"><span style="font-family:FangSong_GB2312">2.Case 2：左右</span></h3>
<div><span style="font-family:FangSong_GB2312"><img src="http://pic002.cnblogs.com/images/2012/457289/2012111323093397.jpg" alt=""><br>
</span></div>
<div><span style="font-family:FangSong_GB2312">对于左右的情况，我们对于树的左节点为根进行左旋操作，然后对跟进行右旋操作，最后得到根子树就会被自动的修改完成</span></div>
<div><span style="font-family:FangSong_GB2312">对于右右和右左的情况和上面两种是镜像的，没有必要赘语了</span></div>
<h2><span style="font-family:FangSong_GB2312">5.模板类代码：</span></h2>
<div><span style="font-family:FangSong_GB2312"></span><pre code_snippet_id="2002846" snippet_file_name="blog_20161123_4_8263313"  name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstring&quot;
#include&quot;cstdlib&quot;
#include&quot;cmath&quot;
#define N 100005

using namespace std;

template&lt;typename T&gt;
class point
{
	public:
		point()
		{
			left=right=NULL;
			height=0;
			freq=1;
		}
		point(T x)
		{
			dt=x;
			left=right=NULL;
			height=0;
			freq=1;
		}
		~point()   //方便测试的析构函数 
		{
			cout&lt;&lt;&quot;节点&quot;&lt;&lt;dt&lt;&lt;&quot;被删除!&quot;&lt;&lt;endl; 
		}
		inline void set_data(T x)
		{
			dt=x;
		} 
		inline T get_data()
		{
			return dt;
		}
		friend void set_height(point&lt;T&gt;* p,int ht)
		{
			p-&gt;height=ht;
		}
		friend int get_height(point&lt;T&gt;* p)
		{
			if(p == NULL) return -1; 
			else return p-&gt;height;
		}
		inline void set_freq()
		{
			freq++;
		}
		point* left;
		point* right;
	protected:
		T dt;    //数据 
		int height;   //树高 
		int freq;   //频度，扩展的AVL树的功能单元 
};

template&lt;typename T&gt;
class AVL
{
	public:
		AVL()
		{
			root=NULL;
			number_point=0;
		}
		~AVL()
		{
			clear(root);
		}
		void left_rotation(point&lt;T&gt;*&amp;);
		void right_rotation(point&lt;T&gt;*&amp;); 
		void mid_order(point&lt;T&gt;*); 
		void clear(point&lt;T&gt;*);   
		point&lt;T&gt;* find(point&lt;T&gt;*,T);
		void insert(point&lt;T&gt;*&amp;,T);     //支持针对子树的操作，灵活性更高 
		bool do_insert(T);
		bool delete_(point&lt;T&gt;*&amp;,T);   
		void do_delete_(point&lt;T&gt;*&amp;,point&lt;T&gt;*); 
		inline point&lt;T&gt;* get_father(point&lt;T&gt;* p)   //辅助函数，获取父亲 
		{
			point&lt;T&gt;* k=root;
			point&lt;T&gt;* help=root;
			while(k != p)
			{
				help=k;
				if(k==NULL) return NULL;
				else if(k-&gt;get_data() &gt; p-&gt;get_data()) k=k-&gt;left;
				else if(k-&gt;get_data() &lt; p-&gt;get_data()) k=k-&gt;right;
			} 
			return help;
		}
		void test_print(point&lt;T&gt;*);
		inline point&lt;T&gt;* return_root()
		{
			return root;
		}
		inline point&lt;T&gt;*&amp; returnroot()
		{
			return root;
		}
	protected:
		point&lt;T&gt;* root;
		int number_point;    
};

template&lt;typename T&gt;
void AVL&lt;T&gt;::test_print(point&lt;T&gt;* p)   //层序 
{
	point&lt;T&gt;* queue[N];
	int head=1;
	int tail=2;
	if(p==NULL) return ;   //空树 
	queue[1]=p;
	while(head!=tail)
	{
		if(queue[head]-&gt;left!=NULL) queue[tail++]=queue[head]-&gt;left;
		if(queue[head]-&gt;right!=NULL) queue[tail++]=queue[head]-&gt;right;
		head++;
	}
	for(int i=1;i&lt;tail;i++) cout&lt;&lt;queue[i]-&gt;get_data()&lt;&lt;' ';
	cout&lt;&lt;endl; 
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::mid_order(point&lt;T&gt;* p)
{
	if(p==NULL) return ;
	else
	{
		AVL&lt;T&gt;::mid_order(p-&gt;left);
		cout&lt;&lt;p-&gt;get_data()&lt;&lt;' ';
		AVL&lt;T&gt;::mid_order(p-&gt;right);
	}
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::clear(point&lt;T&gt;* p)
{
	if(p==NULL) return ;
	else
	{
		AVL&lt;T&gt;::clear(p-&gt;left);
		AVL&lt;T&gt;::clear(p-&gt;right);
		delete p;
	}
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::left_rotation(point&lt;T&gt;*&amp; p)
{
	point&lt;T&gt;* k=p-&gt;right;
	p-&gt;right=k-&gt;left;
	k-&gt;left=p;
	set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);
	set_height(k,max(get_height(k-&gt;left),get_height(k-&gt;right))+1);
	p=k;
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::right_rotation(point&lt;T&gt;*&amp; p)
{
	point&lt;T&gt;* k=p-&gt;left;
	p-&gt;left=k-&gt;right;
	k-&gt;right=p;
	set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);
	set_height(k,max(get_height(k-&gt;left),get_height(k-&gt;right))+1);
	p=k;
}

template&lt;typename T&gt;
point&lt;T&gt;* AVL&lt;T&gt;::find(point&lt;T&gt;* p,T x)
{
	point&lt;T&gt;* k=NULL;
	if(p==NULL) return NULL;
	else if(x &gt; p-&gt;get_data()) 
	{
		if((k=find(p-&gt;right,x))==NULL) return NULL;
		else return k;
	}
	else if(x &lt; p-&gt;get_data())
	{
		if((k=find(p-&gt;left,x))==NULL) return NULL;
		else return k;
	}
	else return p;
}

template&lt;typename T&gt;
bool AVL&lt;T&gt;::do_insert(T x)
{
	point&lt;T&gt;* k=NULL;
	k=find(root,x);
	AVL&lt;T&gt;::insert(root,x);
	if(k==NULL) 
	{
		number_point++;
		return true;
	}
	else return false;
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::insert(point&lt;T&gt;*&amp; p,T x)
{
	if(p==NULL)
	{
		p=new point&lt;T&gt;(x);
		return ;
	}
	else if(p-&gt;get_data() &gt; x)
	{
		insert(p-&gt;left,x);
		if(get_height(p-&gt;left) - get_height(p-&gt;right) == 2)
		{
			if(x &gt; p-&gt;left-&gt;get_data())
			{
				AVL&lt;T&gt;::left_rotation(p-&gt;left);
				AVL&lt;T&gt;::right_rotation(p); 
			}
			else
			{
				AVL&lt;T&gt;::right_rotation(p); 
			}
		}
	}
	else if(p-&gt;get_data() &lt; x)
	{
		insert(p-&gt;right,x);
		if(get_height(p-&gt;left) - get_height(p-&gt;right) == -2)
		{
			if(x &gt; p-&gt;right-&gt;get_data())
			{
				AVL&lt;T&gt;::left_rotation(p);
			}
			else
			{
				AVL&lt;T&gt;::right_rotation(p-&gt;right);
				AVL&lt;T&gt;::left_rotation(p);
			}
		}
	}
	else 
	{
		p-&gt;set_freq();
	}
	set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);
}

template&lt;typename T&gt; 
bool AVL&lt;T&gt;::delete_(point&lt;T&gt;*&amp; p,T x)
{
	point&lt;T&gt;* k=find(p,x);
	if(k-&gt;get_data() == x)
	{
		number_point--; 
		AVL&lt;T&gt;::do_delete_(p,k);
		return true;
	}
	else return false;   //删除失败 
}

template&lt;typename T&gt;
void AVL&lt;T&gt;::do_delete_(point&lt;T&gt;*&amp; p,point&lt;T&gt;* k)
{
	if(p-&gt;get_data() &gt; k-&gt;get_data())
	{
	    AVL&lt;T&gt;::do_delete_(p-&gt;left,k);
	    if(get_height(p-&gt;left) - get_height(p-&gt;right) == -2)
	    {
	    	if(p-&gt;right-&gt;left!=NULL &amp;&amp; get_height(p-&gt;right-&gt;left)&gt;get_height(p-&gt;right-&gt;right) )
	        {
	            AVL&lt;T&gt;::right_rotation(p-&gt;right);
				AVL&lt;T&gt;::left_rotation(p); 	 	
			}
			else
			{
				AVL&lt;T&gt;::left_rotation(p);
			}
		}
	}
	else if(p-&gt;get_data() &lt; k-&gt;get_data())
	{
		AVL&lt;T&gt;::do_delete_(p-&gt;right,k);
		if(get_height(p-&gt;left) - get_height(p-&gt;right) == 2)
		{
			if(p-&gt;left-&gt;right!=NULL &amp;&amp; get_height(p-&gt;left-&gt;right)&gt;get_height(p-&gt;left-&gt;left))
			{
				AVL&lt;T&gt;::left_rotation(p-&gt;left);
				AVL&lt;T&gt;::right_rotation(p); 
			}
			else
			{
				AVL&lt;T&gt;::right_rotation(p);
			}
		}
	}
	else
	{
		if(p-&gt;left != NULL &amp;&amp; p-&gt;right != NULL)
		{
			point&lt;T&gt;* temp=p-&gt;right;
			while(temp-&gt;left!=NULL) temp=temp-&gt;left;
			p-&gt;set_data(temp-&gt;get_data());
			AVL&lt;T&gt;::do_delete_(p-&gt;right,temp);
			if(get_height(p-&gt;left) - get_height(p-&gt;right) == 2)   //选择删除右子树的替代节点 
			{
				if(p-&gt;left-&gt;right!=NULL &amp;&amp; get_height(p-&gt;left-&gt;right)&gt;get_height(p-&gt;left-&gt;left))
		    	{
	    			AVL&lt;T&gt;::left_rotation(p-&gt;left);
	    			AVL&lt;T&gt;::right_rotation(p); 
	    		}
	    		else
    			{
    				AVL&lt;T&gt;::right_rotation(p);
	    		}
			}
		}
		else
		{
			point&lt;T&gt;* w=p;
			if(p-&gt;left == NULL)
			{
				p=p-&gt;right;
				delete w;
			}
			else
			{
				p=p-&gt;left;
				delete w;
			}
		}
	}
	if(p!=NULL) set_height(p,max(get_height(p-&gt;left),get_height(p-&gt;right))+1);   //回溯维护高度域 
}

int main()  //测试入口 
{
	//整形测试
	/*
	AVL&lt;int&gt; test; 
	test.test_print(test.return_root());
	cout&lt;&lt;&quot;节点个数&quot;&lt;&lt;endl;
	int t;
	cin&gt;&gt;t;
	for(int i=1;i&lt;=t;i++)
	{
		int y;
		cin&gt;&gt;y;
		bool judge=test.do_insert(y);
		if(judge==true) cout&lt;&lt;&quot;节点插入成功&quot;&lt;&lt;endl;
		else cout&lt;&lt;&quot;尝试插入已经存在的同键节点，节点频度增加&quot;&lt;&lt;endl;
		test.test_print(test.return_root());cout&lt;&lt;endl;
	}
	test.mid_order(test.return_root());
	cout&lt;&lt;endl;
	test.test_print(test.return_root());
	
	test.delete_(test.returnroot(),37);
	test.test_print(test.return_root());cout&lt;&lt;endl;
	test.delete_(test.returnroot(),53);
	test.test_print(test.return_root());cout&lt;&lt;endl;
	test.delete_(test.returnroot(),93);
	test.test_print(test.return_root());cout&lt;&lt;endl;*/
    //浮点型测试
	/*AVL&lt;double&gt; test;
	int t;
	cout&lt;&lt;&quot;节点个数&quot;&lt;&lt;endl;
	cin&gt;&gt;t;
	while(t--)
	{
		double x;
		cin&gt;&gt;x;
		bool judge=test.do_insert(x);
		if(judge == true) cout&lt;&lt;&quot;节点插入成功&quot;&lt;&lt;endl;
		else cout&lt;&lt;&quot;节点插入失败&quot;&lt;&lt;endl;
		test.test_print(test.returnroot());cout&lt;&lt;endl;
	}*/
	//对于其他的自定义类型，我们还需要自己对于相应的 &gt; , &lt; ,=运算符进行运算符重载就ok，实现一个比较大小的接口就ok 
	return 0;
}
</pre><br>
<br>
</div>
<div></div>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
            <li><a href="http://blog.csdn.net/column/details/12704.html" target="_blank">算法与数据结构</a></li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>0</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=53305753" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/wo16fafafa/9603827" target="_blank" strategy="BlogCommendFromCsdn_0"><img class="maxwidth" src="http://download.csdn.net/images/minetype/unkonw.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/wo16fafafa/9603827" target="_blank" strategy="BlogCommendFromCsdn_0">平衡二叉树（AVL树）</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2016-08-15 17:18</li>
					  <li class="visited_num fileSize">5KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/wo16fafafa/9603827">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/u012402739/7243995" target="_blank" strategy="BlogCommendFromCsdn_1"><img class="maxwidth" src="http://download.csdn.net/images/minetype/rar.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/u012402739/7243995" target="_blank" strategy="BlogCommendFromCsdn_1">AVL平衡二叉树</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2014-04-24 11:01</li>
					  <li class="visited_num fileSize">8.40MB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/u012402739/7243995">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/her__0_0/article/details/73695446"  target="_blank" strategy="BlogCommendFromCsdn_2">AVL树详解&amp;面试题-判断一棵树是否是平衡二叉树</a></h2>
                    <div class="summary">
                        上次写了关于二叉搜索树的分析，但是二叉搜索树有一个缺陷，就是当插入一个有序（或接近有序）的序列时，二叉搜索树就相当于一个链表了，搜索效率会特别低。那么，如何来改进呢？这就引入了AVL树（高度平衡二叉树...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/her__0_0" target="_blank" strategy="BlogCommendFromCsdn_2"><img src="http://avatar.csdn.net/E/A/3/2_her__0_0.jpg" alt="her__0_0" title="her__0_0"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/her__0_0">her__0_0</a></li>
                        <li class="time">2017-06-24 22:57</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>467</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/u013504720/9495620" target="_blank" strategy="BlogCommendFromCsdn_3"><img class="maxwidth" src="http://download.csdn.net/images/minetype/unkonw.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/u013504720/9495620" target="_blank" strategy="BlogCommendFromCsdn_3">AVL，平衡二叉树模板</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2016-04-19 12:10</li>
					  <li class="visited_num fileSize">4KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/u013504720/9495620">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/a_1937/5318442" target="_blank" strategy="BlogCommendFromCsdn_4"><img class="maxwidth" src="http://download.csdn.net/images/minetype/rar.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/a_1937/5318442" target="_blank" strategy="BlogCommendFromCsdn_4">平衡二叉树 AVL</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2013-04-30 23:29</li>
					  <li class="visited_num fileSize">2KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/a_1937/5318442">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/sysu_arui/article/details/7897017"  target="_blank" strategy="BlogCommendFromCsdn_5">平衡二叉树(AVL)的插入和删除详解(上)</a></h2>
                    <div class="summary">
                        AVL树维基百科：http://zh.wikipedia.org/wiki/AVL树
在计算机科学中，AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/sysu_arui" target="_blank" strategy="BlogCommendFromCsdn_5"><img src="http://avatar.csdn.net/7/7/7/2_sysu_arui.jpg" alt="sysu_arui" title="sysu_arui"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/sysu_arui">sysu_arui</a></li>
                        <li class="time">2012-08-22 19:02</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>12722</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/hanlizhong85/9841153" target="_blank" strategy="BlogCommendFromCsdn_6"><img class="maxwidth" src="http://download.csdn.net/images/minetype/unkonw.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/hanlizhong85/9841153" target="_blank" strategy="BlogCommendFromCsdn_6">平衡二叉树-AVL树的实现</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2017-05-12 21:29</li>
					  <li class="visited_num fileSize">29KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/hanlizhong85/9841153">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/guoweimelon/article/details/50904302"  target="_blank" strategy="BlogCommendFromCsdn_7">平衡二叉树AVL详解</a></h2>
                    <div class="summary">
                        一、平衡二叉树的定义

平衡二叉树（Balanced Binary Tree）又被称为AVL树，它且具有以下性质：


（1）它是一棵空树或它的左右两个子树的高度差的绝对值不超过1；


（2）并且左...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/guoweimelon" target="_blank" strategy="BlogCommendFromCsdn_7"><img src="http://avatar.csdn.net/4/B/9/2_guoweimelon.jpg" alt="guoweimelon" title="guoweimelon"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/guoweimelon">guoweimelon</a></li>
                        <li class="time">2016-03-16 13:25</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>312</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/qq_27678917/article/details/52517255"  target="_blank" strategy="BlogCommendFromCsdn_8">平衡二叉树（AVL）</a></h2>
                    <div class="summary">
                        平衡二叉树（Balanced Binary Tree）是二叉树的一个进化体，由于它是由G.M. Adelson-Velsky 和 E.M. Landis于1962年发明的，因此也被称为AVL树。AVL...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/qq_27678917" target="_blank" strategy="BlogCommendFromCsdn_8"><img src="http://avatar.csdn.net/4/C/6/2_qq_27678917.jpg" alt="qq_27678917" title="qq_27678917"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/qq_27678917">qq_27678917</a></li>
                        <li class="time">2016-09-12 21:04</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>150</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/sysu_arui/article/details/7921498"  target="_blank" strategy="BlogCommendFromCsdn_9">平衡二叉树(AVL)的另一种C++实现</a></h2>
                    <div class="summary">
                        平衡二叉树(AVL)的插入和删除详解(上)：http://blog.csdn.net/sysu_arui/article/details/7897017
平衡二叉树(AVL)的插入和删除详解(下)：...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/sysu_arui" target="_blank" strategy="BlogCommendFromCsdn_9"><img src="http://avatar.csdn.net/7/7/7/2_sysu_arui.jpg" alt="sysu_arui" title="sysu_arui"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/sysu_arui">sysu_arui</a></li>
                        <li class="time">2012-08-29 18:51</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1774</span></li>
                    </ul>
                </dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">1</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

