
<!DOCTYPE html>
<html>
<head>
            <link rel="canonical" href="http://blog.csdn.net/ltyqljhwcm/article/details/52237338"/> 

    <script type="text/javascript">
        var username = "ltyqljhwcm";var _blogger = username;var blog_address = "http://blog.csdn.net/ltyqljhwcm";var static_host = "http://static.blog.csdn.net";
        var currentUserName = ""; var fileName = '52237338';var commentscount = 0; var islock = false
        window.quickReplyflag = true;
        var totalFloor=0;
                
                 var isBole = false;
                
                
                 var isDigg = false;
                
          
             var isExpert=false;
          
    </script>

<meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <script src="http://c.csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/static/css/avatar.css">
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
    <link rel="stylesheet" href="http://static.blog.csdn.net/Skin/skin3-template/css/style.css?v=2017.032">
    <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">

    <script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/fonts/iconfont.js"></script>
    <script src="//csdnimg.cn/rabbit/exposure-click/main.js?v1.15.23"></script>
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking_for_recommend.js?v=0911" charset="utf-8"></script>
    <script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js" charset="utf-8"></script>
 
    <link rel="stylesheet" href="http://static.blog.csdn.net/code/prettify.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/code/prettify.js"></script>
<script src="http://dup.baidustatic.com/js/ds.js"></script>
    <script type="text/javascript">

        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end



    </script>
    <meta name="description" content="优劣：
优点：查找的时间复杂度：O(logn)非常高效的查找速度
缺点：对于存在部分有序的输入序列，会导致BST偏向于偏树，进而使得树的深度逐渐变大，导致查找速度不断退化，最坏的退化情况是退化成双向链表

引出：
对于BST的缺点，我们需要克服，我们最终需要的而是一种技能高效的查找数据又可以避免特殊的输入序列而导致的BST 的退化，所以这时候，我们引入了一种新的数据结构——自平衡二叉树，通过不同的操作，是的，这种进化过得BST可以拥有自动调节树高的能力，是的我们查找的时间复杂度稳定在O(logn)附近，避免" />
    <meta name="keywords" content="二叉树,算法" />
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">


    <title>从BST到SBT（田劲峰老师论文读后感）6. - CSDN博客</title>
</head>
<body>
<script id="toolbar-tpl-scriptId" prod="download" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="http://blog.csdn.net"></script>

<div class="container clearfix">
    <main>
        <article>
            <h1 class="csdn_top">从BST到SBT（田劲峰老师论文读后感）6.</h1>
            <div class="article_bar clearfix">
                <div class="artical_tag">
                    <span class="original">原创</span>
                    <span class="time">2016年08月18日 08:28:08</span>
                </div>
				<ul class="article_tags clearfix csdn-tracking-statistics" data-mod="popu_377">
					<li class="tit">标签：</li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=二叉树&t=blog" target="_blank">二叉树</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=算法&t=blog" target="_blank">算法</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=优化&t=blog" target="_blank">优化</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=数据结构&t=blog" target="_blank">数据结构</a> <span>/</span></li>
					
					<li><a href="http://so.csdn.net/so/search/s.do?q=c语言&t=blog" target="_blank">c语言</a> <span>/</span></li>
					
				</ul>
                <ul class="right_bar">
                    <li><button class="btn-noborder"><i class="icon iconfont icon-read"></i><span class="txt">672</span></button></li>
                    <!--<li><button class="btn-noborder"><i class="icon iconfont icon-dashang-"></i><span class="txt">0</span></button></li>-->

                    <li class="edit">
                        <a class="btn-noborder" href="" >
                            <i class="icon iconfont icon-bianji"></i><span class="txt">编辑</span>
                        </a>
                    </li>
                    <li class="del">
                        <a class="btn-noborder" onclick="javascript:deleteArticle(fileName);return false;">
                            <i class="icon iconfont icon-shanchu"></i><span class="txt">删除</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div id="article_content" class="article_content csdn-tracking-statistics" data-mod="popu_307" data-dsm="post">
                
<h2>1.致歉：</h2>
<div>最近事务过于繁多，更新的次数变得缓慢了不少，但是我至少在继续，继续努力</div>
<div>之后，由于田劲峰老师的论文的证明非常严谨，我看了很长时间仍然是不得精华，只能是将作为初学者该掌握的都掌握了，至于证明正确性和复杂度，实在是难以参透，日后等学习算法导论的时候，有能力再回来看证明，并且，终于可以开始步入正轨了</div>
<h2>2.什么是BST：</h2>
<div>BST全称是二叉查找树，字面意思很显而易见，这是我们为了查找而开发的一种优秀的查找数据结构</div>
<div>如果还没有理解过二叉查找树，<a target="_blank" target="_blank" href="http://blog.csdn.net/ltyqljhwcm/article/details/52081538">欢迎点击这里</a>来进行初步学习</div>
<div><br>
</div>
<div>在这里我们先进行二叉查找树的一些简要的解析，进而引出我们的主要内容——自平衡二叉树之一的SBT</div>
<div><br>
</div>
<div>性质：</div>
<div>1.是一颗空树</div>
<div>2.非空树并且左子树所有的节点的数据都小于根节点</div>
<div>&nbsp; &nbsp;非空树并且右子树所有的节点的数据都大于根节点</div>
<div>3.BST内不存在相同键&#20540;的恋歌节点</div>
<div>4.根节点的左右子树都是BST</div>
<div><br>
</div>
<div>优劣：</div>
<div>优点：查找的时间复杂度：O(logn)非常高效的查找速度</div>
<div>缺点：对于存在部分有序的输入序列，会导致BST偏向于偏树，进而使得树的深度逐渐变大，导致查找速度不断退化，最坏的退化情况是退化成双向链表</div>
<div><br>
</div>
<div>引出：</div>
<div>对于BST的缺点，我们需要克服，我们最终需要的而是一种技能高效的查找数据又可以避免特殊的输入序列而导致的BST 的退化，所以这时候，我们引入了一种新的数据结构——自平衡二叉树，通过不同的操作，是的，这种进化过得BST可以拥有自动调节树高的能力，是的我们查找的时间复杂度稳定在O(logn)附近，避免特殊的序列而差生的退化</div>
<div><br>
</div>
<div>在众多的自平衡二叉树中——相对于好实现的，在算法竞赛中常用的要数我国大神陈启峰发明的SBT（size balance tree），相对于treap，红黑树，splay，AVL等一些自平衡二叉树来说，SBT好实现，并且其中的核心操作只有Maintain操作，Maintain操作的高效和灵活性成为SBT流行的原因</div>
<h2>3.SBT的ADT</h2>
<div>性质：</div>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_1_5485322"  code_snippet_id="1837882" snippet_file_name="blog_20160818_1_5485322" name="code" class="cpp">1.size[left[p]]&gt;=size[left[right[p]]]/size[right[right[p]]]
2.size[right[p]]&gt;=size[left[left[p]]]/size[right[left[p]]]</pre></div>
<h3>1.数据结构的选择：</h3>
<div><span style="font-size:13.3333px">SBT的实现来说，经过本博主的长时间的考虑，私以为，SBT用数组来实现是非常容易并且好考虑的，通过自己亲自实现链式的SBT发现，非常困难，而且对于算法的理解有所影响，所以说，我们这里采用数组来实现，在这里我们在C&#43;&#43;代码中采用了引用来进行传址，这一点是非常的核心的，我们是必须要这么做的，在下面的代码中我会讲解这一点的必要性</span><br>
</div>
<h3><span style="font-size:13.3333px">2.ADT</span></h3>
<div>成员变量：</div>
<div><span style="font-size:13.3333px">//首先我们虽然不列举出来，但是实际上，在我们思考的时候我们要注意，我们要抽象出一段假想的空间，这一段空间是顺序的1-N，代表我们的输入的顺序</span></div>
<div><span style="font-size:13.3333px">left[i]<span style="white-space:pre"> </span>
第i次输入的节点的左节点的输入的次序（注意联系上面的那段假想的数据空间）</span></div>
<div><span style="font-size:13.3333px">right[i]<span style="white-space:pre"> </span>
第i次输入的节点的右节点的输入的次序</span></div>
<div><span style="font-size:13.3333px">size[i]<span style="white-space:pre"> </span>
第i次输入的节点为根的子树的节点的总数目，这个size域是SBT非常重要的核心数据</span></div>
<div><span style="font-size:13.3333px">key[i]<span style="white-space:pre"> </span>
第i次输入的节点的键&#20540;</span></div>
<div><span style="font-size:13.3333px">num<span style="white-space:pre"> </span>该SBT的节点总数</span></div>
<div><span style="font-size:13.3333px">root<span style="white-space:pre"> </span>
该SBT的根节点的输入的次序</span></div>
<div><span style="font-size:13.3333px">//我们根据不同的操作获得的输入次序为自变量，可以轻松的得到该输入次序的输入元素的键&#20540;和size域</span></div>
<div><span style="font-size:13.3333px"><br>
</span></div>
<div><span style="font-size:13.3333px">函数：</span></div>
<div><span style="font-size:13.3333px">最核心的两个：(根节点子树左右旋操作)</span></div>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_2_959963"  code_snippet_id="1837882" snippet_file_name="blog_20160818_2_959963" name="code" class="cpp">left_rotation(int&amp;)
right_rotation(int&amp;)</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_3_9465464"  code_snippet_id="1837882" snippet_file_name="blog_20160818_3_9465464" name="code" class="cpp">Maintain(int&amp;,bool) //O(1)均摊时间复杂度</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_4_4831421"  code_snippet_id="1837882" snippet_file_name="blog_20160818_4_4831421" name="code" class="cpp">insert(int&amp;,int);</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_5_7448360"  code_snippet_id="1837882" snippet_file_name="blog_20160818_5_7448360" name="code" class="cpp">delete_(int&amp;,int,bool);</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_6_2257910"  code_snippet_id="1837882" snippet_file_name="blog_20160818_6_2257910" name="code" class="cpp">find(int&amp;,int)</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_7_2399613"  code_snippet_id="1837882" snippet_file_name="blog_20160818_7_2399613" name="code" class="cpp">select(int&amp;,int)</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_8_2541317"  code_snippet_id="1837882" snippet_file_name="blog_20160818_8_2541317" name="code" class="cpp">after(int&amp;,int)</pre><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_9_9826101"  code_snippet_id="1837882" snippet_file_name="blog_20160818_9_9826101" name="code" class="cpp">pre(int&amp;,int)</pre>
<h3>3.核心旋转操作解析：</h3>
<div><img src="http://img.blog.csdn.net/20131129201336156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
<div>1.左旋：</div>
<div><br>
</div>
先来看看左旋操作，顾名思义，左旋我们相当于是把y提高，把x压下去，目的是可能y的size域过大，将y的比较对象降低（之后哦我们呢会看到，现在不理解这句话没关系）</div>
<div>其实这里的旋转操作就相当于是一系列的指针的操作</div>
<div>代码如下：</div>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_10_8015958"  code_snippet_id="1837882" snippet_file_name="blog_20160818_10_8015958" name="code" class="cpp">void SBT::left_rotation(int&amp; p)  //我们已经指定了x指针，要进行操作还需要指向y的指针
{
	int k=right[p];   //确定指向y的指针k
	right[p]=left[k];    //x右儿子指向b
	left[k]=p;    //y的左儿子指向x
	size[k]=size[p];      //因为k这里操作完之后，相当于是y取代了x的位置，所以说，size域也应该是没变之前的x的size域
	size[p]=size[left[p]]+size[right[p]]+1;    //理所应当
	p=k;     //这里的转换牵扯到引用
}</pre>ps：在这里，我对引用的必要性做一下解释，如果没有用引用，p在这里只是一个随机变量，p的任何改变是不会影响到上一层调用函数的形参表中的&#20540;得，所以我们之后需要将上一层的形参表中的指针的指向同步修改，就必须采用引用</div>
<div><br>
</div>
<div>2.右旋：</div>
<div>原理同左旋：</div>
<div>代码如下：</div>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_11_9237457"  code_snippet_id="1837882" snippet_file_name="blog_20160818_11_9237457" name="code" class="cpp">void SBT::right_rotation(int&amp; p)
{
	int k=left[p];
	left[p]=right[k];
	right[k]=p;
	size[k]=size[p];
	size[p]=size[left[p]]+size[right[p]]+1;
	p=k;
}</pre>
<h3>4.最具活力的Maintain操作</h3>
<div>maintain操作就是根据不同的不平衡情况从而采取不同的一系列的旋转操作</div>
<div>首先明确一点，在不平衡以前，始终是一颗SBT</div>
<div>1.Case1：</div>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_12_1015364"  code_snippet_id="1837882" snippet_file_name="blog_20160818_12_1015364" name="code" class="cpp">size[left[left[p]]]&gt;size[right[p]]</pre>
<div><img src="http://img.blog.csdn.net/20131129202211734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
</div>
<div><br>
这里就是size[A]&gt;size[R]</div>
<div>首先这里A与R比较，我们为了保持平衡，通过右旋操作把A拉高</div>
<div><img src="http://img.blog.csdn.net/20131129203355843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
这时候A是与B和R比较，因为size[A]&gt;size[R]，所以说只有两种情况不平衡</div>
<div>1.size[A]&lt;size[B]</div>
<div>2.size[B]&lt;size[C]或者size[B]&lt;size[D]<br>
</div>
<div>有人这里可能会问，有没有可能<span style="font-size:13.3333px">size[B]&gt;=size[C]，size[B]&gt;=size[D]同时不成立，在这里通过反证法证明是不会的</span></div>
<div><span style="font-size:13.3333px">证明如下：</span></div>
<div><span style="font-size:13.3333px"></span><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_13_2760251"  code_snippet_id="1837882" snippet_file_name="blog_20160818_13_2760251" name="code" class="cpp">条件：
size[A]&gt;size[R]
size[B]&lt;size[C]
size[B]&lt;size[D]
size[B]&gt;size[left[A]]   //这两点的原因是，在不平衡之前，原树是一颗SBT
size[B]&gt;size[right[A]]

结论：
size[left[A]]+size[right[A]]+1&lt;size[C]+size[D]+1=size[R]
=&gt;size[A]&lt;size[R]
与条件相违背，说明两种情况不能同时成立</pre>之后我们再次进行递归定义维护Maintain(T)，因为Maintain(T)维护之后，L树的右儿子的左右子树就变得不可预料了，我们不知道其和A的size关系，所以说，还要再次用Maintain(L)维护以T为根的子树，之后维护停止，所有的操作都是常数时间的</div>
<div><span style="font-size:13.3333px"><br>
</span></div>
<div><span style="font-size:13.3333px">2.Case2:</span></div>
<div><span style="font-size:13.3333px"></span><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_14_2901955"  code_snippet_id="1837882" snippet_file_name="blog_20160818_14_2901955" name="code" class="cpp">size[right[left[p]]]&gt;size[right[p]]</pre><img src="http://img.blog.csdn.net/20131129203745125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
<br>
在这里就是size[B]&gt;size[R]</div>
<div>首先我们左旋，将不平衡性转化到Case1的情况</div>
<div><img src="http://img.blog.csdn.net/20131129203857906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
<div>之后同Case1,先右旋：</div>
<div><img src="http://img.blog.csdn.net/20131129203924718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</div>
<div>因为多次操作之后边的情况过于复杂，我们直接先Maintain(L),再Maintain(T),然后Maintain(B)</div>
<div>3.Case3,Case4和Case1,2是镜像对称，这里操作原理都是一样的，就不过多赘述了</div>
<h3>5.其他有用的操作：</h3>
<div>在之后附上的代码中解析</div>
<div><br>
</div>
<h2>4.代码：</h2>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160818_15_3251402"  code_snippet_id="1837882" snippet_file_name="blog_20160818_15_3251402" name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstring&quot;
#include&quot;cstdlib&quot;
#define N 1000

using namespace std;

class SBT
{
	public:
		SBT()
		{
			memset(size,0,sizeof(size));
			memset(left,0,sizeof(left));
			memset(right,0,sizeof(right));
			memset(key,0,sizeof(key));
			num=root=0;
		}
		void left_rotation(int&amp;);
		void right_rotation(int&amp;);
		void insert(int&amp;,int);
		int delete_(int&amp;,int,bool);   //没有找到要烧出的元素，返回-1，否则返回被删除的点的 
		void preorder(int);
		void midorder(int);
		void maintain(int&amp;,bool);
		int&amp; returnroot()
		{
			return root;
		}
		int find(int&amp;,int);   //返回查找到的点的输入的序号，根据序号可以得到该点的size以及key信息 
		int select(int&amp;,int);
		int after(int&amp;,int);
		int pre(int&amp;,int);
	private:
		int size[N];
		int left[N];
		int right[N];
		int key[N];
		int num;
		int root;
};

void SBT::left_rotation(int&amp; p)
{
	int k=right[p];
	right[p]=left[k];
	left[k]=p;
	size[k]=size[p];
	size[p]=size[left[p]]+size[right[p]]+1;
	p=k;
}

void SBT::right_rotation(int&amp; p)
{
	int k=left[p];
	left[p]=right[k];
	right[k]=p;
	size[k]=size[p];
	size[p]=size[left[p]]+size[right[p]]+1;
	p=k;
}

void SBT::maintain(int&amp; p,bool judge)
{
	if(judge==false)
	{
		if(size[left[left[p]]]&gt;size[right[p]]) right_rotation(p);
		else
		{
			if(size[right[left[p]]]&gt;size[right[p]]) 
			{
				left_rotation(left[p]);
				right_rotation(p);
			}
			else return ;
		}
	}
	else
	{
		if(size[right[right[p]]]&gt;size[left[p]]) right_rotation(p);
		else
		{
			if(size[left[right[p]]]&gt;size[left[p]])
			{
				right_rotation(right[p]);
				left_rotation(p);
			}
			else return ;
		}
	}
	maintain(left[p],false);
	maintain(right[p],true);
	maintain(p,false);
	maintain(p,true);
}

void SBT::insert(int&amp; p,int k)
{
	if(p==0)
	{
		key[p=++num]=k;
		size[num]=1;
	}
	else
	{
		size[p]++;
		if(k&lt;key[p]) insert(left[p],k);
		else insert(right[p],k);
	}
	if(p!=0) maintain(p,k&gt;=key[p]);
}

int SBT::delete_(int&amp; p,int k,bool judge)
{
	if(key[p]==k) judge=1;
	if(key[p]==k||(left[p]==0&amp;&amp;k&lt;key[p])||(right[p]==0&amp;&amp;k&gt;key[p])) 
	{
		if(((left[p]==0&amp;&amp;k&lt;key[p])||(right[p]==0&amp;&amp;k&gt;key[p]))&amp;&amp;judge==0)   
		{
			return -1;  //直接返回给主调函数为-1，代表查找失败 
		}
		else   //剩下的情况就是KEY[P]=K&amp;&amp;judge=1(代表之前已经找到过)
		{
			int r=key[p];
			if(left[p]==0||right[p]==0) p=left[p]+right[p];
			else key[p]=delete_(left[p],k+1,judge);
			return r;
		} 
	}
	else
	{
		if(key[p]&gt;k) return delete_(left[p],k,judge);
		else return delete_(right[p],k,judge);
	}
}

int SBT::find(int&amp; p,int k)
{
	if(p==0||key[p]==k) return p;
	else
	{
		if(k&lt;key[p]) return find(left[p],k);
		else return find(right[p],k);
	} 
}

void SBT::preorder(int p)
{
	if(p==0) return ;
	else
	{
		cout&lt;&lt;key[p]&lt;&lt;&#39; &#39;;
		preorder(left[p]);
		preorder(right[p]);
	}
}

void SBT::midorder(int p)
{
	if(p==0) return ;
	else
	{
		midorder(left[p]);
		cout&lt;&lt;key[p]&lt;&lt;&#39; &#39;;
		midorder(right[p]);
	}
}

int SBT::select(int&amp; p,int k)  //选择第k大的元素 
{
	if(size[left[p]]+1==k) return p;
	else
	{
		if(size[left[p]]+1&lt;k) return select(right[p],k-size[left[p]]-1);
		else return select(left[p],k);
	}
}

int SBT::after(int&amp; p,int k)
{
	if(p==0) return -1;  //-1代表查找失败的标记
	else
	{
		if(key[p]==k) return key[right[p]];
		else
		{
			if(k&lt;key[p]) return after(left[p],k);
			else return after(right[p],k);
		}
	}
}

int SBT::pre(int&amp; p,int k)
{
	if(p==0) return -1;
	else
	{
		if(key[p]==k) return key[left[p]];
		else
		{
			if(k&lt;key[p]) return pre(left[p],k);
			else return pre(right[p],k);
		} 
	}
}

int main()
{
	SBT my;   //这里对left，right，size，key的含义可能不清楚，我来解释一下，每次输入一批数据的时候，我们嘉定对输入的数据进行编号，left[i]存储的是i次输入的数据的左儿子的输入的顺序编号   
    my.insert(my.returnroot(),5);  
    my.insert(my.returnroot(),2);  
    my.insert(my.returnroot(),9);  
    my.insert(my.returnroot(),4);  
    my.insert(my.returnroot(),6);  
    my.insert(my.returnroot(),8);  
    my.preorder(my.returnroot());  
    cout&lt;&lt;endl;   
    my.insert(my.returnroot(),7);  
    my.preorder(my.returnroot());  
    cout&lt;&lt;endl;  
    my.delete_(my.returnroot(),5,0);  
    my.preorder(my.returnroot());  
    cout&lt;&lt;endl;   
    cout&lt;&lt;my.after(my.returnroot(),8)&lt;&lt;endl;
	return 0;
} </pre>
<h2>6.模板化SBT</h2>
<div><pre code_snippet_id="1837882" snippet_file_name="blog_20160820_16_3054820"  name="code" class="cpp">#include&quot;iostream&quot;
#include&quot;cstdio&quot;
#include&quot;cstring&quot;
#include&quot;cstdlib&quot;
#define N 1000

using namespace std;

template&lt;typename T&gt; 
class SBT
{
	public:
		SBT()
		{
			memset(size,0,sizeof(size));
			memset(key,0,sizeof(key));
			memset(left,0,sizeof(left));
			memset(right,0,sizeof(right));
			num=root=0;
		}
		void left_rotation(int&amp;);
		void right_rotation(int&amp;);
		void maintain(int&amp;,bool);
		void insert(int&amp;,T); 
		T delete_(int&amp;,T,bool);
		void preorder(int);
		void midorder(int);
		T select(int&amp;,int);
		T after(int&amp;,T);
		T pre(int&amp;,T);
		int find(int&amp;,T);
		void afterdelete_();
		int&amp; returnroot()
		{
			return root;
		} 
	private:
		T key[N];
		int left[N];
		int right[N];
		int size[N];
		int num;
		int root;
};

template&lt;typename T&gt;
void SBT&lt;T&gt;::left_rotation(int&amp; p)
{
	int k=right[p];
	right[p]=left[k];
	left[k]=p;
	size[k]=size[p];
	size[p]=size[left[p]]+size[right[p]]+1;
	p=k;
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::right_rotation(int&amp; p)
{
	int k=left[p];
	left[p]=right[k];
	right[k]=p;
	size[k]=size[p];
	size[p]=size[left[p]]+size[right[p]]+1;
	p=k;
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::maintain(int&amp; p,bool judge)
{
	if(judge==false)
	{
		if(size[left[left[p]]]&gt;size[right[p]]) right_rotation(p);
		else
		{
			if(size[right[left[p]]]&gt;size[right[p]])
			{
				left_rotation(left[p]);
				right_rotation(p);
			}
			else return ;
		}
	}
	else
	{
		if(size[right[right[p]]]&gt;size[left[p]]) left_rotation(p);
		else 
		{
			if(size[left[right[p]]]&gt;size[left[p]])
			{
				right_rotation(right[p]);
				left_rotation(p);
			}
			else return ;
		}
	}
	maintain(left[p],false);
	maintain(right[p],true);
	maintain(p,true);
	maintain(p,false);
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::insert(int&amp; p,T k)
{
	if(p==0) 
	{
		key[p=++num]=k;
		size[p]=1;
	}
	else
	{
		size[p]++; 
		if(key[p]&gt;k) insert(left[p],k);
		else insert(right[p],k);
		maintain(p,k&gt;=key[p]);
	}
} 

template&lt;typename T&gt;
T SBT&lt;T&gt;::delete_(int&amp; p,T k,bool judge)
{
	if(key[p]==k) judge=1;
	if(key[p]==k||(left[p]==0&amp;&amp;k&lt;key[p])||(right[p]==0&amp;&amp;k&gt;key[p]))
	{
		if(((left[p]==0&amp;&amp;k&lt;key[p])||(right[p]==0&amp;&amp;k&gt;key[p]))&amp;&amp;judge==0) return key[0];
		else
		{
			T r=key[p];
			if(left[p]==0||right[p]==0) p=left[p]+right[p];
			else key[p]=delete_(left[p],k,1);
			return r;
		}
	}
	else
	{
		size[p]--;
		if(key[p]&gt;k) return delet_(left[p],k,judge);
		else return delet_(right[p],k,judge);
	}
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::afterdelete_()
{
	T r;
	cout&lt;&lt;&quot;输入你要删除的节点的关键字&quot;&lt;&lt;endl;
	cin&gt;&gt;r; 
	delete_(root,r,0);
	num--;
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::preorder(int p)
{
	if(p==0) return ;
	else
	{
		cout&lt;&lt;key[p]&lt;&lt;&#39; &#39;;
		preorder(left[p]);
		preorder(right[p]); 
	}
}

template&lt;typename T&gt;
void SBT&lt;T&gt;::midorder(int p)
{
	if(p==0) return ;
	else
	{
		midorder(left[p]);
		cout&lt;&lt;key[p]&lt;&lt;&#39; &#39;;
		midorder(right[p]); 
	}
}

template&lt;typename T&gt;
T SBT&lt;T&gt;::select(int&amp; p,int k)
{
	if(size[left[p]]+1==k) return key[p];
	else
	{
		if(size[left[p]]+1&gt;k) return select(left[p],k);
		else return select(right[p],k-size[left[p]]-1);
	}
}

template&lt;typename T&gt;
int SBT&lt;T&gt;::find(int&amp; p,T k)
{
	if(p==0||key[p]==k) return p;
	else
	{
		if(key[p]&gt;k) return find(left[p],k);
		else return find(right[p],k);
	}
} 

template&lt;typename T&gt;
T SBT&lt;T&gt;::pre(int&amp; p,T k)
{
	if(p==0) return key[0];
	if(key[p]==k) return key[left[p]];
	else
	{
		if(key[p]&gt;k) return pre(left[p],k);
		else return pre(right[p],k); 
	}
}

template&lt;typename T&gt;
T SBT&lt;T&gt;::after(int&amp; p,T k)
{
	if(p==0) return key[0];
	if(key[p]==k) return key[right[p]];
	else
	{
		if(key[p]&gt;k) return after(left[p],k);
		else return after(right[p],k);
	}
}

int main()
{
	SBT&lt;double&gt; my;
	my.insert(my.returnroot(),5);
	my.insert(my.returnroot(),2);
	my.insert(my.returnroot(),9);
	my.insert(my.returnroot(),4);
	my.insert(my.returnroot(),6);
	my.insert(my.returnroot(),8);
	my.insert(my.returnroot(),7);
	my.insert(my.returnroot(),7.5);
	my.preorder(my.returnroot());
	return 0;
} </pre><br>
<br>
</div>
<br>
<h2>7.应用：</h2>
</div>
<div>1.SBT的select函数可以求最大最小，第k大的元素，相对于我们用对来实现的话可能在建完树之后，操作会更快一点，我之后会出一个这个专题</div>
<div>2.SBT优化LCS问题的动态规划</div>
<h2>6.鸣谢：</h2>
<div>长时间没有读懂SBT</div>
<div>感谢：</div>
<div>田劲峰老师2011年的论文</div>
<div>感谢NOI百度贴吧的大牛的详解</div>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=2.0" />
            </div>
        </article>
        <div class="readall_box csdn-tracking-statistics" data-mod="popu_376">
			<div class="read_more_mask"></div>
            <a class="btn btn-large btn-gray-fred read_more_btn" target="_self">阅读全文</a>
        </div>
        <div class="article_copyright">
            版权声明：本文为博主原创文章，未经博主允许不得转载。
        </div>
        <!--  <div class="reward_box">
            <div class="tit">
              <button class="btn_reward"><i class="icon iconfont icon-dashang-"></i></button>
            </div>
            <dl class="clearfix">
              <dt><a href="#" target="_blank">近期打赏</a></dt>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
              <dd><a href="#" target="_blank"><img src="http://avatar.csdn.net/9/3/2/2_nzf_001.jpg" alt="聂兆芳" title="聂兆芳"></a></dd>
            </dl>
          </div>-->

        <ul class="article_collect clearfix csdn-tracking-statistics"  data-mod="popu_378">
            <li class="tit">本文已收录于以下专栏：</li>
            
            <li><a href="http://blog.csdn.net/column/details/12704.html" target="_blank">算法与数据结构</a></li>
            
        </ul>
        <div class="comment_box clearfix">
            <div id="comment_form">
                <div id="commentsbmitarear">
                    <!-- <h6><span>0</span>条评论</h6> -->
           <!--          <dl class="clearfix" id="commentbox">
                        <dt>
                            <a href="http://my.csdn.net/"><img src="" ></a>
                        </dt>
                        <dd>
                            <a href="http://my.csdn.net/" target="_blank"></a>
                        </dd>
                        <dd class="txt_tip"><span id="tip_comment" class="tip"></span></dd>
                    </dl> -->
                    <div class="comment_area clearfix">
						<div class="userimg"><a href="http://my.csdn.net/"><img src=""></a></div>
                        <form action="/ltyqljhwcm/comment/submit?id=52237338" method="post" onsubmit="return subform(this);" id="commentform">
                            <textarea class="comment_content" name="comment_content" id="comment_content" placeholder="发表你的评论"></textarea>
                            <div class="bot_bar clearfix">
                                <div id="ubbtools" class="add_code">
                                    <a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
                                </div>

                                <input type="hidden" id="comment_replyId" name="comment_replyId">
                                <input type="hidden" id="comment_userId" name="comment_userId" value="">
                                <input type="hidden" id="commentId" name="commentId" value="">
                                <input type="submit" class="btn btn-redborder" value="发表评论">
								<span id="tip_comment" class="tip">
                                <div style="display: none;" class="csdn-tracking-statistics" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>

                                <div id="lang_list" code="code">
                                    <a href="#html" style="width:95px;" class="long_name" target="_self">HTML/XML</a>
                                    <a href="#objc" style="width:95px;" class="long_name" target="_self">objective-c</a>
                                    <a href="#delphi" style="width:58px;" class="zhong_name" target="_self">Delphi</a>
                                    <a href="#ruby" class="zhong_name" target="_self">Ruby</a>
                                    <a href="#php" target="_self">PHP</a>
                                    <a href="#csharp" class="duan_name" target="_self">C#</a>
                                    <a style=" border-right: none;" href="#cpp" class="duan_name" target="_self">C++</a>
                                    <a style=" border-bottom:none;width:95px;" href="#javascript" class="long_name" target="_self">JavaScript</a>
                                    <a style=" border-bottom:none;width:95px;" href="#vb" class="long_name" target="_self">Visual Basic</a>
                                    <a style=" border-bottom:none;" href="#python" class="zhong_name" target="_self">Python</a>
                                    <a style=" border-bottom:none;" href="#java" class="zhong_name" target="_self">Java</a>
                                    <a style="border-bottom:none;" href="#css" class="duan_name" target="_self">CSS</a>
                                    <a style="border-bottom:none;" href="#sql" class="duan_name" target="_self">SQL</a>
                                    <a style="border:none; " href="#plain" class="duan_name" target="_self">其它</a>
                                    <span class="arrb"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment_li_outbox">
            <div id="comment_list"></div>
        </div>

        <div class="more_comment">
            <div id="comment_bar" class="trackgin-ad" data-mod="popu_385"></div>
        </div>

        <h3 class="recommend_tit">相关文章推荐</h3>
        <div class="recommend_list clearfix">
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/qq_26296453/9010089" target="_blank" strategy="BlogCommendFromCsdn_0"><img class="maxwidth" src="http://download.csdn.net/images/minetype/pdf.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/qq_26296453/9010089" target="_blank" strategy="BlogCommendFromCsdn_0">从BST到SBT</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2015-08-15 22:23</li>
					  <li class="visited_num fileSize">461KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/qq_26296453/9010089">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/baihacker/5671975" target="_blank" strategy="BlogCommendFromCsdn_1"><img class="maxwidth" src="http://download.csdn.net/images/minetype/zip.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/baihacker/5671975" target="_blank" strategy="BlogCommendFromCsdn_1">二叉查找树代码（avl,bst,rbt,sbt,splay,treap树）</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2013-06-29 21:25</li>
					  <li class="visited_num fileSize">22KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/baihacker/5671975">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <!--dl class="clearfix csdn-tracking-statistics" data-mod="popu_393">
                <dt><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog10" target="_blank"><img class="maxwidth" src="http://img.blog.csdn.net/20170928113144608" alt="" title=""></a></dt>
                <dd>
                    <div class="summary">
                        <h2><a href='http://edu.csdn.net/topic/python1?utm_source=blog10' target='_blank'>伤心啊！年度热门编程语言排行榜出来了...</a></h2>  <div class="summary">近期，IEEE Spectrum 发布了第四届顶级编程语言交互排行榜。结合 10 个线上数据源的 12 个标准，对 48 种语言进行了排行！此外，七牛云许式伟曾说过Go语言会取代Java...气氛... </div> 
                    </div>
                </dd>
            </dl-->
	<script>
		(function() {
		    var s = "_" + Math.random().toString(36).slice(2);
		    document.write('<div id="' + s + '"></div>');
		    (window.slotbydup=window.slotbydup || []).push({
			id: '4765209',
			container: s,
			size: '808,120',
			display: 'inlay-fix'
		    });
		})();
	</script>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/lampsunny/article/details/7386823"  target="_blank" strategy="BlogCommendFromCsdn_2">《十三种人生感悟》读后感(绿字部分) 转至张宴老师博客</a></h2>
                    <div class="summary">
                        1.我爱你并不是因为你是谁，而是因为在你身边的时候我是谁。 
I love you not for whom you are ,but for who I am when I am by your ...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/lampsunny" target="_blank" strategy="BlogCommendFromCsdn_2"><img src="http://avatar.csdn.net/5/2/7/2_lampsunny.jpg" alt="lampsunny" title="lampsunny"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/lampsunny">lampsunny</a></li>
                        <li class="time">2012-03-23 13:18</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>3401</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics downloadElement" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
               	<dt><a href="http://download.csdn.net/detail/hqu_fritz/5189032" target="_blank" strategy="BlogCommendFromCsdn_3"><img class="maxwidth" src="http://download.csdn.net/images/minetype/pdf.svg" alt="" title=""></a></dt>
		<dd>
			<div class="summary">
				<h2><a href="http://download.csdn.net/detail/hqu_fritz/5189032" target="_blank" strategy="BlogCommendFromCsdn_3">国家集训队陈启峰SBT论文</a></h2>
				<div class="summary">
				  <ul>
					  <li class="time">2013-03-27 21:25</li>
					  <li class="visited_num fileSize">225KB</li>
					  <li class="download_btn"><a href="http://download.csdn.net/detail/hqu_fritz/5189032">下载</a></li>
				  </ul>
				</div> 
			</div>
		</dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/jihengshan/article/details/45689939"  target="_blank" strategy="BlogCommendFromCsdn_4">视频跟踪论文读后感系列二：Online Selection Of Discriminative Tracking Features（PAMI2005）</a></h2>
                    <div class="summary">
                        Abstract
  This paper presents an online feature selection mechanism for evaluating multiple feature...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/jihengshan" target="_blank" strategy="BlogCommendFromCsdn_4"><img src="http://avatar.csdn.net/8/E/8/2_jihengshan.jpg" alt="jihengshan" title="jihengshan"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/jihengshan">jihengshan</a></li>
                        <li class="time">2015-05-13 10:25</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>945</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/shaguabufadai/article/details/71104815"  target="_blank" strategy="BlogCommendFromCsdn_5">知识图谱论文读后感001</a></h2>
                    <div class="summary">
                        个人对知识图谱的感悟
  在这之前，互联网是的信息都是一堆字符串，“知识图谱”出现后，信息聚变和拓展开来了，形成一个个实体和实体之间的联系。以搜索领域来说，以前，当人们键入关键字“川普”进行搜索时，返...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/shaguabufadai" target="_blank" strategy="BlogCommendFromCsdn_5"><img src="http://avatar.csdn.net/3/9/5/2_shaguabufadai.jpg" alt="shaguabufadai" title="shaguabufadai"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/shaguabufadai">shaguabufadai</a></li>
                        <li class="time">2017-05-02 23:02</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>214</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/fanyang_1996/article/details/53809701"  target="_blank" strategy="BlogCommendFromCsdn_6">论文《Neighbor-Sensitive Hashing》读后感（四）</a></h2>
                    <div class="summary">
                        参数m的选取
原算法中通过m = c * b (b为哈希码的位数)，将c从1~10不断在部分测试数据项上进行尝试，进而选取最合适的参数m。
但是这样会导致以下两个问题：
1.&#160;&#160;&#160;&#160;在所有情况下都要进...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/fanyang_1996" target="_blank" strategy="BlogCommendFromCsdn_6"><img src="http://avatar.csdn.net/7/4/5/2_fanyang_1996.jpg" alt="fanyang_1996" title="fanyang_1996"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/fanyang_1996">fanyang_1996</a></li>
                        <li class="time">2016-12-22 09:46</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>147</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/yanqux/article/details/6235108"  target="_blank" strategy="BlogCommendFromCsdn_7">一篇云计算论文读后感 </a></h2>
                    <div class="summary">
                        发表于：2011-03-08 21:12 | 分类：转载 阅读：(21) 评论：(1) &#160;&#160;&#160;&#160;&#160;&#160;&#160; 刚看了一个关于一篇云计算的论文的评论，也同样是通俗易懂，既适合同行看，也适合非IT人士科普一下。...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/yanqux" target="_blank" strategy="BlogCommendFromCsdn_7"><img src="http://avatar.csdn.net/E/5/F/2_yanqux.jpg" alt="yanqux" title="yanqux"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/yanqux">yanqux</a></li>
                        <li class="time">2011-03-09 20:21</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>1931</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/fanyang_1996/article/details/53780494"  target="_blank" strategy="BlogCommendFromCsdn_8">论文《Neighbor-Sensitive Hashing》读后感（二）</a></h2>
                    <div class="summary">
                        一、数据挖掘问题
&#160; &#160; 数据挖掘算法是根据数据创建数据挖掘模型的一组试探法和计算。 为了创建模型，算法将首先分析您提供的数据，并查找特定类型的模式和趋势。
数据挖掘有十大经典算法，包括：C4.5...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/fanyang_1996" target="_blank" strategy="BlogCommendFromCsdn_8"><img src="http://avatar.csdn.net/7/4/5/2_fanyang_1996.jpg" alt="fanyang_1996" title="fanyang_1996"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/fanyang_1996">fanyang_1996</a></li>
                        <li class="time">2016-12-21 09:27</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>170</span></li>
                    </ul>
                </dd>
            </dl>
            
            <dl class="clearfix csdn-tracking-statistics" data-mod="popu_387" data-poputype="feed"  data-feed-show="false"  data-dsm="post">
                <dd>
                    <h2><a href="/gundam0083ms/article/details/68067144"  target="_blank" strategy="BlogCommendFromCsdn_9">sbt入门指南翻译（6） 入门指南总结</a></h2>
                    <div class="summary">
                        Getting Started summary(入门指南总结)
Sbt:核心概念
1.&#160;&#160;&#160;&#160;&#160;&#160;基于scala。不可否认熟悉scala语法是非常有帮助的。在《Programmingin Scala》...
                    </div>
                    <ul>
                        <li class="avatar_img"><a href="http://blog.csdn.net/Gundam0083ms" target="_blank" strategy="BlogCommendFromCsdn_9"><img src="http://avatar.csdn.net/A/0/5/2_gundam0083ms.jpg" alt="Gundam0083ms" title="Gundam0083ms"></a></li>
                        <li class="user_name"><a href="http://blog.csdn.net/Gundam0083ms">Gundam0083ms</a></li>
                        <li class="time">2017-03-29 17:05</li>
                        <li class="visited_num"><i class="icon iconfont icon-read"></i><span>105</span></li>
                    </ul>
                </dd>
            </dl>
            

	   

            

            
        </div>
    </main>
    <aside>
        <div class="right_box user_info">
            <dl class="inf_bar clearfix">
                <dt class="csdn-tracking-statistics" data-mod="popu_381">
                    <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank">
                        <img src="http://avatar.csdn.net/A/7/0/1_ltyqljhwcm.jpg" class="avatar_pic">
                    </a>
                    <span class="medals" title="">
                <svg class="icon" aria-hidden="true">
                    
                </svg>
              </span>
                </dt>
                <dd>
                    <h3 class="csdn-tracking-statistics"  data-mod="popu_380"><a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" id="uid">ltyqljhwcm</a></h3>
                    <span  class="csdn-tracking-statistics" data-mod="popu_379"><a class="btn btn-redborder-small "  id="span_add_follow" target="_self">＋关注</a></span>
                </dd>
            </dl>
            <div class="inf_number_box clearfix">
                <dl>
                    <dt>原创</dt>
                    <dd>219</dd>
                </dl>
                <dl>
                    <dt>粉丝</dt>
                    <dd id='fan'>39</dd>
                </dl>
                <dl>
                    <dt>喜欢</dt>
                    <dd>0</dd>
                </dl>
								 <dl>
              <dt>码云</dt>
              <dd>&nbsp;</dd>
            </dl>

            </div>
	    <div class="writings">
              <div class="public_signal clearfix">
                <h3>他的最新文章</h3>
                <a href="http://blog.csdn.net/ltyqljhwcm" target="_blank" class="more_z"><span>更多文章</span></a>
              </div>
                <ul class="inf_list clearfix csdn-tracking-statistics" data-mod="popu_382">
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53454971" target="_blank">POJ 3295 - 位运算 + 模拟 +递归</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53444306" target="_blank">NYOJ 118 次小生成树</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53434466" target="_blank">胜者树 败者树 K-路最佳归并树 高效外部排序</a>
                    </li>
                    
                    <li class="clearfix">
                      
                        <a href="/ltyqljhwcm/article/details/53411183" target="_blank">POJ 1062 - 昂贵的聘礼 - 经典题</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <div class="extension_other csdn-tracking-statistics" data-mod="popu_389">
						<!--u3032528-->
			<div class="flashrecommend">
            <script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
		    </div>
        </div>

		<div class="host-column">
          <h3>博主专栏</h3>
          <ul class="column-list">

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13704.html">
                  <img src="http://img.blog.csdn.net/20161126164008952" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13704.html">NYOJ 好题总结</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>3080</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13628.html">
                  <img src="http://img.blog.csdn.net/20161121124730884" alt="">
                  <div>56</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13628.html">POJ 专项题解</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>19375</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/13409.html">
                  <img src="http://img.blog.csdn.net/20161102193750895" alt="">
                  <div>4</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/13409.html">Leetcode</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1266</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12932.html">
                  <img src="http://img.blog.csdn.net/20160915093249392" alt="">
                  <div>8</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12932.html">读书笔记</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2246</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/12704.html">
                  <img src="http://img.blog.csdn.net/20160826002037987" alt="">
                  <div>37</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/12704.html">算法与数据结构</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>41992</span></div>
              </div>
            </li>

            <li class="clearfix">
              <div class="img list-left">
                <a href="http://blog.csdn.net/column/details/mystudyrecord001.html">
                  <img src="http://img.blog.csdn.net/20160809183336359" alt="">
                  <div>15</div>
                </a>
              </div>
              <div class="content list-left">
                <h4 class="title"><a href="http://blog.csdn.net/column/details/mystudyrecord001.html">微软面试百题</a></h4>
                <div class="read list-left"><i class="icon iconfont icon-read"></i><span>8448</span></div>
              </div>
            </li>

          </ul>
          <div class="unfold-btn">
            <span>展开</span><i class="icon iconfont icon-xiajiantou"></i>
          </div>
        </div>
		
        
        <div class="fixRight">
            <div class="right_box padb0 csdn-tracking-statistics" data-mod="popu_391">
                <h3 class="tit"><span><em>在线课程</em></span></h3>
                <ul class="edu_li clearfix">
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111134087930.png" alt="Presto服务治理与架构优化在京东的实践应用" title="Presto服务治理与架构优化在京东的实践应用">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/series_detail/64?utm_source=blog7" target="_blank">Presto服务治理与架构优化在京东的实践应用</a></p>
                      <p>讲师：王哲涵</p>
                    </div>
                  </li>
                  
                  <li>
                    <div>
                      <a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">
                        <img src="http://img.bss.csdn.net/201710111123195350.png" alt="【免费直播】Python最佳学习路线" title="【免费直播】Python最佳学习路线">
                      </a>
                    </div>
                    <div>
                      <p><a href="http://edu.csdn.net/huiyiCourse/detail/581?utm_source=blog7" target="_blank">【免费直播】Python最佳学习路线</a></p>
                      <p>讲师：韦玮</p>
                    </div>
                  </li>
                  
                </ul>
            </div>
			<!--u3032529-->
            <!-- <div class="extension_other csdn-tracking-statistics baidu_box" data-mod="popu_395">
								
                <script type="text/javascript" src="http://mpb1.iteye.com/cxpdpmumfaedgm.js"></script>
            </div> -->
			<div class="extension_other csdn-tracking-statistics bottomRcom" data-mod="popu_389" style="position:absolute;z-index:-5;opacity:0;pointer-events:none">
						<!--u3032528-->
				<div class="flashrecommend">
				<script type="text/javascript" src="http://mpb1.iteye.com/bwocoltlyzdec.js"></script>
				</div>
			</div>
        </div>
		<div class="user-hotArticle">
          <h3>热门文章</h3>
          <ul class="hotArticle-list">
 
            <li>
              <a href="/ltyqljhwcm/article/details/53043646">快速幂取模算法详解</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>5853</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/51952942">最短路径算法汇总</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>4540</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52966874">ELFhash - 优秀的字符串哈希算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2787</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52145746">快速排序全面讲解（含复杂度证明）——即将引出八大排序算法</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>2041</span></div>
            </li>
 
            <li>
              <a href="/ltyqljhwcm/article/details/52497853">2016BIT小学期——电话号码问题（哈希+位运算）</a>
              <div class="read list-left"><i class="icon iconfont icon-read"></i><span>1921</span></div>
            </li>
 
          </ul>
        </div>


    </aside>
</div>

<div class="left_fixed">
      <div class="left_show_button">
        <span>
          <i class="icon iconfont icon-youjiantou"></i>
        </span>
      </div>
    <ul class="left_menu">

        <li>
            <button class="left-fixed-btn btn-like csdn-tracking-statistics" data-mod="popu_373" target="_self">
                <span class="iconbox border_red"><i class="icon iconfont icon-dianzan"></i></span>
				<span class="txt">1</span>
            </button>
        </li>
		<li id="blog_artical_directory">
            <button class="left-fixed-btn left_menu_btn csdn-tracking-statistics" data-mod="popu_372" target="_self">
                <span class="iconbox border_black"><i class="icon iconfont icon-mulu"></i></span>
            </button>
        </li>
        <li class="menu_con">
            <div class="list_father">
                <div class="arr_box">
                    <button class="btn-noborder arr-btn scroll-down  left_scroll_down"><i class="icon iconfont icon-xiajiantou"></i></button>
                    <button class="btn-noborder arr-btn scroll-up left_scroll_top"><i class="icon iconfont icon-shangjiantou"></i></button>
                </div>
                <div class="arr"></div>
                <div id="csdnBlogDir"></div>
            </div>
        </li>
        <li>
            <button class="left-fixed-btn csdn-tracking-statistics" data-mod="popu_374"  id="com-quick-collect" target="_self">
                <span class="iconbox border_purple"><i class="icon iconfont icon-shoucang"></i></span>
    
            </button>
        </li>
		<li>
          <button class="left-fixed-btn btn-pinglun" >
            <span class="iconbox border_purple"><i class="icon iconfont icon-pinglun"></i></span>
          </button>
        </li>
        <li id="share_box">
            <button class="left-fixed-btn  csdn-tracking-statistics"  data-mod="popu_375" target="_self">
                <span class="iconbox border_orange"><i class="icon iconfont icon-fenxiang"></i></span>
            </button>
            <div class="bdsharebuttonbox csdn-tracking-statistics" data-mod="popu_172">
                <div class="outside">
                    <span class="iconbox border_red2"><i class="icon iconfont icon-xinlang"></i></span>
                    <a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_green"><i class="icon iconfont icon-weixin"></i></span>
                    <a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"> </a>
                </div>
                <div class="outside">
                    <span class="iconbox border_blue"><i class="icon iconfont icon-QQ"></i></span>
                    <a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"> </a>
                </div>
            </div>
        </li>
    </ul>
</div>
<div class="right_fixed">
  <div class="r_ico">
	<i class="icon iconfont icon-jubao"></i>
	<span class="txt" id="reportBtn">内容举报</span>
  </div>
  <div class="returnTop">
   <i class="icon iconfont icon-fanhuidingbu"></i>
   <span>返回顶部</span>
 </div>
</div>
<div id="pop_win"></div>
<div id="popup_mask"></div>
<div class="pop_CA_cover" ></div>
<div class="pop pop_CA" >
    <div class="CA_header">
        收藏助手
        <span class="cancel_icon"  id="fapancle" ></span>
    </div>
    <iframe src="" id="collectIframe" frameborder="0" width="100%" height="360"  scrolling="no" ></iframe>
</div>
<!--举报-->
<div id="report_dialog" style="top: 250px; left: 343.5px;"><div id="panel_report">
    <div class="panel_head">不良信息举报</div>
    <form method="post" id="frmReport" class="panel_body">
        <table border="0" cellpadding="0" cellspacing="4" class="pop_table">
            <tbody><tr><td colspan="2">您举报文章：<a href="http://blog.csdn.net/raintungli/article/details/76583070" target="_blank">深度学习：神经网络中的前向传播和反向传播算法推导</a></td></tr>
            <tr>
                <th style="width:60px;">举报原因：</th>
                <td id="panel_reporttype">
                    <label><input type="radio" class="report_type" id="report_sex" name="report_type" value="1">色情</label>
                    <label><input type="radio" class="report_type" id="report_Politics" name="report_type" value="2">政治</label>
                    <label><input type="radio" class="report_type" id="report_copy" name="report_type" value="3">抄袭</label>
                    <label><input type="radio" class="report_type" id="report_ad" name="report_type" value="4">广告</label>
                    <label><input type="radio" class="report_type" id="report_want" name="report_type" value="5">招聘</label>
                    <label><input type="radio" class="report_type" id="report_call" name="report_type" value="6">骂人</label>
                    <br>
                    <label><input type="radio" class="report_type" id="report_other" name="report_type" value="7">其他</label>
                    <input type="text" name="report_other_content" id="report_other_content" maxlength="30" style="display: none;">
                </td>
            </tr>
            <tr id="panel_originalurl" style="display: none;">
                <th>原文地址：</th>
                <td>
                    <input id="originalurl" value="http://" name="originalurl" type="text" style="width: 90%;">
                </td>
            </tr>
            <tr>
                <th id="sp_reason">原因补充：</th>
                <td>
                    <textarea id="report_description" style="width: 300px;" rows="3" name="report_description"></textarea>
                    <p id="sp_n" style="color:#999;margin:0px;padding:0px;">(最多只允许输入30个字)</p>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <input id="btnSubmitReport" name="submit" type="image" align="middle" class="btn_1" src="http://static.blog.csdn.net/images/btn_submit.jpg">
                    <span style="padding-left:20px;"></span>
                    <img id="btnCloseReportDialog" src="http://static.blog.csdn.net/images/btn_cancel.jpg" align="middle">
                    <div id="error" style="color: Red">
                    </div>
                </td>
            </tr>
            </tbody></table>
    </form>
</div>
    <script language="javascript" type="text/javascript">
        var isComment=0;
        //显示隐藏地址
        $(function () {
            if(isComment){
                $("#report_description").attr("disabled",true);
                $("#sp_n").hide();
                $("#sp_reason").html("评论内容：");
            }
            $(".report_type").click(function () {
                $("#panel_originalurl,#report_other_content").hide();
                switch ($(this).val()) {
                    case '3':
                        $("#panel_originalurl").show();
                        $("#originalurl").focus();
                        break;
                    case '7':
                        if(isComment){
                            $("#report_other_content").show().focus();
                        }
                        break;
                }

            });

            $("#frmReport").submit(function () {
                if (!currentUserName) {

                    if (confirm("您的操作必须登录，是否登录？")) {
                        location.href = "http://passport.csdn.net/account/login?from=" + encodeURIComponent(location.href);
                        return false;
                    }
                    return false;
                }

                var reportType = $("input[name=report_type]:checked").val();
                if(!reportType){
                    alert("请选择举报原因！");
                    return false;
                }
                var otherInfo = "";
                switch (reportType) {
                    case '3':
                        otherInfo = $("#originalurl").val();
                        if (otherInfo == ""||otherInfo=="http://") {
                            alert("举报抄袭必须提供原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        } else if(!checkeURL(otherInfo)) {
                            alert("请输入正确的原创文章地址！");
                            $("#originalurl").focus();
                            return false;
                        }
                        break;
                    case '7':
                        otherInfo = $("#report_other_content").val();
                        if (isComment && !otherInfo) {
                            alert("请填写举报的具体原因！");
                            $("#report_other_content").focus();
                            return false;
                        }
                        if(!isComment){
                            if(!$("#report_description").val()){
                                alert("请填写举报的具体原因！");
                                $("#report_description").focus();
                                return false;
                            }
                        }
                        break;
                }
                if(!isComment){
                    if($("#report_description").val().length>30){
                        alert("举报原因最多只允许输入30个字！");
                        return false;
                    }
                }

                var data = {
                    articleId: 76583070,
                    commentId: 0,
                    reportType: reportType,
                    originalurl: $("#originalurl").val(),
                    report_other_content: $("#report_other_content").val(),
                    report_description: $("#report_description").val(),
                    currentUserName: currentUserName,
                    updatetime: "2017/8/8 16:54:12",
                    blogUser: "raintungli"
                };
                if(!isComment){//如果是举报文章
                    data.report_other_content = data.report_description;
                    data.report_description = "1. 神经网络这是一个常见的神经网络的图：这是一个常见的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层";
                }

                $.post(blog_address + "/common/report?id=76583070&t=2", data, function (data) {
                    if (data.result == 1){
                        SetError("感谢您的举报，我们会尽快审核！");
                    }else{
                        if (data.content) alert(data.content);
                    }

                });
                return false;
            });

            $("#btnCloseReportDialog").click(function () {
                CloseDiv();
            });

        });

        //提示后关闭方法
        function SetError(error) {
            $("#btnCloseReportDialog").trigger("click");
            alert(error);
            CloseDiv();
        }

        //关闭方法
        function CloseDiv() {

            $.removeMask();
            $("#report_dialog").hide().html("");
            return false;
        }

        //验证url
        function checkeURL(url){
            return /^http(s)?:\/\/([\w-]+\.)+[\w-]+/i.test(url);
        }
    </script>
</div>

<script src="http://c.csdnimg.cn/public/common/libs/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>

<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/blog_ver.js?v=3"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/Skin/skin3-template/js/skin2017.js?v=2017.032"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/cnick.js"></script>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<script type="text/javascript" >
    if($(".article_collect li").length==1){$(".article_collect").hide();}
    if($(".article_tags li").length==1){$(".article_tags").hide();}
    $(".edit a").attr("href","http://write.blog.csdn.net/postedit/"+fileName);
    $.each($(".edu_li a"),function(){$(this).attr("href",$(this).attr("href").replace("blog7","blog9"))});
    new CNick('#uid').showNickname();
if($("#fan").html()=="")
{
$("#fan").html(0);	
}
</script>
</body>

<script  type="text/javascript">
    var fromjs=$("#fromjs");
    if(fromjs.length>0)
    {                  
        $("#fromjs .markdown_views pre").addClass("prettyprint");       
        prettyPrint();

        $('pre.prettyprint code').each(function () {
            var lines = $(this).text().split('\n').length;
            var $numbering = $('<ul/>').addClass('pre-numbering').hide();
            $(this).addClass('has-numbering').parent().append($numbering);
            for (i = 1; i <= lines; i++) {
                $numbering.append($('<li/>').text(i));
            };
            $numbering.fadeIn(1700);
        });

        $('.pre-numbering li').css("color","#999");             
    }

    $(function(){
        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },500);         
       

    });

    setTimeout(function () {
        $(".toc a[target='_blank']").attr("target", "");
    }, 500);

</script>
</html>

